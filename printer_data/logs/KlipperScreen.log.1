2024-03-27 23:13:30,145 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nM400\nG92 E0\n{% if printer[printer.toolhead.extruder].target > 220 %}\nG1 E-5.0 F3600\n{% else %}\nG1 E-1.0 F3600\n{% endif %}\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nG91\nG0 Z1.00 X20.0 Y20.0 F20000\nTURN_OFF_HEATERS\nM107\nG1 Z4 F3000\nG90\nG0 X190 Y190 F3600'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-0.950'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '165', 'variable_safe_y': '165', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '25,25', 'mesh_max': '325,325', 'probe_count': '7, 7', 'mesh_pps': '2, 3', 'algorithm': 'bicubic', 'bicubic_tension': '0.2'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '58.437', 'pid_ki': '2.347', 'pid_kd': '363.769'}, 'firmware_retraction': {'retract_length': '0.8', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X165 Y165 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.164203, 0.156703, 0.154203, 0.164203, 0.189203, 0.169203, 0.154203\n0.164203, 0.154203, 0.139203, 0.154203, 0.149203, 0.131703, 0.111703\n0.149203, 0.156703, 0.139203, 0.164203, 0.171703, 0.164203, 0.126703\n0.154203, 0.161703, 0.141703, 0.174203, 0.151703, 0.134203, 0.106703\n0.119203, 0.134203, 0.111703, 0.134203, 0.106703, 0.114203, 0.084203\n0.154203, 0.166703, 0.149203, 0.151703, 0.164203, 0.151703, 0.134203\n0.226703, 0.191703, 0.189203, 0.216703, 0.216703, 0.214203, 0.196703', 'x_count': '7', 'y_count': '7', 'mesh_x_pps': '2', 'mesh_y_pps': '3', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '325.0', 'min_y': '25.0', 'max_y': '325.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nM400\nG92 E0\n{% if printer[printer.toolhead.extruder].target > 220 %}\nG1 E-5.0 F3600\n{% else %}\nG1 E-1.0 F3600\n{% endif %}\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nG91\nG0 Z1.00 X20.0 Y20.0 F20000\nTURN_OFF_HEATERS\nM107\nG1 Z4 F3000\nG90\nG0 X190 Y190 F3600', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.95, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro filament_load': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '165', 'variable_safe_y': '165'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [7, 7], 'mesh_min': [25.0, 25.0], 'mesh_max': [325.0, 325.0], 'mesh_pps': [2, 3], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.164203, 0.156703, 0.154203, 0.164203, 0.189203, 0.169203, 0.154203], [0.164203, 0.154203, 0.139203, 0.154203, 0.149203, 0.131703, 0.111703], [0.149203, 0.156703, 0.139203, 0.164203, 0.171703, 0.164203, 0.126703], [0.154203, 0.161703, 0.141703, 0.174203, 0.151703, 0.134203, 0.106703], [0.119203, 0.134203, 0.111703, 0.134203, 0.106703, 0.114203, 0.084203], [0.154203, 0.166703, 0.149203, 0.151703, 0.164203, 0.151703, 0.134203], [0.226703, 0.191703, 0.189203, 0.216703, 0.216703, 0.214203, 0.196703]], 'min_x': 25.0, 'max_x': 325.0, 'min_y': 25.0, 'max_y': 325.0, 'x_count': 7, 'y_count': 7, 'mesh_x_pps': 2, 'mesh_y_pps': 3, 'algo': 'bicubic', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 58.437, 'pid_ki': 2.347, 'pid_kd': 363.769, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 0.8, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X165 Y165 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-27 23:13:30,151 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-27 23:13:30,153 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-27 23:13:30,153 [printer.py:reinit()] - # Extruders: 1
2024-03-27 23:13:30,153 [printer.py:reinit()] - # Temperature devices: 2
2024-03-27 23:13:30,153 [printer.py:reinit()] - # Fans: 4
2024-03-27 23:13:30,154 [printer.py:reinit()] - # Output pins: 0
2024-03-27 23:13:30,154 [printer.py:reinit()] - # Leds: 1
2024-03-27 23:13:30,154 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-27 23:13:30,162 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-27 23:13:30,163 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-64-g1c9d82a
2024-03-27 23:13:30,163 [functions.py:log_start()] - Python version: 3.9
2024-03-27 23:13:30,180 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-27 23:13:30,183 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-27 23:13:30,506 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-27 23:13:30,507 [screen.py:init_klipper()] - Printer initialized
2024-03-27 23:13:30,508 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-27 23:13:30,508 [printer.py:change_state()] - Adding callback for state: startup
2024-03-27 23:13:32,383 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-27 23:13:32,383 [printer.py:change_state()] - Adding callback for state: ready
2024-03-27 23:13:32,386 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-27 23:13:32,391 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-27 23:13:32,392 [screen.py:show_panel()] - Reinitializing panel
2024-03-27 23:13:32,587 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-27 23:13:32,617 [main_menu.py:add_device()] - Adding device: extruder
2024-03-27 23:13:32,630 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-27 23:13:32,643 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-27 23:13:32,699 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-27 23:13:32,701 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-27 23:13:32,745 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-27 23:13:32,748 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-27 23:13:32,771 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 00:02:33,961 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 00:02:33,962 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 00:02:33,986 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 00:02:33,987 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 00:02:34,226 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 00:02:34,238 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 00:02:34,259 [job_status.py:update_file_metadata()] - Update Metadata. File: prusaslicer-righthand.gcode Size: 86187
2024-03-28 00:02:34,269 [job_status.py:show_file_thumbnail()] - prusaslicer-righthand.gcode
2024-03-28 00:03:53,638 [screen.py:show_popup_message()] - error: No trigger on probe after full movement
2024-03-28 00:03:53,735 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 00:03:53,736 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 00:03:53,748 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'error'
2024-03-28 00:03:56,144 [job_status.py:close_panel()] - Closing job_status panel
2024-03-28 00:03:56,145 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 00:03:56,150 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 00:03:56,152 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 00:03:56,274 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 00:03:56,290 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 00:03:56,305 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 00:03:56,315 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 00:03:56,372 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 00:03:57,266 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 00:03:57,399 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 00:03:59,385 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-03-28 00:03:59,392 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 00:04:23,417 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 00:04:23,502 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 00:04:24,826 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 00:04:24,854 [print.py:__init__()] - Thumbsize: 114.20689655172413
2024-03-28 00:04:24,858 [print.py:__init__()] - thumbs
2024-03-28 00:04:24,868 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-03-28 00:04:24,900 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-03-28 00:04:24,974 [print.py:load_files()] - Loaded in 0.063 seconds
2024-03-28 00:04:26,414 [KlippyGtk.py:Dialog()] - Showing dialog Print prusaslicer-righthand.gcode (width=800, height=480)
2024-03-28 00:04:27,155 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 00:04:27,156 [print.py:confirm_print_response()] - Starting print: prusaslicer-righthand.gcode
2024-03-28 00:04:27,156 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-28 00:04:27,298 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 00:04:27,299 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 00:04:27,313 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 00:04:27,513 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 00:04:27,523 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 00:04:27,538 [job_status.py:update_file_metadata()] - Update Metadata. File: prusaslicer-righthand.gcode Size: 86187
2024-03-28 00:04:27,547 [job_status.py:show_file_thumbnail()] - prusaslicer-righthand.gcode
2024-03-28 00:07:14,643 [screen.py:show_popup_message()] - error: No trigger on probe after full movement
2024-03-28 00:07:14,765 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 00:07:14,765 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 00:07:14,786 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'error'
2024-03-28 00:07:20,302 [job_status.py:close_panel()] - Closing job_status panel
2024-03-28 00:07:20,303 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 00:07:20,309 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 00:07:20,310 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 00:07:20,436 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 00:07:20,451 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 00:07:20,461 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 00:07:20,471 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 00:07:20,530 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 00:07:21,394 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 00:07:21,526 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 00:07:22,437 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 00:07:22,632 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-28 00:07:22,661 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-28 00:07:24,736 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-28 00:08:15,232 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-03-28 00:11:09,230 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 00:11:09,230 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 00:11:09,258 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 00:11:09,260 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 00:11:09,530 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 00:11:09,541 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 00:11:09,555 [job_status.py:update_file_metadata()] - Update Metadata. File: prusaslicer-righthand.gcode Size: 91624
2024-03-28 00:11:09,564 [job_status.py:show_file_thumbnail()] - prusaslicer-righthand.gcode
2024-03-28 00:13:35,234 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 00:13:35,341 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 00:13:35,930 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-28 00:13:36,265 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 00:13:42,965 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 00:14:37,493 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 00:14:37,889 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-28 00:14:38,675 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-28 00:15:51,235 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 00:15:51,278 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 00:15:51,300 [job_status.py:update_file_metadata()] - Update Metadata. File: prusaslicer-righthand.gcode Size: 91624
2024-03-28 00:15:51,310 [job_status.py:show_file_thumbnail()] - prusaslicer-righthand.gcode
2024-03-28 00:15:52,153 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-03-28 00:15:52,154 [screen.py:_go_to_submenu()] - #### Menu __print
2024-03-28 00:15:52,161 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 00:15:52,499 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-03-28 00:15:52,527 [menu.py:arrangeMenuItems()] - X > move
2024-03-28 00:15:52,539 [menu.py:arrangeMenuItems()] - X > power
2024-03-28 00:15:52,555 [menu.py:arrangeMenuItems()] - X > camera
2024-03-28 00:15:52,576 [menu.py:arrangeMenuItems()] - X > spoolman
2024-03-28 00:15:56,152 [screen.py:_load_panel()] - Loading panel: settings
2024-03-28 00:15:56,516 [screen.py:attach_panel()] - Current panel hierarchy: job_status >  > settings
2024-03-28 00:16:11,899 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 00:16:11,994 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-03-28 00:16:12,025 [menu.py:arrangeMenuItems()] - X > move
2024-03-28 00:16:12,036 [menu.py:arrangeMenuItems()] - X > power
2024-03-28 00:16:12,055 [menu.py:arrangeMenuItems()] - X > camera
2024-03-28 00:16:12,076 [menu.py:arrangeMenuItems()] - X > spoolman
2024-03-28 00:16:36,920 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 00:16:36,991 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 00:16:37,011 [job_status.py:update_file_metadata()] - Update Metadata. File: prusaslicer-righthand.gcode Size: 91624
2024-03-28 00:16:37,021 [job_status.py:show_file_thumbnail()] - prusaslicer-righthand.gcode
2024-03-28 00:16:49,487 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 00:16:50,104 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 00:16:50,521 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 00:20:46,207 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 00:20:46,207 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 00:37:00,242 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 00:37:00,279 [screen.py:show_popup_message()] - error: Must home axis first: 175.000 348.000 2.831 [448.491]
2024-03-28 00:37:01,766 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 00:37:01,810 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 00:37:01,824 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-28 00:37:01,832 [job_status.py:update_file_metadata()] - Update Metadata. File: prusaslicer-righthand.gcode Size: 91624
2024-03-28 00:37:01,842 [job_status.py:show_file_thumbnail()] - prusaslicer-righthand.gcode
2024-03-28 00:37:02,671 [printer.py:get_probe()] - Probe type: probe
2024-03-28 00:37:02,698 [KlippyGtk.py:Dialog()] - Showing dialog Save Z (width=800, height=480)
2024-03-28 00:37:03,217 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 00:37:03,218 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: Z_OFFSET_APPLY_PROBE
2024-03-28 00:37:03,219 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SAVE_CONFIG
2024-03-28 00:37:03,310 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-28 00:37:04,395 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-28 00:37:04,396 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-28 00:37:04,397 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-28 00:37:04,397 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 00:37:04,404 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 00:37:04,405 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 00:37:04,406 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 00:37:04,478 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 00:37:07,875 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 00:37:07,903 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 00:37:07,930 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 00:37:07,931 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 00:37:07,932 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 00:37:07,954 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 00:37:07,999 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nM400\nG92 E0\n{% if printer[printer.toolhead.extruder].target > 220 %}\nG1 E-5.0 F3600\n{% else %}\nG1 E-1.0 F3600\n{% endif %}\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nG91\nG0 Z1.00 X20.0 Y20.0 F20000\nTURN_OFF_HEATERS\nM107\nG1 Z4 F3000\nG90\nG0 X190 Y190 F3600'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-0.850'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '165', 'variable_safe_y': '165', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '25,25', 'mesh_max': '325,325', 'probe_count': '7, 7', 'mesh_pps': '2, 3', 'algorithm': 'bicubic', 'bicubic_tension': '0.2'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '58.437', 'pid_ki': '2.347', 'pid_kd': '363.769'}, 'firmware_retraction': {'retract_length': '0.8', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X165 Y165 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.424850, 0.442350, 0.434850\n0.422350, 0.434850, 0.412350\n0.394850, 0.422350, 0.387350', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '3', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '145.0', 'max_x': '205.0', 'min_y': '131.8', 'max_y': '218.18'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nM400\nG92 E0\n{% if printer[printer.toolhead.extruder].target > 220 %}\nG1 E-5.0 F3600\n{% else %}\nG1 E-1.0 F3600\n{% endif %}\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nG91\nG0 Z1.00 X20.0 Y20.0 F20000\nTURN_OFF_HEATERS\nM107\nG1 Z4 F3000\nG90\nG0 X190 Y190 F3600', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.85, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro filament_load': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '165', 'variable_safe_y': '165'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [7, 7], 'mesh_min': [25.0, 25.0], 'mesh_max': [325.0, 325.0], 'mesh_pps': [2, 3], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.42485, 0.44235, 0.43485], [0.42235, 0.43485, 0.41235], [0.39485, 0.42235, 0.38735]], 'min_x': 145.0, 'max_x': 205.0, 'min_y': 131.8, 'max_y': 218.18, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 3, 'algo': 'lagrange', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 58.437, 'pid_ki': 2.347, 'pid_kd': 363.769, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 0.8, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X165 Y165 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 00:37:08,005 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 00:37:08,006 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-28 00:37:08,007 [printer.py:reinit()] - # Extruders: 1
2024-03-28 00:37:08,007 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 00:37:08,007 [printer.py:reinit()] - # Fans: 4
2024-03-28 00:37:08,007 [printer.py:reinit()] - # Output pins: 0
2024-03-28 00:37:08,008 [printer.py:reinit()] - # Leds: 1
2024-03-28 00:37:08,008 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 00:37:08,035 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 00:37:08,038 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-28 00:37:08,353 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-28 00:37:08,354 [screen.py:init_klipper()] - Printer initialized
2024-03-28 00:37:08,355 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-28 00:37:08,355 [printer.py:change_state()] - Adding callback for state: startup
2024-03-28 00:37:09,732 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-28 00:37:09,732 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 00:37:09,735 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 00:37:09,743 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 00:37:09,744 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 00:37:09,895 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 00:37:09,911 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 00:37:09,926 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 00:37:09,936 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 00:37:09,996 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 00:37:09,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 00:37:10,041 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-28 00:37:10,044 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 00:37:10,068 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 00:48:28,187 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 00:48:28,188 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 00:48:28,208 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 00:48:28,208 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 00:48:28,408 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 00:48:28,418 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 00:48:28,435 [job_status.py:update_file_metadata()] - Update Metadata. File: AIl_In_One_3D_printer_test_micro.gcode Size: 3121931
2024-03-28 00:48:28,447 [job_status.py:show_file_thumbnail()] - AIl_In_One_3D_printer_test_micro.gcode
2024-03-28 00:48:28,966 [job_status.py:update_file_metadata()] - Update Metadata. File: AIl_In_One_3D_printer_test_micro.gcode Size: 3121931
2024-03-28 00:48:28,976 [job_status.py:show_file_thumbnail()] - AIl_In_One_3D_printer_test_micro.gcode
2024-03-28 01:04:30,921 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 01:04:31,988 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 01:04:31,990 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 01:04:31,992 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 01:04:32,002 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 01:04:34,621 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 01:04:34,622 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 01:04:34,660 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-03-28 01:06:37,621 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-28 01:06:37,623 [job_status.py:restart()] - Starting print: AIl_In_One_3D_printer_test_micro.gcode
2024-03-28 01:06:37,624 [job_status.py:new_print()] - reseting progress
2024-03-28 01:06:37,712 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 01:06:37,713 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 01:06:37,729 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 01:06:37,745 [job_status.py:update_file_metadata()] - Update Metadata. File: AIl_In_One_3D_printer_test_micro.gcode Size: 3121931
2024-03-28 01:06:37,763 [job_status.py:show_file_thumbnail()] - AIl_In_One_3D_printer_test_micro.gcode
2024-03-28 01:06:37,839 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 01:06:37,840 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 01:06:38,056 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 01:06:38,066 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 01:06:38,085 [job_status.py:update_file_metadata()] - Update Metadata. File: AIl_In_One_3D_printer_test_micro.gcode Size: 3121931
2024-03-28 01:06:38,095 [job_status.py:show_file_thumbnail()] - AIl_In_One_3D_printer_test_micro.gcode
2024-03-28 01:06:39,038 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 01:06:39,147 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 01:06:40,139 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 01:06:40,517 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 01:06:40,999 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 01:06:41,043 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 01:06:41,063 [job_status.py:update_file_metadata()] - Update Metadata. File: AIl_In_One_3D_printer_test_micro.gcode Size: 3121931
2024-03-28 01:06:41,073 [job_status.py:show_file_thumbnail()] - AIl_In_One_3D_printer_test_micro.gcode
2024-03-28 01:06:46,015 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 01:06:46,612 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 01:06:46,613 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 01:06:46,615 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 01:06:46,624 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 01:07:22,080 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-03-28 01:07:22,195 [screen.py:attach_panel()] - Current panel hierarchy: job_status > gcode_macros
2024-03-28 01:07:23,539 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 01:07:23,600 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 01:07:23,613 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'printing'
2024-03-28 01:07:23,621 [job_status.py:update_file_metadata()] - Update Metadata. File: AIl_In_One_3D_printer_test_micro.gcode Size: 3121931
2024-03-28 01:07:23,631 [job_status.py:show_file_thumbnail()] - AIl_In_One_3D_printer_test_micro.gcode
2024-03-28 01:10:04,031 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 01:10:04,031 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 01:10:04,052 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'standby'
2024-03-28 01:10:31,892 [job_status.py:close_panel()] - Closing job_status panel
2024-03-28 01:10:31,893 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 01:10:31,899 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 01:10:31,901 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 01:10:32,029 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 01:10:32,044 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 01:10:32,053 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 01:10:32,063 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 01:10:32,120 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 01:12:08,189 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 01:12:08,332 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 01:12:09,699 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-03-28 01:12:09,705 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 01:12:18,939 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 01:12:19,022 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 01:12:20,127 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 01:12:20,695 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 01:12:20,874 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-28 01:12:20,903 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-28 01:12:21,443 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-03-28 01:17:22,499 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 01:17:22,584 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 01:17:23,498 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 01:17:23,541 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 01:17:24,517 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 01:17:25,091 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 01:17:25,170 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 01:17:25,812 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 01:17:25,840 [print.py:__init__()] - Thumbsize: 114.20689655172413
2024-03-28 01:17:25,844 [print.py:__init__()] - thumbs
2024-03-28 01:17:25,855 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-03-28 01:17:25,887 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-03-28 01:17:25,962 [print.py:load_files()] - Loaded in 0.062 seconds
2024-03-28 01:17:28,421 [KlippyGtk.py:Dialog()] - Showing dialog Print AIl_In_One_3D_printer_test_micro.gcode (width=800, height=480)
2024-03-28 01:17:29,022 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 01:17:29,023 [print.py:confirm_print_response()] - Starting print: AIl_In_One_3D_printer_test_micro.gcode
2024-03-28 01:17:29,023 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-28 01:17:29,272 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 01:17:29,273 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 01:17:29,287 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 01:17:29,486 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 01:17:29,497 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 01:17:29,511 [job_status.py:update_file_metadata()] - Update Metadata. File: AIl_In_One_3D_printer_test_micro.gcode Size: 3121931
2024-03-28 01:17:29,522 [job_status.py:show_file_thumbnail()] - AIl_In_One_3D_printer_test_micro.gcode
2024-03-28 01:32:32,364 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 01:32:32,485 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 01:32:33,076 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 01:32:33,516 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-28 01:32:37,669 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-28 02:21:56,294 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 02:21:56,339 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 02:21:56,358 [job_status.py:update_file_metadata()] - Update Metadata. File: AIl_In_One_3D_printer_test_micro.gcode Size: 3121931
2024-03-28 02:21:56,368 [job_status.py:show_file_thumbnail()] - AIl_In_One_3D_printer_test_micro.gcode
2024-03-28 02:21:57,153 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 02:21:57,784 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 02:21:57,785 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 02:21:57,786 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 02:21:57,796 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 02:22:00,964 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 02:22:00,964 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 02:22:00,984 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-03-28 02:22:08,814 [job_status.py:close_panel()] - Closing job_status panel
2024-03-28 02:22:08,815 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 02:22:08,825 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 02:22:08,827 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 02:22:08,980 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 02:22:08,998 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 02:22:09,008 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 02:22:09,018 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 02:22:09,075 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 02:22:10,336 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 02:22:10,364 [print.py:__init__()] - Thumbsize: 114.20689655172413
2024-03-28 02:22:10,368 [print.py:__init__()] - thumbs
2024-03-28 02:22:10,378 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-03-28 02:22:10,410 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-03-28 02:22:10,483 [print.py:load_files()] - Loaded in 0.064 seconds
2024-03-28 02:22:24,210 [print.py:_callback()] - create_file: {'action': 'create_file', 'item': {'modified': 1711592543.4003406, 'size': 1450087, 'permissions': 'rw', 'path': 'EM_Cubes-0.910.gcode', 'root': 'gcodes'}}
2024-03-28 02:22:24,210 [print.py:delete_from_list()] - deleting EM_Cubes-0.910.gcode
2024-03-28 02:22:24,230 [print.py:_callback()] - modify_file: {'action': 'modify_file', 'item': {'modified': 1711592543.4003406, 'size': 1450087, 'permissions': 'rw', 'path': 'gcodes/EM_Cubes-0.910.gcode', 'root': 'gcodes', 'filename': 'EM_Cubes-0.910.gcode', 'uuid': '640a4cff-1835-4cd9-bea3-16ea1b8638d9', 'slicer': 'SuperSlicer', 'slicer_version': '2.5.59.8', 'gcode_start_byte': 71353, 'gcode_end_byte': 1434782, 'layer_count': 15, 'object_height': 3.0, 'estimated_time': 5932, 'nozzle_diameter': 0.4, 'layer_height': 0.2, 'first_layer_height': 0.2, 'first_layer_extr_temp': 200.0, 'first_layer_bed_temp': 60.0, 'chamber_temp': 0.0, 'filament_name': 'PLA', 'filament_type': 'PLA', 'filament_total': 7465.93, 'filament_weight_total': 0.0, 'thumbnails': [{'width': 400, 'height': 300, 'size': 42171, 'relative_path': '.thumbs/EM_Cubes-0.910-400x300.png', 'local': True, 'path': '/home/biqu/printer_data/gcodes/.thumbs/EM_Cubes-0.910-400x300.png'}, {'width': 64, 'height': 64, 'size': 4829, 'relative_path': '.thumbs/EM_Cubes-0.910-64x64.png', 'local': True, 'path': '/home/biqu/printer_data/gcodes/.thumbs/EM_Cubes-0.910-64x64.png'}, {'width': 32, 'height': 24, 'size': 2209, 'relative_path': '.thumbs/EM_Cubes-0.910-32x32.png', 'local': True, 'path': '/home/biqu/printer_data/gcodes/.thumbs/EM_Cubes-0.910-32x32.png'}], 'print_start_time': None, 'job_id': None}}
2024-03-28 02:22:24,231 [print.py:delete_from_list()] - deleting EM_Cubes-0.910.gcode
2024-03-28 02:22:24,232 [print.py:delete_from_list()] - found removing
2024-03-28 02:22:26,319 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 02:22:26,320 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 02:22:26,344 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 02:22:26,622 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 02:22:26,634 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 02:22:26,650 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes-0.910.gcode Size: 1450087
2024-03-28 02:22:26,661 [job_status.py:show_file_thumbnail()] - EM_Cubes-0.910.gcode
2024-03-28 02:27:18,884 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 02:27:18,997 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 02:27:19,845 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 02:27:20,231 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 02:28:58,169 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 02:30:07,860 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 02:30:12,340 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 02:30:12,725 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 02:30:12,783 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 02:30:12,804 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes-0.910.gcode Size: 1450087
2024-03-28 02:30:12,815 [job_status.py:show_file_thumbnail()] - EM_Cubes-0.910.gcode
2024-03-28 02:30:14,144 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 02:30:15,200 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 02:30:15,201 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 02:30:15,202 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 02:30:15,215 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 02:30:18,427 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 02:30:18,428 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 02:30:18,456 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-03-28 02:31:02,142 [job_status.py:close_panel()] - Closing job_status panel
2024-03-28 02:31:02,143 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 02:31:02,149 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 02:31:02,151 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 02:31:02,284 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 02:31:02,302 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 02:31:02,311 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 02:31:02,321 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 02:31:02,377 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 02:31:03,375 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 02:31:03,510 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 02:31:04,264 [move.py:change_distance()] - ### Distance 50
2024-03-28 02:31:04,919 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 02:31:04,925 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 02:32:42,289 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 02:32:42,371 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 02:32:43,143 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 02:32:43,171 [print.py:__init__()] - Thumbsize: 114.20689655172413
2024-03-28 02:32:43,176 [print.py:__init__()] - thumbs
2024-03-28 02:32:43,186 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-03-28 02:32:43,221 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-03-28 02:32:43,305 [print.py:load_files()] - Loaded in 0.074 seconds
2024-03-28 02:32:45,039 [KlippyGtk.py:Dialog()] - Showing dialog Print EM_Cubes-0.910.gcode (width=800, height=480)
2024-03-28 02:32:45,720 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 02:32:45,721 [print.py:confirm_print_response()] - Starting print: EM_Cubes-0.910.gcode
2024-03-28 02:32:45,721 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-28 02:32:45,857 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 02:32:45,857 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 02:32:45,871 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 02:32:46,080 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 02:32:46,090 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 02:32:46,111 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes-0.910.gcode Size: 1450087
2024-03-28 02:32:46,121 [job_status.py:show_file_thumbnail()] - EM_Cubes-0.910.gcode
2024-03-28 02:32:49,552 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 02:32:49,676 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 02:32:50,790 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-28 02:32:52,581 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 02:32:52,652 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 02:32:52,672 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes-0.910.gcode Size: 1450087
2024-03-28 02:32:52,682 [job_status.py:show_file_thumbnail()] - EM_Cubes-0.910.gcode
2024-03-28 02:42:31,256 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 02:42:32,078 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 02:42:32,455 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 02:42:42,747 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 02:42:42,821 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 02:42:42,849 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes-0.910.gcode Size: 1450087
2024-03-28 02:42:42,866 [job_status.py:show_file_thumbnail()] - EM_Cubes-0.910.gcode
2024-03-28 02:42:43,963 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 02:42:45,109 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 02:42:45,110 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 02:42:45,111 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 02:42:45,124 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 02:42:47,907 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 02:42:47,908 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 02:42:47,942 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-03-28 02:42:52,451 [job_status.py:close_panel()] - Closing job_status panel
2024-03-28 02:42:52,452 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 02:42:52,463 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 02:42:52,465 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 02:42:52,650 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 02:42:52,667 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 02:42:52,676 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 02:42:52,687 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 02:42:52,745 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 02:42:52,912 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 02:42:52,940 [print.py:__init__()] - Thumbsize: 114.20689655172413
2024-03-28 02:42:52,944 [print.py:__init__()] - thumbs
2024-03-28 02:42:52,954 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-03-28 02:42:52,988 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-03-28 02:42:52,998 [print.py:_callback()] - modify_file: {'action': 'modify_file', 'item': {'path': '100x100-single-layer.gcode', 'modified': 1706487742.4383898, 'size': 62982, 'permissions': 'rw', 'uuid': 'dbb87e2d-2bea-4f42-b68d-4d19e15b7d27', 'slicer': 'PrusaSlicer', 'slicer_version': '2.7.1+win64', 'gcode_start_byte': 36417, 'gcode_end_byte': 52872, 'object_height': 0.2, 'estimated_time': 649, 'nozzle_diameter': 0.4, 'layer_height': 0.2, 'first_layer_height': 0.2, 'first_layer_extr_temp': 200.0, 'first_layer_bed_temp': 50.0, 'filament_name': 'Polymaker PLA', 'filament_type': 'PLA', 'filament_total': 789.23, 'filament_weight_total': 2.35, 'thumbnails': [{'width': 400, 'height': 300, 'size': 21858, 'relative_path': '.thumbs/100x100-single-layer-400x300.png', 'local': True, 'path': '/home/biqu/printer_data/gcodes/.thumbs/100x100-single-layer-400x300.png'}, {'width': 64, 'height': 64, 'size': 4046, 'relative_path': '.thumbs/100x100-single-layer-64x64.png', 'local': True, 'path': '/home/biqu/printer_data/gcodes/.thumbs/100x100-single-layer-64x64.png'}, {'width': 32, 'height': 24, 'size': 1719, 'relative_path': '.thumbs/100x100-single-layer-32x32.png', 'local': True, 'path': '/home/biqu/printer_data/gcodes/.thumbs/100x100-single-layer-32x32.png'}], 'print_start_time': 1711492231.280089, 'job_id': '000012', 'filename': '100x100-single-layer.gcode'}}
2024-03-28 02:42:52,998 [print.py:delete_from_list()] - deleting 100x100-single-layer.gcode
2024-03-28 02:42:53,014 [print.py:_callback()] - modify_file: {'action': 'modify_file', 'item': {'path': 'AIl_In_One_3D_printer_test_micro.gcode', 'modified': 1711586906.8879719, 'size': 3121931, 'permissions': 'rw', 'uuid': '71d49163-550b-49bb-a78b-db2ec015d76f', 'slicer': 'PrusaSlicer', 'slicer_version': '2.7.2+win64', 'gcode_start_byte': 79509, 'gcode_end_byte': 3112042, 'object_height': 56.2, 'estimated_time': 5242, 'nozzle_diameter': 0.4, 'layer_height': 0.2, 'first_layer_height': 0.2, 'first_layer_extr_temp': 215.0, 'first_layer_bed_temp': 55.0, 'filament_name': 'Basic PLA @VORON', 'filament_type': 'PLA', 'filament_total': 3900.86, 'filament_weight_total': 11.63, 'thumbnails': [{'width': 400, 'height': 300, 'size': 51651, 'relative_path': '.thumbs/AIl_In_One_3D_printer_test_micro-400x300.png', 'local': True, 'path': '/home/biqu/printer_data/gcodes/.thumbs/AIl_In_One_3D_printer_test_micro-400x300.png'}, {'width': 64, 'height': 64, 'size': 5335, 'relative_path': '.thumbs/AIl_In_One_3D_printer_test_micro-64x64.png', 'local': True, 'path': '/home/biqu/printer_data/gcodes/.thumbs/AIl_In_One_3D_printer_test_micro-64x64.png'}, {'width': 32, 'height': 24, 'size': 2289, 'relative_path': '.thumbs/AIl_In_One_3D_printer_test_micro-32x32.png', 'local': True, 'path': '/home/biqu/printer_data/gcodes/.thumbs/AIl_In_One_3D_printer_test_micro-32x32.png'}], 'print_start_time': 1711588649.2715714, 'job_id': '000027', 'filename': 'AIl_In_One_3D_printer_test_micro.gcode'}}
2024-03-28 02:42:53,014 [print.py:delete_from_list()] - deleting AIl_In_One_3D_printer_test_micro.gcode
2024-03-28 02:42:53,030 [print.py:_callback()] - modify_file: {'action': 'modify_file', 'item': {'path': 'EM_Cubes-0.910.gcode', 'modified': 1711592543.4003406, 'size': 1450087, 'permissions': 'rw', 'uuid': '640a4cff-1835-4cd9-bea3-16ea1b8638d9', 'slicer': 'SuperSlicer', 'slicer_version': '2.5.59.8', 'gcode_start_byte': 71353, 'gcode_end_byte': 1434782, 'layer_count': 15, 'object_height': 3.0, 'estimated_time': 5932, 'nozzle_diameter': 0.4, 'layer_height': 0.2, 'first_layer_height': 0.2, 'first_layer_extr_temp': 200.0, 'first_layer_bed_temp': 60.0, 'chamber_temp': 0.0, 'filament_name': 'PLA', 'filament_type': 'PLA', 'filament_total': 7465.93, 'filament_weight_total': 0.0, 'thumbnails': [{'width': 400, 'height': 300, 'size': 42171, 'relative_path': '.thumbs/EM_Cubes-0.910-400x300.png', 'local': True, 'path': '/home/biqu/printer_data/gcodes/.thumbs/EM_Cubes-0.910-400x300.png'}, {'width': 64, 'height': 64, 'size': 4829, 'relative_path': '.thumbs/EM_Cubes-0.910-64x64.png', 'local': True, 'path': '/home/biqu/printer_data/gcodes/.thumbs/EM_Cubes-0.910-64x64.png'}, {'width': 32, 'height': 24, 'size': 2209, 'relative_path': '.thumbs/EM_Cubes-0.910-32x32.png', 'local': True, 'path': '/home/biqu/printer_data/gcodes/.thumbs/EM_Cubes-0.910-32x32.png'}], 'print_start_time': 1711593165.8520837, 'job_id': '000029', 'filename': 'EM_Cubes-0.910.gcode'}}
2024-03-28 02:42:53,031 [print.py:delete_from_list()] - deleting EM_Cubes-0.910.gcode
2024-03-28 02:42:53,047 [print.py:_callback()] - modify_file: {'action': 'modify_file', 'item': {'path': 'pa_pattern.gcode', 'modified': 1711515471.7150502, 'size': 86630, 'permissions': 'rw', 'uuid': '00805316-3008-4562-a2f1-0b550a23666d', 'slicer': 'Unknown', 'gcode_start_byte': 1964, 'gcode_end_byte': 86550, 'object_height': 0.9, 'first_layer_height': 0.2, 'first_layer_extr_temp': 200.0, 'first_layer_bed_temp': 60.0, 'print_start_time': 1711516340.2800283, 'job_id': '00001F', 'filename': 'pa_pattern.gcode'}}
2024-03-28 02:42:53,048 [print.py:delete_from_list()] - deleting pa_pattern.gcode
2024-03-28 02:42:53,060 [print.py:_callback()] - modify_file: {'action': 'modify_file', 'item': {'path': 'prusaslicer-righthand.gcode', 'modified': 1711584646.778662, 'size': 91624, 'permissions': 'rw', 'uuid': '62ac3088-6d82-4521-8a79-e191c6b5d67b', 'slicer': 'PrusaSlicer', 'slicer_version': '2.7.2+win64', 'gcode_start_byte': 48684, 'gcode_end_byte': 81542, 'object_height': 0.4, 'estimated_time': 429, 'nozzle_diameter': 0.4, 'layer_height': 0.05, 'first_layer_height': 0.2, 'first_layer_extr_temp': 215.0, 'first_layer_bed_temp': 55.0, 'filament_name': 'Basic PLA @VORON', 'filament_type': 'PLA', 'filament_total': 424.29, 'filament_weight_total': 1.27, 'thumbnails': [{'width': 400, 'height': 300, 'size': 30788, 'relative_path': '.thumbs/prusaslicer-righthand-400x300.png', 'local': True, 'path': '/home/biqu/printer_data/gcodes/.thumbs/prusaslicer-righthand-400x300.png'}, {'width': 64, 'height': 64, 'size': 3454, 'relative_path': '.thumbs/prusaslicer-righthand-64x64.png', 'local': True, 'path': '/home/biqu/printer_data/gcodes/.thumbs/prusaslicer-righthand-64x64.png'}, {'width': 32, 'height': 24, 'size': 1755, 'relative_path': '.thumbs/prusaslicer-righthand-32x32.png', 'local': True, 'path': '/home/biqu/printer_data/gcodes/.thumbs/prusaslicer-righthand-32x32.png'}], 'print_start_time': 1711584669.228933, 'job_id': '000024', 'filename': 'prusaslicer-righthand.gcode'}}
2024-03-28 02:42:53,060 [print.py:delete_from_list()] - deleting prusaslicer-righthand.gcode
2024-03-28 02:42:53,076 [print.py:_callback()] - modify_file: {'action': 'modify_file', 'item': {'path': 'xyzCalibration_cube.gcode', 'modified': 1711495254.6510203, 'size': 555419, 'permissions': 'rw', 'uuid': '0ae1898b-46fe-459d-9273-df95245bbb98', 'slicer': 'PrusaSlicer', 'slicer_version': '2.7.2+win64', 'gcode_start_byte': 32325, 'gcode_end_byte': 545283, 'object_height': 20.0, 'estimated_time': 2100, 'nozzle_diameter': 0.4, 'layer_height': 0.2, 'first_layer_height': 0.2, 'first_layer_extr_temp': 215.0, 'first_layer_bed_temp': 55.0, 'filament_name': 'Basic PLA @VORON', 'filament_type': 'PLA', 'filament_total': 1480.58, 'filament_weight_total': 4.42, 'thumbnails': [{'width': 400, 'height': 300, 'size': 20481, 'relative_path': '.thumbs/xyzCalibration_cube-400x300.png', 'local': True, 'path': '/home/biqu/printer_data/gcodes/.thumbs/xyzCalibration_cube-400x300.png'}, {'width': 64, 'height': 64, 'size': 2352, 'relative_path': '.thumbs/xyzCalibration_cube-64x64.png', 'local': True, 'path': '/home/biqu/printer_data/gcodes/.thumbs/xyzCalibration_cube-64x64.png'}, {'width': 32, 'height': 24, 'size': 1599, 'relative_path': '.thumbs/xyzCalibration_cube-32x32.png', 'local': True, 'path': '/home/biqu/printer_data/gcodes/.thumbs/xyzCalibration_cube-32x32.png'}], 'print_start_time': 1711510563.2011788, 'job_id': '00001B', 'filename': 'xyzCalibration_cube.gcode'}}
2024-03-28 02:42:53,076 [print.py:delete_from_list()] - deleting xyzCalibration_cube.gcode
2024-03-28 02:42:53,169 [print.py:load_files()] - Loaded in 0.078 seconds
2024-03-28 02:42:54,174 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 02:42:54,216 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 02:42:55,285 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 02:42:55,421 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 02:42:56,700 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 02:42:56,709 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 02:42:57,979 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 02:42:57,984 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 02:44:41,819 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 02:44:41,899 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 02:44:42,751 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-03-28 02:44:53,611 [print.py:switch_view_mode()] - lista True
2024-03-28 02:44:53,616 [print.py:_refresh_files()] - Refreshing
2024-03-28 02:44:53,631 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-03-28 02:44:53,844 [print.py:load_files()] - Loaded in 0.167 seconds
2024-03-28 02:44:57,481 [KlippyGtk.py:Dialog()] - Showing dialog Print EM_Cubes-0.910.gcode (width=800, height=480)
2024-03-28 02:44:58,255 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 02:44:58,255 [print.py:confirm_print_response()] - Starting print: EM_Cubes-0.910.gcode
2024-03-28 02:44:58,256 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-28 02:44:58,293 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 02:44:58,293 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 02:44:58,312 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 02:44:58,521 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 02:44:58,541 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 02:44:58,563 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes-0.910.gcode Size: 1450087
2024-03-28 02:44:58,573 [job_status.py:show_file_thumbnail()] - EM_Cubes-0.910.gcode
2024-03-28 02:45:00,381 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 02:45:00,494 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 02:45:01,699 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 02:45:02,073 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 02:54:51,685 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 02:59:58,107 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 03:00:09,265 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 03:00:09,314 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 03:00:09,334 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes-0.910.gcode Size: 1450087
2024-03-28 03:00:09,344 [job_status.py:show_file_thumbnail()] - EM_Cubes-0.910.gcode
2024-03-28 03:00:10,824 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 03:00:11,526 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 03:00:11,529 [screen.py:_load_panel()] - Loading panel: exclude
2024-03-28 03:00:11,562 [exclude.py:__init__()] - Excluded: []
2024-03-28 03:00:11,563 [exclude.py:__init__()] - Adding EM_CUBE_0_910_STL_ID_0_COPY_0
2024-03-28 03:00:11,566 [exclude.py:__init__()] - Adding EM_CUBE_0_920_STL_ID_1_COPY_0
2024-03-28 03:00:11,569 [exclude.py:__init__()] - Adding EM_CUBE_0_930_STL_ID_2_COPY_0
2024-03-28 03:00:11,572 [exclude.py:__init__()] - Adding EM_CUBE_0_940_STL_ID_3_COPY_0
2024-03-28 03:00:11,575 [exclude.py:__init__()] - Adding EM_CUBE_0_950_STL_ID_4_COPY_0
2024-03-28 03:00:11,577 [exclude.py:__init__()] - Adding EM_CUBE_0_960_STL_ID_5_COPY_0
2024-03-28 03:00:11,580 [exclude.py:__init__()] - Adding EM_CUBE_0_970_STL_ID_6_COPY_0
2024-03-28 03:00:11,583 [exclude.py:__init__()] - Adding EM_CUBE_0_980_STL_ID_7_COPY_0
2024-03-28 03:00:11,586 [exclude.py:__init__()] - Adding EM_CUBE_0_990_STL_ID_8_COPY_0
2024-03-28 03:00:11,589 [exclude.py:__init__()] - Adding EM_CUBE_1_000_STL_ID_9_COPY_0
2024-03-28 03:00:11,636 [screen.py:attach_panel()] - Current panel hierarchy: job_status > exclude
2024-03-28 03:00:11,639 [exclude.py:process_update()] - Excluded objects: []
2024-03-28 03:00:13,203 [objectmap.py:event_cb()] - Touched GRAPH 130,75 BED: 149,207
2024-03-28 03:00:13,204 [objectmap.py:event_cb()] - TOUCHED object it's: EM_CUBE_0_990_STL_ID_8_COPY_0
2024-03-28 03:00:13,213 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffb07bce40 (GtkDialog at 0x9d77c20)>
2024-03-28 03:00:13,269 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-28 03:00:14,060 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 03:00:14,061 [screen.py:_send_action()] - printer.gcode.script: {'script': 'EXCLUDE_OBJECT NAME=EM_CUBE_0_990_STL_ID_8_COPY_0'}
2024-03-28 03:00:14,166 [screen.py:show_popup_message()] - echo: // Excluding object EM_CUBE_0_990_STL_ID_8_COPY_0
2024-03-28 03:00:14,255 [exclude.py:process_update()] - Excluded objects: ['EM_CUBE_0_990_STL_ID_8_COPY_0']
2024-03-28 03:00:28,145 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 03:00:28,189 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 03:00:28,209 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes-0.910.gcode Size: 1450087
2024-03-28 03:00:28,218 [job_status.py:show_file_thumbnail()] - EM_Cubes-0.910.gcode
2024-03-28 03:00:29,061 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 03:00:29,747 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 03:00:35,801 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 03:00:35,855 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 03:00:35,875 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes-0.910.gcode Size: 1450087
2024-03-28 03:00:35,885 [job_status.py:show_file_thumbnail()] - EM_Cubes-0.910.gcode
2024-03-28 03:00:36,899 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 03:00:37,898 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 03:00:37,977 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 03:00:37,997 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes-0.910.gcode Size: 1450087
2024-03-28 03:00:38,007 [job_status.py:show_file_thumbnail()] - EM_Cubes-0.910.gcode
2024-03-28 03:00:39,001 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 03:00:39,700 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 03:00:39,744 [screen.py:attach_panel()] - Current panel hierarchy: job_status > exclude
2024-03-28 03:00:39,749 [exclude.py:process_update()] - Excluded objects: ['EM_CUBE_0_990_STL_ID_8_COPY_0']
2024-03-28 03:00:40,443 [objectmap.py:event_cb()] - Touched GRAPH 61,190 BED: 118,173
2024-03-28 03:00:40,444 [objectmap.py:event_cb()] - TOUCHED object it's: EM_CUBE_1_000_STL_ID_9_COPY_0
2024-03-28 03:00:40,453 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffb0612b00 (GtkDialog at 0xa0179b0)>
2024-03-28 03:00:40,505 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-28 03:00:41,180 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 03:00:41,181 [screen.py:_send_action()] - printer.gcode.script: {'script': 'EXCLUDE_OBJECT NAME=EM_CUBE_1_000_STL_ID_9_COPY_0'}
2024-03-28 03:00:41,434 [screen.py:show_popup_message()] - echo: // Excluding object EM_CUBE_1_000_STL_ID_9_COPY_0
2024-03-28 03:00:41,644 [exclude.py:process_update()] - Excluded objects: ['EM_CUBE_0_990_STL_ID_8_COPY_0', 'EM_CUBE_1_000_STL_ID_9_COPY_0']
2024-03-28 03:00:43,140 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 03:00:43,183 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 03:00:43,203 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes-0.910.gcode Size: 1450087
2024-03-28 03:00:43,212 [job_status.py:show_file_thumbnail()] - EM_Cubes-0.910.gcode
2024-03-28 04:00:43,874 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-28 04:08:08,363 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 04:08:08,364 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 04:08:08,376 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-28 04:08:08,405 [screen.py:wake_screen()] - Screen wake up
2024-03-28 04:08:08,459 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-28 04:21:39,792 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'standby'
2024-03-28 04:21:49,366 [job_status.py:close_panel()] - Closing job_status panel
2024-03-28 04:21:49,367 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 04:21:49,373 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 04:21:49,375 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 04:21:49,496 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 04:21:49,511 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 04:21:49,520 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 04:21:49,531 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 04:21:49,591 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 04:22:12,933 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 04:22:12,934 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 04:22:12,955 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 04:22:12,955 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 04:22:13,194 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 04:22:13,206 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 04:22:13,225 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes.gcode Size: 1824040
2024-03-28 04:22:13,236 [job_status.py:show_file_thumbnail()] - EM_Cubes.gcode
2024-03-28 04:32:55,165 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 04:32:55,279 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 04:32:56,931 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 04:32:57,661 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-28 04:32:58,779 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 04:32:58,822 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 04:32:58,842 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes.gcode Size: 1824040
2024-03-28 04:32:58,852 [job_status.py:show_file_thumbnail()] - EM_Cubes.gcode
2024-03-28 04:33:30,811 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 04:33:31,557 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 04:34:25,302 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 04:34:39,238 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 04:35:02,179 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 04:35:02,222 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 04:35:02,242 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes.gcode Size: 1824040
2024-03-28 04:35:02,252 [job_status.py:show_file_thumbnail()] - EM_Cubes.gcode
2024-03-28 04:35:04,908 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 04:35:05,758 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 04:35:05,762 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 04:35:05,776 [exclude.py:__init__()] - Excluded: []
2024-03-28 04:35:05,777 [exclude.py:__init__()] - Adding EM_CUBE_0_900_STL_ID_0_COPY_0
2024-03-28 04:35:05,780 [exclude.py:__init__()] - Adding EM_CUBE_0_910_STL_ID_1_COPY_0
2024-03-28 04:35:05,783 [exclude.py:__init__()] - Adding EM_CUBE_0_920_STL_ID_2_COPY_0
2024-03-28 04:35:05,786 [exclude.py:__init__()] - Adding EM_CUBE_0_930_STL_ID_3_COPY_0
2024-03-28 04:35:05,788 [exclude.py:__init__()] - Adding EM_CUBE_0_940_STL_ID_4_COPY_0
2024-03-28 04:35:05,791 [exclude.py:__init__()] - Adding EM_CUBE_0_950_STL_ID_5_COPY_0
2024-03-28 04:35:05,794 [exclude.py:__init__()] - Adding EM_CUBE_0_960_STL_ID_6_COPY_0
2024-03-28 04:35:05,797 [exclude.py:__init__()] - Adding EM_CUBE_0_970_STL_ID_7_COPY_0
2024-03-28 04:35:05,799 [exclude.py:__init__()] - Adding EM_CUBE_0_980_STL_ID_8_COPY_0
2024-03-28 04:35:05,802 [exclude.py:__init__()] - Adding EM_CUBE_0_990_STL_ID_9_COPY_0
2024-03-28 04:35:05,805 [exclude.py:__init__()] - Adding EM_CUBE_1_000_STL_ID_10_COPY_0
2024-03-28 04:35:05,851 [screen.py:attach_panel()] - Current panel hierarchy: job_status > exclude
2024-03-28 04:35:05,854 [exclude.py:process_update()] - Excluded objects: []
2024-03-28 04:35:07,076 [objectmap.py:event_cb()] - Touched GRAPH 50,45 BED: 130,230
2024-03-28 04:35:07,078 [objectmap.py:event_cb()] - TOUCHED object it's: EM_CUBE_1_000_STL_ID_10_COPY_0
2024-03-28 04:35:07,087 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffb194a2c0 (GtkDialog at 0x9c7d970)>
2024-03-28 04:35:07,157 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-28 04:35:07,950 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 04:35:07,950 [screen.py:_send_action()] - printer.gcode.script: {'script': 'EXCLUDE_OBJECT NAME=EM_CUBE_1_000_STL_ID_10_COPY_0'}
2024-03-28 04:35:08,576 [screen.py:show_popup_message()] - echo: // Excluding object EM_CUBE_1_000_STL_ID_10_COPY_0
2024-03-28 04:35:08,693 [exclude.py:process_update()] - Excluded objects: ['EM_CUBE_1_000_STL_ID_10_COPY_0']
2024-03-28 04:35:30,619 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 04:35:30,687 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 04:35:30,716 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes.gcode Size: 1824040
2024-03-28 04:35:30,737 [job_status.py:show_file_thumbnail()] - EM_Cubes.gcode
2024-03-28 04:35:31,619 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 04:35:32,781 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 04:35:33,429 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 04:35:34,215 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 04:35:48,722 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 04:35:49,244 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 04:35:50,603 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 04:35:50,647 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 04:35:50,667 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes.gcode Size: 1824040
2024-03-28 04:35:50,677 [job_status.py:show_file_thumbnail()] - EM_Cubes.gcode
2024-03-28 04:35:51,321 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 04:35:52,092 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 04:35:52,135 [screen.py:attach_panel()] - Current panel hierarchy: job_status > exclude
2024-03-28 04:35:52,138 [exclude.py:process_update()] - Excluded objects: ['EM_CUBE_1_000_STL_ID_10_COPY_0']
2024-03-28 04:35:52,932 [objectmap.py:event_cb()] - Touched GRAPH 87,140 BED: 142,192
2024-03-28 04:35:52,934 [objectmap.py:event_cb()] - TOUCHED object it's: EM_CUBE_0_980_STL_ID_8_COPY_0
2024-03-28 04:35:52,942 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffb19bd940 (GtkDialog at 0xa015130)>
2024-03-28 04:35:52,994 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-28 04:35:53,694 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 04:35:53,695 [screen.py:_send_action()] - printer.gcode.script: {'script': 'EXCLUDE_OBJECT NAME=EM_CUBE_0_980_STL_ID_8_COPY_0'}
2024-03-28 04:35:53,825 [screen.py:show_popup_message()] - echo: // Excluding object EM_CUBE_0_980_STL_ID_8_COPY_0
2024-03-28 04:35:54,052 [exclude.py:process_update()] - Excluded objects: ['EM_CUBE_0_980_STL_ID_8_COPY_0', 'EM_CUBE_1_000_STL_ID_10_COPY_0']
2024-03-28 04:36:04,613 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 04:36:04,657 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 04:36:04,677 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes.gcode Size: 1824040
2024-03-28 04:36:04,687 [job_status.py:show_file_thumbnail()] - EM_Cubes.gcode
2024-03-28 04:36:06,200 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 04:36:06,893 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 04:36:07,357 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 04:41:13,652 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-28 04:41:20,204 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-28 04:41:20,591 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 04:41:21,291 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 04:41:21,573 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 04:45:52,027 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 04:45:52,102 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 04:45:52,132 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes.gcode Size: 1824040
2024-03-28 04:45:52,150 [job_status.py:show_file_thumbnail()] - EM_Cubes.gcode
2024-03-28 04:45:52,970 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 04:45:53,429 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 04:45:53,466 [screen.py:attach_panel()] - Current panel hierarchy: job_status > exclude
2024-03-28 04:45:53,470 [exclude.py:process_update()] - Excluded objects: ['EM_CUBE_0_980_STL_ID_8_COPY_0', 'EM_CUBE_1_000_STL_ID_10_COPY_0']
2024-03-28 04:45:54,083 [objectmap.py:event_cb()] - Touched GRAPH 201,322 BED: 179,119
2024-03-28 04:45:54,084 [objectmap.py:event_cb()] - TOUCHED object it's: EM_CUBE_0_940_STL_ID_4_COPY_0
2024-03-28 04:45:54,088 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffb05de2c0 (GtkDialog at 0x97bbbe0)>
2024-03-28 04:45:54,117 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-28 04:45:54,805 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 04:45:54,806 [screen.py:_send_action()] - printer.gcode.script: {'script': 'EXCLUDE_OBJECT NAME=EM_CUBE_0_940_STL_ID_4_COPY_0'}
2024-03-28 04:45:54,861 [screen.py:show_popup_message()] - echo: // Excluding object EM_CUBE_0_940_STL_ID_4_COPY_0
2024-03-28 04:45:54,969 [exclude.py:process_update()] - Excluded objects: ['EM_CUBE_0_940_STL_ID_4_COPY_0', 'EM_CUBE_0_980_STL_ID_8_COPY_0', 'EM_CUBE_1_000_STL_ID_10_COPY_0']
2024-03-28 04:46:44,290 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 04:46:44,340 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 04:46:44,365 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes.gcode Size: 1824040
2024-03-28 04:46:44,374 [job_status.py:show_file_thumbnail()] - EM_Cubes.gcode
2024-03-28 04:48:51,213 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 04:48:51,893 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 04:48:51,933 [screen.py:attach_panel()] - Current panel hierarchy: job_status > exclude
2024-03-28 04:48:51,936 [exclude.py:process_update()] - Excluded objects: ['EM_CUBE_0_940_STL_ID_4_COPY_0', 'EM_CUBE_0_980_STL_ID_8_COPY_0', 'EM_CUBE_1_000_STL_ID_10_COPY_0']
2024-03-28 04:48:52,491 [objectmap.py:event_cb()] - Touched GRAPH 211,38 BED: 183,233
2024-03-28 04:48:52,492 [objectmap.py:event_cb()] - TOUCHED object it's: EM_CUBE_0_990_STL_ID_9_COPY_0
2024-03-28 04:48:52,496 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffb04f7840 (GtkDialog at 0x9af7f40)>
2024-03-28 04:48:52,526 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-28 04:48:53,270 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 04:48:53,270 [screen.py:_send_action()] - printer.gcode.script: {'script': 'EXCLUDE_OBJECT NAME=EM_CUBE_0_990_STL_ID_9_COPY_0'}
2024-03-28 04:48:53,804 [screen.py:show_popup_message()] - echo: // Excluding object EM_CUBE_0_990_STL_ID_9_COPY_0
2024-03-28 04:48:53,866 [exclude.py:process_update()] - Excluded objects: ['EM_CUBE_0_940_STL_ID_4_COPY_0', 'EM_CUBE_0_980_STL_ID_8_COPY_0', 'EM_CUBE_0_990_STL_ID_9_COPY_0', 'EM_CUBE_1_000_STL_ID_10_COPY_0']
2024-03-28 04:50:12,691 [objectmap.py:event_cb()] - Touched GRAPH 297,233 BED: 211,154
2024-03-28 04:50:12,692 [objectmap.py:event_cb()] - TOUCHED object it's: EM_CUBE_0_930_STL_ID_3_COPY_0
2024-03-28 04:50:12,696 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffb04f7d00 (GtkDialog at 0xa0bc8d0)>
2024-03-28 04:50:12,730 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-28 04:50:13,856 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 04:50:15,323 [objectmap.py:event_cb()] - Touched GRAPH 300,333 BED: 212,114
2024-03-28 04:50:15,324 [objectmap.py:event_cb()] - TOUCHED object it's: EM_CUBE_0_950_STL_ID_5_COPY_0
2024-03-28 04:50:15,328 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffb04e3ec0 (GtkDialog at 0x97b6b80)>
2024-03-28 04:50:15,357 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-28 04:50:16,346 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 04:50:16,347 [screen.py:_send_action()] - printer.gcode.script: {'script': 'EXCLUDE_OBJECT NAME=EM_CUBE_0_950_STL_ID_5_COPY_0'}
2024-03-28 04:50:16,507 [screen.py:show_popup_message()] - echo: // Excluding object EM_CUBE_0_950_STL_ID_5_COPY_0
2024-03-28 04:50:16,719 [exclude.py:process_update()] - Excluded objects: ['EM_CUBE_0_940_STL_ID_4_COPY_0', 'EM_CUBE_0_950_STL_ID_5_COPY_0', 'EM_CUBE_0_980_STL_ID_8_COPY_0', 'EM_CUBE_0_990_STL_ID_9_COPY_0', 'EM_CUBE_1_000_STL_ID_10_COPY_0']
2024-03-28 04:51:27,386 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 04:51:27,429 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 04:51:27,449 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes.gcode Size: 1824040
2024-03-28 04:51:27,459 [job_status.py:show_file_thumbnail()] - EM_Cubes.gcode
2024-03-28 04:51:28,313 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 04:51:29,389 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 04:51:29,390 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 04:51:29,394 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 04:51:29,401 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 04:51:32,800 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 04:51:32,801 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 04:51:32,821 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-03-28 04:53:09,839 [job_status.py:close_panel()] - Closing job_status panel
2024-03-28 04:53:09,839 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 04:53:09,851 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 04:53:09,853 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 04:53:09,980 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 04:53:09,995 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 04:53:10,005 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 04:53:10,015 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 04:53:10,071 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 04:53:11,262 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 04:53:11,394 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 04:53:12,714 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 04:53:12,720 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 04:53:13,594 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 04:53:13,599 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 05:07:43,594 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 05:07:43,675 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 05:07:44,713 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-03-28 05:07:44,714 [screen.py:_go_to_submenu()] - #### Menu __main
2024-03-28 05:07:44,722 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 05:07:45,122 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-03-28 05:07:45,134 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-03-28 05:07:45,169 [menu.py:arrangeMenuItems()] - X > more pins
2024-03-28 05:07:45,174 [menu.py:arrangeMenuItems()] - X > more power
2024-03-28 05:07:45,182 [menu.py:arrangeMenuItems()] - X > more camera
2024-03-28 05:07:45,193 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-03-28 05:07:45,208 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-03-28 05:07:46,429 [screen.py:_load_panel()] - Loading panel: zcalibrate
2024-03-28 05:07:46,440 [printer.py:get_probe()] - Probe type: probe
2024-03-28 05:07:46,440 [zcalibrate.py:__init__()] - Offset X:0.0 Y:0.0 Z:-0.85
2024-03-28 05:07:46,483 [zcalibrate.py:set_functions()] - Mesh: {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '25,25', 'mesh_max': '325,325', 'probe_count': '7, 7', 'mesh_pps': '2, 3', 'algorithm': 'bicubic', 'bicubic_tension': '0.2'}
2024-03-28 05:07:46,485 [zcalibrate.py:set_functions()] - Available functions for calibration: ['probe']
2024-03-28 05:07:46,528 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > zcalibrate
2024-03-28 05:07:47,435 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G28
2024-03-28 05:07:47,436 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_GCODE_OFFSET Z=0
2024-03-28 05:07:47,438 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: BED_MESH_CLEAR
2024-03-28 05:07:47,439 [zcalibrate.py:_calculate_position()] - Probe in the mesh center X:175.0 Y:175.0
2024-03-28 05:07:47,440 [zcalibrate.py:_move_to_position()] - Lifting Z: 1.0mm 7.5mm/s
2024-03-28 05:07:47,441 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G91
G0 Z1.0 F450.0
2024-03-28 05:07:47,443 [zcalibrate.py:_move_to_position()] - Moving to X:175.0 Y:175.0
2024-03-28 05:07:47,443 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
G0 X175.0 Y175.0 F3000
2024-03-28 05:07:47,445 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: PROBE_CALIBRATE
2024-03-28 05:08:44,169 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-1
2024-03-28 05:08:44,993 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-1
2024-03-28 05:08:45,649 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-1
2024-03-28 05:08:46,337 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-1
2024-03-28 05:08:47,049 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-1
2024-03-28 05:08:48,593 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+1
2024-03-28 05:08:50,124 [zcalibrate.py:change_distance()] - ### Distance .1
2024-03-28 05:08:50,601 [zcalibrate.py:change_distance()] - ### Distance .01
2024-03-28 05:08:51,129 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+.01
2024-03-28 05:08:52,842 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+.01
2024-03-28 05:08:54,121 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+.01
2024-03-28 05:08:55,498 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+.01
2024-03-28 05:08:59,137 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+.01
2024-03-28 05:09:02,129 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-.01
2024-03-28 05:09:08,433 [zcalibrate.py:accept()] - Accepting Z position
2024-03-28 05:09:08,434 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: ACCEPT
2024-03-28 05:09:08,467 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffb19597c0 (GtkDialog at 0xa0a8630)>
2024-03-28 05:09:08,514 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-28 05:09:09,244 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 05:09:09,245 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SAVE_CONFIG'}
2024-03-28 05:09:10,410 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-28 05:09:10,411 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-28 05:09:10,412 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-28 05:09:10,413 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 05:09:10,417 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 05:09:10,418 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 05:09:10,491 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 05:09:13,873 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 05:09:13,894 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 05:09:13,911 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 05:09:13,912 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 05:09:13,912 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 05:09:13,933 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 05:09:13,974 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nM400\nG92 E0\n{% if printer[printer.toolhead.extruder].target > 220 %}\nG1 E-5.0 F3600\n{% else %}\nG1 E-1.0 F3600\n{% endif %}\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nG91\nG0 Z1.00 X20.0 Y20.0 F20000\nTURN_OFF_HEATERS\nM107\nG1 Z4 F3000\nG90\nG0 X190 Y190 F3600'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-1.040'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '165', 'variable_safe_y': '165', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '25,25', 'mesh_max': '325,325', 'probe_count': '7, 7', 'mesh_pps': '2, 3', 'algorithm': 'bicubic', 'bicubic_tension': '0.2'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '58.437', 'pid_ki': '2.347', 'pid_kd': '363.769'}, 'firmware_retraction': {'retract_length': '0.8', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X165 Y165 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.632500, -0.677500, -0.687500, -0.677500\n-0.675000, -0.660000, -0.655000, -0.680000\n-0.697500, -0.695000, -0.705000, -0.705000\n-0.697500, -0.695000, -0.695000, -0.690000', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '3', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '124.0', 'max_x': '226.0', 'min_y': '106.0', 'max_y': '244.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nM400\nG92 E0\n{% if printer[printer.toolhead.extruder].target > 220 %}\nG1 E-5.0 F3600\n{% else %}\nG1 E-1.0 F3600\n{% endif %}\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nG91\nG0 Z1.00 X20.0 Y20.0 F20000\nTURN_OFF_HEATERS\nM107\nG1 Z4 F3000\nG90\nG0 X190 Y190 F3600', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -1.04, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro filament_load': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '165', 'variable_safe_y': '165'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [7, 7], 'mesh_min': [25.0, 25.0], 'mesh_max': [325.0, 325.0], 'mesh_pps': [2, 3], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.6325, -0.6775, -0.6875, -0.6775], [-0.675, -0.66, -0.655, -0.68], [-0.6975, -0.695, -0.705, -0.705], [-0.6975, -0.695, -0.695, -0.69]], 'min_x': 124.0, 'max_x': 226.0, 'min_y': 106.0, 'max_y': 244.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 3, 'algo': 'lagrange', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 58.437, 'pid_ki': 2.347, 'pid_kd': 363.769, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 0.8, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X165 Y165 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 05:09:13,979 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 05:09:13,981 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-28 05:09:13,982 [printer.py:reinit()] - # Extruders: 1
2024-03-28 05:09:13,982 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 05:09:13,982 [printer.py:reinit()] - # Fans: 4
2024-03-28 05:09:13,983 [printer.py:reinit()] - # Output pins: 0
2024-03-28 05:09:13,984 [printer.py:reinit()] - # Leds: 1
2024-03-28 05:09:13,985 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 05:09:14,015 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 05:09:14,018 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-28 05:09:14,336 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-28 05:09:14,337 [screen.py:init_klipper()] - Printer initialized
2024-03-28 05:09:14,338 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-28 05:09:14,338 [printer.py:change_state()] - Adding callback for state: startup
2024-03-28 05:09:15,706 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-28 05:09:15,706 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 05:09:15,709 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 05:09:15,715 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 05:09:15,715 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 05:09:15,840 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 05:09:15,856 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 05:09:15,866 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 05:09:15,876 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 05:09:15,933 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 05:09:15,935 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 05:09:15,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-28 05:09:15,984 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 05:09:16,022 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 05:11:15,311 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 05:11:15,513 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 05:11:18,210 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-50 F3000'}
2024-03-28 05:11:18,219 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 05:11:25,209 [move.py:change_distance()] - ### Distance .1
2024-03-28 05:11:25,801 [move.py:change_distance()] - ### Distance 1
2024-03-28 05:11:26,443 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-03-28 05:11:26,448 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 05:11:27,180 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-03-28 05:11:27,188 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 05:11:27,594 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-03-28 05:11:27,598 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 05:11:34,114 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-03-28 05:11:34,122 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 05:11:34,401 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-03-28 05:11:34,406 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 05:11:34,773 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-03-28 05:11:34,777 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 05:11:35,121 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-03-28 05:11:35,127 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 05:11:36,322 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-03-28 05:11:36,329 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 05:11:36,818 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-03-28 05:11:36,823 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 05:11:37,362 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-03-28 05:11:37,368 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 05:11:41,093 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-03-28 05:11:41,099 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 05:11:42,145 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-03-28 05:11:42,152 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 05:11:46,790 [move.py:change_distance()] - ### Distance 50
2024-03-28 05:11:47,180 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 05:11:47,186 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 05:11:48,409 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 05:11:48,415 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 05:14:54,732 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 05:14:54,965 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-28 05:14:54,995 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-28 05:14:55,923 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-28 05:17:07,141 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-28 05:17:07,142 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-28 05:17:07,146 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-28 05:17:07,147 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 05:17:07,151 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 05:17:07,151 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 05:17:07,219 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 05:17:10,873 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 05:17:10,891 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 05:17:10,908 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 05:17:10,909 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 05:17:10,909 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 05:17:10,930 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 05:17:11,033 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 05:17:11,035 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 05:17:11,036 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-28 05:17:11,036 [printer.py:reinit()] - # Extruders: 0
2024-03-28 05:17:11,036 [printer.py:reinit()] - # Temperature devices: 0
2024-03-28 05:17:11,036 [printer.py:reinit()] - # Fans: 0
2024-03-28 05:17:11,036 [printer.py:reinit()] - # Output pins: 0
2024-03-28 05:17:11,037 [printer.py:reinit()] - # Leds: 0
2024-03-28 05:17:11,037 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 05:17:11,060 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 05:17:11,062 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-03-28 05:17:11,293 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-28 05:17:11,293 [screen.py:init_klipper()] - Printer initialized
2024-03-28 05:17:11,294 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-03-28 05:17:11,294 [printer.py:change_state()] - Adding callback for state: error
2024-03-28 05:17:11,299 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 05:17:11,299 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 05:17:11,368 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 05:19:21,772 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-03-28 05:19:21,773 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-28 05:19:21,775 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-28 05:19:21,776 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 05:19:21,781 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 05:19:21,782 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 05:19:21,889 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 05:19:24,874 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 05:19:24,892 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 05:19:24,909 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 05:19:24,910 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 05:19:24,910 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 05:19:24,931 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 05:19:24,976 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nM400\nG92 E0\n{% if printer[printer.toolhead.extruder].target > 220 %}\nG1 E-5.0 F3600\n{% else %}\nG1 E-1.0 F3600\n{% endif %}\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nG91\nG0 Z1.00 X20.0 Y20.0 F20000\nTURN_OFF_HEATERS\nM107\nG1 Z4 F3000\nG90\nG0 X190 Y190 F3600'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-1.040'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '165', 'variable_safe_y': '165', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic', 'zero_reference_position': '175, 175'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '58.437', 'pid_ki': '2.347', 'pid_kd': '363.769'}, 'firmware_retraction': {'retract_length': '0.8', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X165 Y165 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.632500, -0.677500, -0.687500, -0.677500\n-0.675000, -0.660000, -0.655000, -0.680000\n-0.697500, -0.695000, -0.705000, -0.705000\n-0.697500, -0.695000, -0.695000, -0.690000', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '3', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '124.0', 'max_x': '226.0', 'min_y': '106.0', 'max_y': '244.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nM400\nG92 E0\n{% if printer[printer.toolhead.extruder].target > 220 %}\nG1 E-5.0 F3600\n{% else %}\nG1 E-1.0 F3600\n{% endif %}\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nG91\nG0 Z1.00 X20.0 Y20.0 F20000\nTURN_OFF_HEATERS\nM107\nG1 Z4 F3000\nG90\nG0 X190 Y190 F3600', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -1.04, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro filament_load': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '165', 'variable_safe_y': '165'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.6325, -0.6775, -0.6875, -0.6775], [-0.675, -0.66, -0.655, -0.68], [-0.6975, -0.695, -0.705, -0.705], [-0.6975, -0.695, -0.695, -0.69]], 'min_x': 124.0, 'max_x': 226.0, 'min_y': 106.0, 'max_y': 244.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 3, 'algo': 'lagrange', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 58.437, 'pid_ki': 2.347, 'pid_kd': 363.769, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 0.8, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X165 Y165 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 05:19:24,981 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 05:19:24,982 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-28 05:19:24,983 [printer.py:reinit()] - # Extruders: 1
2024-03-28 05:19:24,983 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 05:19:24,983 [printer.py:reinit()] - # Fans: 4
2024-03-28 05:19:24,983 [printer.py:reinit()] - # Output pins: 0
2024-03-28 05:19:24,984 [printer.py:reinit()] - # Leds: 1
2024-03-28 05:19:24,984 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 05:19:25,014 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 05:19:25,017 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-28 05:19:25,326 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-28 05:19:25,327 [screen.py:init_klipper()] - Printer initialized
2024-03-28 05:19:25,328 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-28 05:19:25,328 [printer.py:change_state()] - Adding callback for state: startup
2024-03-28 05:19:26,957 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-28 05:19:26,958 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 05:19:26,960 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 05:19:26,974 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 05:19:26,975 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 05:19:27,113 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 05:19:27,129 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 05:19:27,140 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 05:19:27,152 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 05:19:27,219 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 05:19:27,222 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 05:19:27,269 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-28 05:19:27,272 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 05:19:27,294 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 05:24:47,368 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 05:24:47,368 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 05:24:47,388 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 05:24:47,389 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 05:24:47,598 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 05:24:47,608 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 05:24:47,629 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 05:24:47,639 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 05:31:38,714 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 05:31:39,613 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 05:31:39,614 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 05:31:39,615 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 05:31:39,626 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 05:31:43,799 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 05:31:43,800 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 05:31:43,826 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-03-28 05:31:49,028 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 05:31:49,145 [screen.py:attach_panel()] - Current panel hierarchy: job_status > gcode_macros
2024-03-28 05:32:01,067 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 05:32:01,182 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 05:32:02,869 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-28 05:32:02,871 [job_status.py:restart()] - Starting print: First_Layer_Octo_0.2.gcode
2024-03-28 05:32:02,872 [job_status.py:new_print()] - reseting progress
2024-03-28 05:32:03,099 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 05:32:03,100 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 05:32:03,116 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 05:32:03,125 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 05:32:03,134 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 05:32:03,198 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 05:32:03,199 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 05:32:03,490 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 05:32:03,500 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 05:32:03,514 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 05:32:03,523 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 05:32:03,681 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 05:32:03,789 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 05:32:04,590 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-28 05:32:04,953 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 05:36:10,257 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 05:36:10,910 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 05:36:10,954 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 05:36:10,973 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 05:36:10,983 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 05:36:29,980 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 05:36:30,879 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 05:36:33,047 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 05:36:37,161 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 05:36:40,182 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 05:36:44,161 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 05:36:50,028 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 05:37:14,661 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 05:37:16,919 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 05:37:18,998 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 05:37:24,547 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 05:37:24,593 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 05:37:24,631 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 05:37:24,652 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 05:37:25,594 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 05:37:26,211 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 05:37:26,211 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 05:37:26,212 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 05:37:26,219 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 05:37:31,019 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 05:37:31,019 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 05:37:31,038 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-03-28 05:37:45,696 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-28 05:37:45,698 [job_status.py:restart()] - Starting print: First_Layer_Octo_0.2.gcode
2024-03-28 05:37:45,699 [job_status.py:new_print()] - reseting progress
2024-03-28 05:37:45,841 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 05:37:45,843 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 05:37:45,877 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 05:37:45,890 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 05:37:45,899 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 05:37:45,989 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 05:37:45,991 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 05:37:46,186 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 05:37:46,196 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 05:37:46,211 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 05:37:46,220 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 05:41:57,177 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 05:41:57,293 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 05:41:57,901 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-28 05:41:58,223 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 05:42:04,762 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 05:42:08,055 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 05:42:10,318 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 05:42:13,361 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 05:42:16,463 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 05:42:25,264 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 05:42:25,309 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 05:42:25,332 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 05:42:25,341 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 05:42:26,234 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 05:42:26,792 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 05:42:26,793 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 05:42:26,794 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 05:42:26,801 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 05:42:30,582 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 05:42:30,582 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 05:42:30,605 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-03-28 05:42:47,535 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-28 05:42:47,538 [job_status.py:restart()] - Starting print: First_Layer_Octo_0.2.gcode
2024-03-28 05:42:47,539 [job_status.py:new_print()] - reseting progress
2024-03-28 05:42:47,665 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 05:42:47,666 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 05:42:47,684 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 05:42:47,693 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 05:42:47,702 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 05:42:47,772 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 05:42:47,773 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 05:42:47,974 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 05:42:47,986 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 05:42:48,001 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 05:42:48,010 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 05:42:48,451 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 05:42:48,566 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 05:42:49,389 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 05:42:50,077 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-28 05:42:50,529 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 05:42:51,125 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 05:42:51,171 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 05:42:51,191 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 05:42:51,200 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 05:46:53,106 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 05:47:00,468 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 05:47:01,046 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-28 05:47:01,401 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 05:47:15,724 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 05:47:16,094 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 05:47:26,351 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 05:47:36,887 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 05:47:41,527 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 05:47:42,990 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 05:47:52,222 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 05:48:34,431 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-28 05:49:05,196 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 05:49:05,282 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 05:49:05,316 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 05:49:05,337 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 05:49:06,009 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 05:49:07,327 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 05:49:07,328 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 05:49:07,328 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 05:49:07,338 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 05:49:10,750 [printer.py:get_probe()] - Probe type: probe
2024-03-28 05:49:10,790 [KlippyGtk.py:Dialog()] - Showing dialog Save Z (width=800, height=480)
2024-03-28 05:49:11,600 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 05:49:11,601 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: Z_OFFSET_APPLY_PROBE
2024-03-28 05:49:11,602 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SAVE_CONFIG
2024-03-28 05:49:12,012 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 05:49:12,013 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 05:49:12,033 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-03-28 05:49:14,257 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-28 05:49:14,258 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-28 05:49:14,259 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-28 05:49:14,260 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 05:49:14,265 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 05:49:14,266 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 05:49:14,332 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 05:49:17,873 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 05:49:17,893 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 05:49:17,910 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 05:49:17,911 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 05:49:17,911 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 05:49:17,933 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 05:49:17,973 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nM400\nG92 E0\n{% if printer[printer.toolhead.extruder].target > 220 %}\nG1 E-5.0 F3600\n{% else %}\nG1 E-1.0 F3600\n{% endif %}\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nG91\nG0 Z1.00 X20.0 Y20.0 F20000\nTURN_OFF_HEATERS\nM107\nG1 Z4 F3000\nG90\nG0 X190 Y190 F3600'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-0.040'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic', 'zero_reference_position': '175, 175'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '58.437', 'pid_ki': '2.347', 'pid_kd': '363.769'}, 'firmware_retraction': {'retract_length': '0.8', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X165 Y165 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.027500, -0.005000, -0.032500\n-0.040000, 0.000000, -0.007500\n-0.047500, -0.055000, -0.055000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '137.5', 'max_x': '212.5', 'min_y': '137.5', 'max_y': '212.5'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nM400\nG92 E0\n{% if printer[printer.toolhead.extruder].target > 220 %}\nG1 E-5.0 F3600\n{% else %}\nG1 E-1.0 F3600\n{% endif %}\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nG91\nG0 Z1.00 X20.0 Y20.0 F20000\nTURN_OFF_HEATERS\nM107\nG1 Z4 F3000\nG90\nG0 X190 Y190 F3600', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.04, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro filament_load': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0275, -0.005, -0.0325], [-0.04, 0.0, -0.0075], [-0.0475, -0.055, -0.055]], 'min_x': 137.5, 'max_x': 212.5, 'min_y': 137.5, 'max_y': 212.5, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 58.437, 'pid_ki': 2.347, 'pid_kd': 363.769, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 0.8, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X165 Y165 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 05:49:17,979 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 05:49:17,981 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-28 05:49:17,981 [printer.py:reinit()] - # Extruders: 1
2024-03-28 05:49:17,981 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 05:49:17,982 [printer.py:reinit()] - # Fans: 4
2024-03-28 05:49:17,982 [printer.py:reinit()] - # Output pins: 0
2024-03-28 05:49:17,982 [printer.py:reinit()] - # Leds: 1
2024-03-28 05:49:17,982 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 05:49:18,009 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 05:49:18,012 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-28 05:49:18,332 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-28 05:49:18,333 [screen.py:init_klipper()] - Printer initialized
2024-03-28 05:49:18,334 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-28 05:49:18,334 [printer.py:change_state()] - Adding callback for state: startup
2024-03-28 05:49:19,723 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-28 05:49:19,724 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 05:49:19,728 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 05:49:19,738 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffb100a850>>
2024-03-28 05:49:19,739 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 05:49:19,920 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 05:49:19,935 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 05:49:19,945 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 05:49:19,955 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 05:49:20,027 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 05:49:20,029 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 05:49:20,076 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-28 05:49:20,079 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 05:49:20,099 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 00:17:25,539 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-28 00:17:25,540 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-64-g1c9d82a
2024-03-28 00:17:25,540 [functions.py:log_start()] - Python version: 3.9
2024-03-28 00:17:25,938 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-28 00:17:25,938 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-03-28 00:17:25,970 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-28 00:17:25,973 [config.py:__init__()] - ====== Saved Def ======

[main]
show_scroll_steppers = True
print_view = list

=======================
2024-03-28 00:17:25,974 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-28 00:17:26,107 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-03-28 00:17:26,107 [config.py:install_language()] - Using lang en
2024-03-28 00:17:26,144 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-28 00:17:26,146 [screen.py:__init__()] - Wayland: False Display name: :0
2024-03-28 00:17:26,151 [screen.py:__init__()] - Screen resolution: 800x480
2024-03-28 00:17:26,155 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-03-28 00:17:28,559 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-28 00:17:28,572 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-03-28 00:17:28,583 [screen.py:initial_connection()] - Default printer: None
2024-03-28 00:17:28,662 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-28 00:17:28,663 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-28 00:17:28,742 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 00:17:28,758 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-28 00:17:28,759 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 00:17:28,797 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-28 00:17:28,817 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-28 00:17:28,836 [_logging.py:info()] - Websocket connected
2024-03-28 00:17:28,837 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-28 00:17:29,094 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 00:17:29,113 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 00:17:29,131 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 00:17:29,132 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 00:17:29,132 [screen.py:init_klipper()] - Klipper not connected
2024-03-28 00:17:32,082 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 00:17:32,102 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 00:17:32,103 [screen.py:init_klipper()] - Klipper not connected
2024-03-28 00:17:35,082 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 00:17:35,103 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 00:17:35,104 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 00:17:35,140 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-03-28 00:17:38,080 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 00:17:38,098 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 00:17:38,115 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 00:17:38,116 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 00:17:38,117 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 00:17:38,137 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 00:17:38,190 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nM400\nG92 E0\n{% if printer[printer.toolhead.extruder].target > 220 %}\nG1 E-5.0 F3600\n{% else %}\nG1 E-1.0 F3600\n{% endif %}\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nG91\nG0 Z1.00 X20.0 Y20.0 F20000\nTURN_OFF_HEATERS\nM107\nG1 Z4 F3000\nG90\nG0 X190 Y190 F3600'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-0.040'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic', 'zero_reference_position': '175, 175'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '58.437', 'pid_ki': '2.347', 'pid_kd': '363.769'}, 'firmware_retraction': {'retract_length': '0.8', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X165 Y165 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.027500, -0.005000, -0.032500\n-0.040000, 0.000000, -0.007500\n-0.047500, -0.055000, -0.055000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '137.5', 'max_x': '212.5', 'min_y': '137.5', 'max_y': '212.5'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nM400\nG92 E0\n{% if printer[printer.toolhead.extruder].target > 220 %}\nG1 E-5.0 F3600\n{% else %}\nG1 E-1.0 F3600\n{% endif %}\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nG91\nG0 Z1.00 X20.0 Y20.0 F20000\nTURN_OFF_HEATERS\nM107\nG1 Z4 F3000\nG90\nG0 X190 Y190 F3600', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.04, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro filament_load': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0275, -0.005, -0.0325], [-0.04, 0.0, -0.0075], [-0.0475, -0.055, -0.055]], 'min_x': 137.5, 'max_x': 212.5, 'min_y': 137.5, 'max_y': 212.5, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 58.437, 'pid_ki': 2.347, 'pid_kd': 363.769, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 0.8, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X165 Y165 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 00:17:38,195 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 00:17:38,197 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-28 00:17:38,197 [printer.py:reinit()] - # Extruders: 1
2024-03-28 00:17:38,198 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 00:17:38,198 [printer.py:reinit()] - # Fans: 4
2024-03-28 00:17:38,198 [printer.py:reinit()] - # Output pins: 0
2024-03-28 00:17:38,198 [printer.py:reinit()] - # Leds: 1
2024-03-28 00:17:38,198 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 00:17:38,235 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 00:17:38,238 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-28 00:17:38,546 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-28 00:17:38,546 [screen.py:init_klipper()] - Printer initialized
2024-03-28 00:17:38,547 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-28 00:17:38,547 [printer.py:change_state()] - Adding callback for state: startup
2024-03-28 00:17:38,920 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-28 00:17:38,920 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 00:17:38,922 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 00:17:38,926 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-28 00:17:39,065 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 00:17:39,080 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 00:17:39,089 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 00:17:39,099 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 00:17:39,154 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 00:17:39,156 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 00:17:39,178 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-03-28 00:17:39,251 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-03-28 00:17:39,252 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 00:17:39,269 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-03-28 00:17:44,078 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 00:17:44,114 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-28 00:17:44,117 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 00:17:44,137 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 00:17:44,139 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 00:17:44,174 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-28 00:17:44,176 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 00:17:44,199 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 00:18:00,326 [screen.py:_load_panel()] - Loading panel: move
2024-03-28 00:18:00,477 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 00:18:01,192 [screen.py:_load_panel()] - Loading panel: menu
2024-03-28 00:18:01,376 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-28 00:18:01,408 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-28 00:18:01,940 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-28 08:51:20,676 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 08:51:20,677 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 08:51:20,690 [screen.py:_load_panel()] - Loading panel: job_status
2024-03-28 08:51:20,902 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 08:51:20,912 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 08:51:20,938 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 08:51:20,957 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 09:01:11,833 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 09:01:11,834 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 09:01:11,855 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-28 09:01:33,127 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-28 09:01:33,129 [job_status.py:restart()] - Starting print: First_Layer_Octo_0.2.gcode
2024-03-28 09:01:33,129 [job_status.py:new_print()] - reseting progress
2024-03-28 09:01:33,392 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 09:01:33,392 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 09:01:33,438 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2024-03-28 09:01:33,540 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 09:01:33,730 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 09:01:33,740 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 09:01:33,754 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 09:01:33,764 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 09:01:34,335 [screen.py:_load_panel()] - Loading panel: fine_tune
2024-03-28 09:01:34,450 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 09:01:35,493 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 09:01:36,117 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-28 09:01:36,495 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 09:08:57,018 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 09:08:57,018 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 09:21:19,411 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 09:21:19,868 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 09:21:19,891 [screen.py:show_popup_message()] - error: Must home axis first: 175.000 348.000 2.029 [823.057]
2024-03-28 09:21:21,444 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 09:21:21,468 [screen.py:show_popup_message()] - error: Must home axis first: 175.000 348.000 2.029 [823.057]
2024-03-28 09:21:22,586 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 09:21:22,629 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 09:21:22,644 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-28 09:21:22,651 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 09:21:22,660 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 09:21:23,693 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-28 09:21:23,694 [job_status.py:restart()] - Starting print: First_Layer_Octo_0.2.gcode
2024-03-28 09:21:23,695 [job_status.py:new_print()] - reseting progress
2024-03-28 09:21:23,836 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 09:21:23,837 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 09:21:23,865 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2024-03-28 09:21:23,933 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 09:21:24,142 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 09:21:24,153 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 09:21:24,173 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 09:21:24,183 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 09:31:44,363 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 09:31:44,469 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 09:31:45,257 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 09:31:45,748 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-28 09:31:51,387 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-28 09:31:53,763 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-28 09:31:55,555 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z=0 MOVE=1'}
2024-03-28 09:32:05,673 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-28 09:32:06,035 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 09:32:06,851 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 09:32:24,428 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 09:32:25,102 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 09:32:25,689 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 09:32:25,731 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 09:32:25,753 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 09:32:25,763 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 09:32:26,614 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 09:32:27,220 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 09:32:27,221 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 09:32:27,221 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 09:32:27,227 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 09:32:30,902 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 09:32:30,902 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 09:32:30,921 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-03-28 09:40:23,824 [job_status.py:close_panel()] - Closing job_status panel
2024-03-28 09:40:23,825 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 09:40:23,835 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 09:40:24,052 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 09:40:24,069 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 09:40:24,079 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 09:40:24,089 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 09:40:24,146 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 09:40:25,002 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 09:40:25,126 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 09:40:25,804 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 09:40:25,977 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-28 09:40:26,024 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-28 09:40:27,027 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-03-28 10:06:29,889 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 10:06:29,890 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 10:06:29,903 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 10:06:30,096 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 10:06:30,107 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 10:06:30,122 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 10:06:30,131 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 10:13:33,560 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 10:13:33,698 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 10:13:34,467 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-28 10:13:34,780 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 10:13:35,797 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 10:13:57,347 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 10:13:57,639 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 10:14:04,683 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-28 10:14:04,973 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 10:14:05,419 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 10:15:15,697 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 10:15:15,697 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 10:21:39,413 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-28 10:21:39,414 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-28 10:21:39,417 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-28 10:21:39,418 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 10:21:39,427 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 10:21:39,552 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 10:21:43,183 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 10:21:43,204 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 10:21:43,221 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 10:21:43,222 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 10:21:43,222 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 10:21:43,243 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 10:21:43,284 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-0.040'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic', 'zero_reference_position': '175, 175'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '58.437', 'pid_ki': '2.347', 'pid_kd': '363.769'}, 'firmware_retraction': {'retract_length': '0.8', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X165 Y165 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.027500, -0.005000, -0.032500\n-0.040000, 0.000000, -0.007500\n-0.047500, -0.055000, -0.055000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '137.5', 'max_x': '212.5', 'min_y': '137.5', 'max_y': '212.5'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.04, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro filament_load': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0275, -0.005, -0.0325], [-0.04, 0.0, -0.0075], [-0.0475, -0.055, -0.055]], 'min_x': 137.5, 'max_x': 212.5, 'min_y': 137.5, 'max_y': 212.5, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 58.437, 'pid_ki': 2.347, 'pid_kd': 363.769, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 0.8, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X165 Y165 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 10:21:43,289 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 10:21:43,291 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-28 10:21:43,291 [printer.py:reinit()] - # Extruders: 1
2024-03-28 10:21:43,292 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 10:21:43,292 [printer.py:reinit()] - # Fans: 4
2024-03-28 10:21:43,292 [printer.py:reinit()] - # Output pins: 0
2024-03-28 10:21:43,292 [printer.py:reinit()] - # Leds: 1
2024-03-28 10:21:43,292 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 10:21:43,324 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 10:21:43,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-28 10:21:43,641 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-28 10:21:43,641 [screen.py:init_klipper()] - Printer initialized
2024-03-28 10:21:43,642 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-28 10:21:43,642 [printer.py:change_state()] - Adding callback for state: startup
2024-03-28 10:21:44,766 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-28 10:21:44,766 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 10:21:44,769 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 10:21:44,774 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 10:21:44,896 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 10:21:44,911 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 10:21:44,921 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 10:21:44,930 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 10:21:44,986 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 10:21:44,988 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 10:21:45,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-28 10:21:45,038 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 10:21:45,058 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 10:23:20,322 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 10:23:20,447 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 10:23:21,054 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 10:23:21,242 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-28 10:23:21,272 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-28 10:23:21,930 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-28 10:23:44,474 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 10:23:44,556 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 10:23:45,874 [move.py:change_distance()] - ### Distance 50
2024-03-28 10:23:46,434 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 10:23:46,440 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 10:23:48,083 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 10:23:48,090 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 10:23:51,114 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 10:23:51,119 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 10:27:10,490 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 10:27:10,575 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 10:27:11,626 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 10:27:12,242 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-28 10:27:12,275 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-28 10:27:12,834 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-03-28 10:31:02,164 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 10:31:02,228 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 10:31:03,330 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 10:31:03,369 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 10:31:04,863 [screen.py:_load_panel()] - Loading panel: print
2024-03-28 10:31:04,917 [print.py:__init__()] - Thumbsize: 114.20689655172413
2024-03-28 10:31:04,924 [print.py:__init__()] - list
2024-03-28 10:31:04,938 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-03-28 10:31:04,991 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-03-28 10:31:05,245 [print.py:load_files()] - Loaded in 0.238 seconds
2024-03-28 10:31:09,298 [print.py:change_sort()] - Changing from name to date
2024-03-28 10:31:11,524 [KlippyGtk.py:Dialog()] - Showing dialog Print First_Layer_Octo_0.2.gcode (width=800, height=480)
2024-03-28 10:31:12,253 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 10:31:12,254 [print.py:confirm_print_response()] - Starting print: First_Layer_Octo_0.2.gcode
2024-03-28 10:31:12,254 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-28 10:31:12,477 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 10:31:12,478 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 10:31:12,494 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 10:31:12,682 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 10:31:12,692 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 10:31:12,707 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 10:31:12,716 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 10:35:55,604 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 10:35:55,711 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 10:35:57,250 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-28 10:35:59,778 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 10:36:01,451 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 10:36:06,036 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 10:36:08,155 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 10:36:13,635 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 10:36:16,984 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 10:36:21,060 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 10:39:22,406 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 10:39:22,406 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 11:01:14,013 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 11:01:14,093 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 11:01:14,118 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-28 11:01:14,131 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 11:01:14,151 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 11:01:15,590 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-28 11:01:15,592 [job_status.py:restart()] - Starting print: First_Layer_Octo_0.2.gcode
2024-03-28 11:01:15,592 [job_status.py:new_print()] - reseting progress
2024-03-28 11:01:15,673 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 11:01:15,673 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 11:01:15,689 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2024-03-28 11:01:15,749 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 11:01:15,750 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 11:01:15,984 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 11:01:15,996 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 11:01:16,017 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 11:01:16,026 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 11:11:50,471 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 11:11:50,582 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 11:11:51,557 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-28 11:12:51,173 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 11:12:51,174 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 11:13:56,800 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 11:13:57,502 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 11:13:58,607 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 11:13:58,649 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 11:13:58,665 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-28 11:13:58,672 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 11:13:58,681 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 11:13:59,743 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-28 11:13:59,745 [job_status.py:restart()] - Starting print: First_Layer_Octo_0.2.gcode
2024-03-28 11:13:59,746 [job_status.py:new_print()] - reseting progress
2024-03-28 11:13:59,859 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 11:13:59,859 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 11:13:59,882 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2024-03-28 11:13:59,939 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 11:13:59,939 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 11:14:00,142 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 11:14:00,152 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 11:14:00,179 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 11:14:00,189 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 11:17:24,142 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 11:17:24,258 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 11:17:25,029 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-28 11:17:26,606 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 11:17:29,339 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 11:17:30,614 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 11:17:31,784 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 11:17:35,230 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 11:17:53,556 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 11:17:53,878 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 11:17:54,766 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 11:20:41,116 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 11:20:41,117 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 11:22:56,668 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 11:22:56,754 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 11:22:56,783 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-28 11:22:56,796 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 11:22:56,816 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 11:22:58,084 [printer.py:get_probe()] - Probe type: probe
2024-03-28 11:22:58,113 [KlippyGtk.py:Dialog()] - Showing dialog Save Z (width=800, height=480)
2024-03-28 11:22:58,788 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 11:22:58,788 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: Z_OFFSET_APPLY_PROBE
2024-03-28 11:22:58,790 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SAVE_CONFIG
2024-03-28 11:22:58,912 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-28 11:23:00,088 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-28 11:23:00,089 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-28 11:23:00,090 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-28 11:23:00,091 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 11:23:00,097 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 11:23:00,098 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 11:23:00,099 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 11:23:00,171 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 11:23:03,187 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 11:23:03,209 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 11:23:03,229 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 11:23:03,230 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 11:23:03,230 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 11:23:03,272 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 11:23:03,315 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-0.720'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic', 'zero_reference_position': '175, 175'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '58.437', 'pid_ki': '2.347', 'pid_kd': '363.769'}, 'firmware_retraction': {'retract_length': '0.8', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X165 Y165 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.015000, 0.002500, -0.007500\n-0.012500, 0.000000, -0.012500\n-0.042500, -0.022500, -0.032500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '137.5', 'max_x': '212.5', 'min_y': '137.5', 'max_y': '212.5'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.72, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro filament_load': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.015, 0.0025, -0.0075], [-0.0125, 0.0, -0.0125], [-0.0425, -0.0225, -0.0325]], 'min_x': 137.5, 'max_x': 212.5, 'min_y': 137.5, 'max_y': 212.5, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 58.437, 'pid_ki': 2.347, 'pid_kd': 363.769, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 0.8, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X165 Y165 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 11:23:03,321 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 11:23:03,323 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-28 11:23:03,323 [printer.py:reinit()] - # Extruders: 1
2024-03-28 11:23:03,323 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 11:23:03,324 [printer.py:reinit()] - # Fans: 4
2024-03-28 11:23:03,324 [printer.py:reinit()] - # Output pins: 0
2024-03-28 11:23:03,324 [printer.py:reinit()] - # Leds: 1
2024-03-28 11:23:03,324 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 11:23:03,351 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 11:23:03,354 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-28 11:23:03,675 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-28 11:23:03,676 [screen.py:init_klipper()] - Printer initialized
2024-03-28 11:23:03,676 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-28 11:23:03,677 [printer.py:change_state()] - Adding callback for state: startup
2024-03-28 11:23:05,555 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-28 11:23:05,556 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 11:23:05,558 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 11:23:05,564 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 11:23:05,564 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 11:23:05,693 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 11:23:05,708 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 11:23:05,718 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 11:23:05,728 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 11:23:05,785 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 11:23:05,787 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 11:23:05,832 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-28 11:23:05,837 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 11:23:05,858 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 11:27:16,798 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 11:27:16,928 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 11:27:18,018 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 11:27:18,198 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-28 11:27:18,227 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-28 11:27:18,973 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-03-28 11:33:29,652 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 11:33:29,732 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 11:33:31,828 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 11:33:31,910 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 11:33:33,257 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 11:33:37,500 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-50 F3000'}
2024-03-28 11:33:37,506 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:33:38,332 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-50 F3000'}
2024-03-28 11:33:38,337 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:33:39,835 [move.py:change_distance()] - ### Distance 10
2024-03-28 11:33:40,436 [move.py:change_distance()] - ### Distance 25
2024-03-28 11:33:40,908 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-03-28 11:33:40,915 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:33:42,516 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-03-28 11:33:42,522 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:33:42,996 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-03-28 11:33:43,000 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:33:43,988 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-03-28 11:33:43,993 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:33:44,644 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-03-28 11:33:44,648 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:33:45,396 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-03-28 11:33:45,402 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:33:46,230 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-03-28 11:33:46,234 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:07,262 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-03-28 11:34:07,268 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:08,413 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-03-28 11:34:08,426 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:11,904 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-03-28 11:34:11,911 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:13,915 [move.py:change_distance()] - ### Distance 1
2024-03-28 11:34:14,708 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-03-28 11:34:14,712 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:15,492 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-03-28 11:34:15,496 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:16,368 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-03-28 11:34:16,375 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:17,732 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-03-28 11:34:17,737 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:18,180 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-03-28 11:34:18,184 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:18,692 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-03-28 11:34:18,696 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:19,172 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-03-28 11:34:19,177 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:19,628 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-03-28 11:34:19,632 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:20,156 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-03-28 11:34:20,160 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:20,860 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-03-28 11:34:20,864 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:25,467 [move.py:change_distance()] - ### Distance 50
2024-03-28 11:34:25,997 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 11:34:26,002 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:32,317 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 11:34:32,325 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:39,164 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 11:34:39,171 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:44,564 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 11:34:44,569 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:51,339 [move.py:change_distance()] - ### Distance 1
2024-03-28 11:34:52,014 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+1 F600'}
2024-03-28 11:34:52,018 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:55,236 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+1 F600'}
2024-03-28 11:34:55,243 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:34:56,093 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+1 F600'}
2024-03-28 11:34:56,098 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:35:02,067 [move.py:change_distance()] - ### Distance 25
2024-03-28 11:35:03,179 [move.py:change_distance()] - ### Distance 1
2024-03-28 11:35:03,892 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+1 F600'}
2024-03-28 11:35:03,896 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:35:04,644 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+1 F600'}
2024-03-28 11:35:04,648 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:35:06,380 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+1 F600'}
2024-03-28 11:35:06,387 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:35:06,876 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+1 F600'}
2024-03-28 11:35:06,880 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:35:07,364 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+1 F600'}
2024-03-28 11:35:07,368 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:35:07,900 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+1 F600'}
2024-03-28 11:35:07,904 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:35:09,260 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+1 F600'}
2024-03-28 11:35:09,269 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 11:35:10,260 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+1 F600'}
2024-03-28 11:35:10,264 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 12:35:11,185 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-28 12:55:24,569 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-28 12:55:24,592 [screen.py:wake_screen()] - Screen wake up
2024-03-28 12:55:25,725 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 12:55:25,765 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 12:55:27,969 [screen.py:_load_panel()] - Loading panel: temperature
2024-03-28 12:55:28,026 [temperature.py:add_device()] - Adding device: extruder
2024-03-28 12:55:28,037 [temperature.py:add_device()] - Adding device: heater_bed
2024-03-28 12:55:28,048 [temperature.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 12:55:28,058 [temperature.py:select_heater()] - Selecting extruder
2024-03-28 12:55:28,060 [temperature.py:select_heater()] - Selecting heater_bed
2024-03-28 12:55:28,113 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-03-28 12:55:29,172 [temperature.py:select_heater()] - Deselecting extruder
2024-03-28 12:55:29,986 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2024-03-28 12:55:29,986 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2024-03-28 12:55:29,986 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S40.0
2024-03-28 13:11:06,304 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 13:11:06,305 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 13:11:06,327 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 13:11:06,329 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 13:11:06,544 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 13:11:06,559 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 13:11:06,582 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 13:11:06,591 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 13:20:44,432 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 13:20:44,554 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 13:20:45,311 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-28 13:20:45,640 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 13:20:46,256 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-28 13:20:47,801 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-28 13:20:53,712 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-28 13:20:54,241 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 13:21:26,087 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 13:21:26,520 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 13:23:16,628 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 13:23:16,628 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 13:28:47,117 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 13:28:47,117 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 13:28:47,129 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 13:28:47,129 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 13:28:47,336 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 13:28:47,346 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 13:28:47,366 [job_status.py:update_file_metadata()] - Update Metadata. File: PLA Temp Tower.gcode Size: 1355666
2024-03-28 13:28:47,376 [job_status.py:show_file_thumbnail()] - PLA Temp Tower.gcode
2024-03-28 13:33:04,096 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 13:33:04,206 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 14:03:15,243 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 14:03:15,294 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 14:03:15,314 [job_status.py:update_file_metadata()] - Update Metadata. File: PLA Temp Tower.gcode Size: 1355666
2024-03-28 14:03:15,324 [job_status.py:show_file_thumbnail()] - PLA Temp Tower.gcode
2024-03-28 14:03:15,950 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 14:03:16,715 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 14:03:16,716 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 14:03:16,718 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 14:03:16,732 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 14:03:19,365 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 14:03:19,365 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 14:03:19,384 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-03-28 14:04:05,028 [job_status.py:update_file_metadata()] - Update Metadata. File: PLA Temp Tower.gcode Size: 1355991
2024-03-28 14:04:05,038 [job_status.py:show_file_thumbnail()] - PLA Temp Tower.gcode
2024-03-28 14:04:22,308 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 14:04:22,309 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 14:04:22,330 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 14:04:22,339 [job_status.py:update_file_metadata()] - Update Metadata. File: PLA Temp Tower.gcode Size: 1355991
2024-03-28 14:04:22,348 [job_status.py:show_file_thumbnail()] - PLA Temp Tower.gcode
2024-03-28 14:04:22,419 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 14:04:22,420 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 14:04:22,619 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 14:04:22,629 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 14:04:22,645 [job_status.py:update_file_metadata()] - Update Metadata. File: PLA Temp Tower.gcode Size: 1355991
2024-03-28 14:04:22,654 [job_status.py:show_file_thumbnail()] - PLA Temp Tower.gcode
2024-03-28 14:07:48,166 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 14:07:48,276 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 14:07:49,275 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 14:07:49,624 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-28 14:07:50,687 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-28 14:07:58,219 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-28 14:07:58,604 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 14:08:09,809 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-28 14:16:09,668 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 14:16:12,002 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 14:16:12,050 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 14:16:12,069 [job_status.py:update_file_metadata()] - Update Metadata. File: PLA Temp Tower.gcode Size: 1355991
2024-03-28 14:16:12,079 [job_status.py:show_file_thumbnail()] - PLA Temp Tower.gcode
2024-03-28 14:16:12,940 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 14:16:13,527 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 14:16:13,528 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 14:16:13,529 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 14:16:13,536 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 14:16:17,302 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 14:16:17,303 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 14:16:17,340 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-03-28 14:16:18,610 [job_status.py:close_panel()] - Closing job_status panel
2024-03-28 14:16:18,611 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 14:16:18,617 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 14:16:18,618 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 14:16:18,743 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 14:16:18,758 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 14:16:18,768 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 14:16:18,779 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 14:16:18,845 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 14:16:20,015 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 14:16:20,229 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 14:16:21,866 [move.py:change_distance()] - ### Distance 50
2024-03-28 14:16:22,304 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 14:16:22,315 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 14:16:29,563 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 14:16:29,571 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 14:17:55,321 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 14:17:55,322 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 14:17:55,344 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 14:17:55,345 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 14:17:55,553 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 14:17:55,566 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 14:17:55,581 [job_status.py:update_file_metadata()] - Update Metadata. File: retraction.gcode Size: 296879
2024-03-28 14:17:55,582 [job_status.py:show_file_thumbnail()] - retraction.gcode
2024-03-28 14:17:55,582 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-03-28 14:22:57,430 [screen.py:show_popup_message()] - error: // Unknown command:"T0"
2024-03-28 14:38:56,970 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 14:38:57,755 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 14:38:57,756 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 14:38:57,757 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 14:38:57,764 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 14:39:00,378 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 14:39:00,379 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 14:39:00,394 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-03-28 14:39:02,753 [job_status.py:close_panel()] - Closing job_status panel
2024-03-28 14:39:02,753 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 14:39:02,764 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 14:39:02,765 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 14:39:02,961 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 14:39:02,981 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 14:39:02,990 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 14:39:03,000 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 14:39:03,064 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 14:39:04,410 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 14:39:04,538 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 14:39:05,272 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 14:39:05,278 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 14:39:11,648 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 14:39:11,653 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 14:40:01,149 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 14:40:01,156 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 15:03:20,610 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 15:03:20,791 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-28 15:03:20,821 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-28 15:03:21,310 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-28 15:04:06,913 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-03-28 15:04:10,898 [screen.py:show_popup_message()] - error: No trigger on probe after full movement
2024-03-28 15:04:17,662 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 15:04:17,703 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 15:04:18,409 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffa918c540 (GtkDialog at 0x14451150)>
2024-03-28 15:04:18,441 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-28 15:04:19,658 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 15:04:19,659 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M18'}
2024-03-28 15:04:30,295 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-28 15:04:30,326 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-28 15:04:30,979 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-28 15:05:28,334 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-03-28 15:08:35,518 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 15:08:35,580 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 15:10:52,725 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 15:10:52,726 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 15:10:52,746 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 15:10:52,747 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 15:10:53,006 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 15:10:53,017 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 15:10:53,032 [job_status.py:update_file_metadata()] - Update Metadata. File: retraction.gcode Size: 296879
2024-03-28 15:10:53,033 [job_status.py:show_file_thumbnail()] - retraction.gcode
2024-03-28 15:10:53,033 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-03-28 15:14:47,253 [screen.py:show_popup_message()] - error: Communication timeout during homing probe
2024-03-28 15:14:47,672 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 15:14:47,672 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 15:14:47,690 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'error'
2024-03-28 15:15:00,807 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SDCARD_RESET_FILE
2024-03-28 15:15:00,810 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-28 15:15:00,812 [job_status.py:restart()] - Starting print: retraction.gcode
2024-03-28 15:15:00,812 [job_status.py:new_print()] - reseting progress
2024-03-28 15:15:00,966 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 15:15:00,966 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 15:15:00,980 [job_status.py:set_state()] - Changing job_status state from 'error' to 'printing'
2024-03-28 15:15:01,042 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 15:15:01,043 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 15:15:01,252 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 15:15:01,262 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 15:15:01,278 [job_status.py:update_file_metadata()] - Update Metadata. File: retraction.gcode Size: 296879
2024-03-28 15:15:01,279 [job_status.py:show_file_thumbnail()] - retraction.gcode
2024-03-28 15:15:01,279 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-03-28 15:19:27,659 [screen.py:show_popup_message()] - error: // Unknown command:"T0"
2024-03-28 15:38:03,460 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 15:38:03,460 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 15:38:03,480 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-28 15:41:21,823 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffa86e5b80 (GtkDialog at 0x1445ab80)>
2024-03-28 15:41:21,887 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-28 15:41:24,093 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-28 15:41:24,094 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-28 15:41:24,097 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-28 15:41:24,098 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 15:41:24,109 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 15:41:24,111 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 15:41:24,112 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 15:41:24,215 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 15:41:27,187 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 15:41:27,220 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 15:41:27,239 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 15:41:27,240 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 15:41:27,241 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 15:41:27,273 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 15:41:27,316 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-0.800'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic', 'zero_reference_position': '175, 175'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '58.437', 'pid_ki': '2.347', 'pid_kd': '363.769'}, 'firmware_retraction': {'retract_length': '0.8', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.005000, -0.000000, -0.000000, -0.000000, -0.017500\n-0.007500, -0.007500, -0.010000, -0.002500, -0.047500\n-0.005000, -0.000000, 0.000000, -0.010000, -0.045000\n-0.012500, -0.015000, 0.000000, -0.020000, -0.035000\n0.047500, 0.047500, 0.040000, 0.040000, 0.017500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '310.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.8, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro filament_load': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.005, -0.0, -0.0, -0.0, -0.0175], [-0.0075, -0.0075, -0.01, -0.0025, -0.0475], [-0.005, -0.0, 0.0, -0.01, -0.045], [-0.0125, -0.015, 0.0, -0.02, -0.035], [0.0475, 0.0475, 0.04, 0.04, 0.0175]], 'min_x': 40.0, 'max_x': 310.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 58.437, 'pid_ki': 2.347, 'pid_kd': 363.769, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 0.8, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 15:41:27,321 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 15:41:27,323 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-28 15:41:27,323 [printer.py:reinit()] - # Extruders: 1
2024-03-28 15:41:27,324 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 15:41:27,324 [printer.py:reinit()] - # Fans: 4
2024-03-28 15:41:27,324 [printer.py:reinit()] - # Output pins: 0
2024-03-28 15:41:27,324 [printer.py:reinit()] - # Leds: 1
2024-03-28 15:41:27,324 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 15:41:27,352 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 15:41:27,355 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-28 15:41:27,672 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-28 15:41:27,672 [screen.py:init_klipper()] - Printer initialized
2024-03-28 15:41:27,673 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-28 15:41:27,673 [printer.py:change_state()] - Adding callback for state: startup
2024-03-28 15:41:29,548 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-28 15:41:29,549 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 15:41:29,551 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 15:41:29,557 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 15:41:29,557 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 15:41:29,681 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 15:41:29,697 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 15:41:29,706 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 15:41:29,716 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 15:41:29,771 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 15:41:29,773 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 15:41:29,821 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-28 15:41:29,824 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 15:41:29,845 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 15:44:32,005 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 15:44:32,005 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 15:44:32,023 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 15:44:32,023 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 15:44:32,262 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 15:44:32,274 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 15:44:32,294 [job_status.py:update_file_metadata()] - Update Metadata. File: Benchy.gcode Size: 5131573
2024-03-28 15:44:32,305 [job_status.py:show_file_thumbnail()] - Benchy.gcode
2024-03-28 15:53:45,983 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 15:53:46,708 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 15:53:46,709 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 15:53:46,709 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 15:53:46,715 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 15:53:49,120 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 15:53:49,120 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 15:53:49,138 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-03-28 15:53:58,460 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-28 15:53:58,462 [job_status.py:restart()] - Starting print: Benchy.gcode
2024-03-28 15:53:58,463 [job_status.py:new_print()] - reseting progress
2024-03-28 15:53:58,674 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 15:53:58,674 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 15:53:58,689 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 15:53:58,697 [job_status.py:update_file_metadata()] - Update Metadata. File: Benchy.gcode Size: 5131573
2024-03-28 15:53:58,707 [job_status.py:show_file_thumbnail()] - Benchy.gcode
2024-03-28 15:53:58,770 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 15:53:58,771 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 15:53:58,989 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 15:53:59,001 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 15:53:59,019 [job_status.py:update_file_metadata()] - Update Metadata. File: Benchy.gcode Size: 5131573
2024-03-28 15:53:59,031 [job_status.py:show_file_thumbnail()] - Benchy.gcode
2024-03-28 15:58:17,731 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 15:58:17,843 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 15:58:18,721 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-28 15:58:19,115 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 15:58:19,784 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 15:58:20,124 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 15:58:20,508 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 15:58:20,850 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 15:58:21,212 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 15:58:21,842 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 15:58:22,970 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 15:58:23,482 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 15:58:25,764 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 15:58:29,591 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 15:58:32,818 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 15:58:34,629 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 15:58:40,802 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 15:58:50,797 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 15:58:54,866 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 15:58:56,906 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 15:59:00,138 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 15:59:09,604 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 15:59:09,678 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 15:59:09,706 [job_status.py:update_file_metadata()] - Update Metadata. File: Benchy.gcode Size: 5131573
2024-03-28 15:59:09,723 [job_status.py:show_file_thumbnail()] - Benchy.gcode
2024-03-28 15:59:10,851 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 15:59:11,485 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 15:59:11,486 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 15:59:11,487 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 15:59:11,494 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 15:59:14,383 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 15:59:14,384 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 15:59:14,400 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-03-28 15:59:25,450 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-28 15:59:25,451 [job_status.py:restart()] - Starting print: Benchy.gcode
2024-03-28 15:59:25,452 [job_status.py:new_print()] - reseting progress
2024-03-28 15:59:25,749 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 15:59:25,749 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 15:59:25,765 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 15:59:25,773 [job_status.py:update_file_metadata()] - Update Metadata. File: Benchy.gcode Size: 5131573
2024-03-28 15:59:25,783 [job_status.py:show_file_thumbnail()] - Benchy.gcode
2024-03-28 15:59:25,845 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 15:59:25,846 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 15:59:26,035 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 15:59:26,045 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 15:59:26,060 [job_status.py:update_file_metadata()] - Update Metadata. File: Benchy.gcode Size: 5131573
2024-03-28 15:59:26,070 [job_status.py:show_file_thumbnail()] - Benchy.gcode
2024-03-28 16:03:59,242 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 16:03:59,354 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 16:04:00,080 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 16:04:00,429 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 16:05:59,224 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 16:05:59,267 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 16:05:59,286 [job_status.py:update_file_metadata()] - Update Metadata. File: Benchy.gcode Size: 5131573
2024-03-28 16:05:59,296 [job_status.py:show_file_thumbnail()] - Benchy.gcode
2024-03-28 16:06:00,092 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 16:06:00,709 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 16:06:00,709 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 16:06:00,710 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 16:06:00,718 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 16:06:03,638 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 16:06:03,639 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 16:06:03,657 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-03-28 16:06:18,805 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-28 16:06:18,807 [job_status.py:restart()] - Starting print: Benchy.gcode
2024-03-28 16:06:18,807 [job_status.py:new_print()] - reseting progress
2024-03-28 16:06:18,994 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 16:06:18,995 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 16:06:19,010 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 16:06:19,018 [job_status.py:update_file_metadata()] - Update Metadata. File: Benchy.gcode Size: 5131573
2024-03-28 16:06:19,028 [job_status.py:show_file_thumbnail()] - Benchy.gcode
2024-03-28 16:06:19,091 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 16:06:19,091 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 16:06:19,283 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 16:06:19,293 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 16:06:19,307 [job_status.py:update_file_metadata()] - Update Metadata. File: Benchy.gcode Size: 5131573
2024-03-28 16:06:19,317 [job_status.py:show_file_thumbnail()] - Benchy.gcode
2024-03-28 16:06:20,082 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 16:06:20,190 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 16:06:21,129 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 16:06:21,473 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 16:14:44,368 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 16:14:44,454 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 16:14:44,493 [job_status.py:update_file_metadata()] - Update Metadata. File: Benchy.gcode Size: 5131573
2024-03-28 16:14:44,515 [job_status.py:show_file_thumbnail()] - Benchy.gcode
2024-03-28 16:14:45,286 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 16:14:45,946 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 16:14:45,946 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 16:14:45,947 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 16:14:45,955 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 16:14:48,804 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 16:14:48,805 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 16:14:48,824 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-03-28 16:15:13,407 [job_status.py:close_panel()] - Closing job_status panel
2024-03-28 16:15:13,408 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 16:15:13,414 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 16:15:13,415 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 16:15:13,550 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 16:15:13,565 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 16:15:13,574 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 16:15:13,584 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 16:15:13,649 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 16:15:15,193 [screen.py:_load_panel()] - Loading panel: extrude
2024-03-28 16:15:15,363 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-03-28 16:15:16,553 [screen.py:show_popup_message()] - error: Macro UNLOAD_FILAMENT not found
2024-03-28 16:15:19,671 [extrude.py:change_distance()] - ### Distance 25
2024-03-28 16:15:20,247 [extrude.py:change_speed()] - ### Speed 5
2024-03-28 16:15:23,191 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-03-28 16:15:23,194 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F300'}
2024-03-28 16:15:26,599 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-03-28 16:15:26,601 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F300'}
2024-03-28 16:15:34,599 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-03-28 16:15:34,601 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F300'}
2024-03-28 16:16:02,375 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 16:16:02,416 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 16:16:06,399 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-03-28 16:16:06,400 [screen.py:_go_to_submenu()] - #### Menu __main
2024-03-28 16:16:06,418 [screen.py:_load_panel()] - Loading panel: menu
2024-03-28 16:16:06,892 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-03-28 16:16:06,904 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-03-28 16:16:06,945 [menu.py:arrangeMenuItems()] - X > more pins
2024-03-28 16:16:06,951 [menu.py:arrangeMenuItems()] - X > more power
2024-03-28 16:16:06,958 [menu.py:arrangeMenuItems()] - X > more camera
2024-03-28 16:16:06,969 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-03-28 16:16:06,987 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-03-28 16:16:09,394 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-03-28 16:16:09,487 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > gcode_macros
2024-03-28 16:16:14,354 [screen.py:show_popup_message()] - echo: PARK_HZ 
2024-03-28 16:16:14,372 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK_HZ'}
2024-03-28 17:03:40,756 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 17:03:40,757 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 17:03:40,804 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 17:03:40,805 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 17:03:41,042 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 17:03:41,054 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 17:03:41,076 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 17:03:41,087 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 17:08:58,854 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 17:08:59,665 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 17:08:59,666 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 17:08:59,667 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 17:08:59,674 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 17:13:41,510 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2024-03-28 17:13:41,510 [printer.py:change_state()] - Adding callback for state: paused
2024-03-28 17:13:41,516 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'paused'
2024-03-28 17:13:41,584 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 17:13:41,585 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 17:13:41,785 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 17:13:41,795 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2024-03-28 17:13:41,811 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 17:13:41,820 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 17:13:41,829 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 17:13:41,922 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2024-03-28 17:14:01,821 [printer.py:change_state()] - Changing state from 'paused' to 'ready'
2024-03-28 17:14:01,822 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 17:18:56,226 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 17:18:56,293 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 17:18:56,305 [job_status.py:set_state()] - Changing job_status state from 'paused' to 'standby'
2024-03-28 18:03:03,681 [screen.py:show_popup_message()] - error: Must home before probe
2024-03-28 18:18:57,183 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-28 18:19:54,777 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-28 18:19:54,778 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-28 18:19:54,780 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-28 18:19:54,781 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 18:19:54,782 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-28 18:19:54,804 [screen.py:wake_screen()] - Screen wake up
2024-03-28 18:19:54,870 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 18:19:54,871 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 18:19:54,936 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 18:19:58,183 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 18:19:58,203 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 18:19:58,220 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 18:19:58,221 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 18:19:58,221 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 18:19:58,242 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 18:19:58,419 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 18:19:58,422 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 18:19:58,422 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-28 18:19:58,422 [printer.py:reinit()] - # Extruders: 0
2024-03-28 18:19:58,423 [printer.py:reinit()] - # Temperature devices: 0
2024-03-28 18:19:58,423 [printer.py:reinit()] - # Fans: 0
2024-03-28 18:19:58,423 [printer.py:reinit()] - # Output pins: 0
2024-03-28 18:19:58,423 [printer.py:reinit()] - # Leds: 0
2024-03-28 18:19:58,424 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 18:19:58,446 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 18:19:58,449 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-03-28 18:19:58,679 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-28 18:19:58,680 [screen.py:init_klipper()] - Printer initialized
2024-03-28 18:19:58,680 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-03-28 18:19:58,681 [printer.py:change_state()] - Adding callback for state: error
2024-03-28 18:19:58,686 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 18:19:58,686 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 18:19:58,751 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 18:22:41,374 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-03-28 18:22:41,375 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-28 18:22:41,376 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-28 18:22:41,377 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 18:22:41,379 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 18:22:41,380 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 18:22:41,445 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 18:22:45,183 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 18:22:45,205 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 18:22:45,224 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 18:22:45,225 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 18:22:45,225 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 18:22:45,246 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 18:22:45,288 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume while heat soaking results in the soaking phase being skipped, any complete callback is run', 'rename_existing': '_HEAT_SOAK__BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\nHEAT_SOAK_RESUME ON_RESUME=_HEAT_SOAK__BASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-0.800'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic', 'zero_reference_position': '175, 175'}, 'gcode_macro HEAT_SOAK': {'description': 'Wait for a temperature sensor to reach thermal equilibrium', 'variable_last_temp': '0', 'variable_last_soak_temp_rate': 'None', 'variable_temp_history': 'None', 'variable_smoothed_temp_history': 'None', 'variable_stage': '"done"', 'variable_total_time_elapsed': '0', 'variable_soak_time_remaining': '30', 'variable_check_interval': '1', 'variable_heating_report_interval': '2', 'variable_soaking_report_interval': '5', 'variable_heater_sensor': 'None', 'variable_soaker_sensor': 'None', 'variable_target_temp': '0.0', 'variable_min_soak_temp': '0', 'variable_target_rate': '0.3', 'variable_complete': 'None', 'variable_cancel': 'None', 'variable_temp_smooth_time': '4.0', 'variable_rate_smooth_time': '20.0', 'variable_resume_trigger': 'False', 'variable_was_print_active': 'False', 'gcode': '\n{ action_respond_info( "Heat Soak starting" )}\n\n\n{% set SOAKER = params.SOAKER | string %}\n{% set RATE = params.RATE | default(0.3) | float %}\n{% set SOAK_TEMP = params.SOAK_TEMP | default(0.0) | float %}\n{% set HEATER = (params.HEATER | string) %}\n{% set TARGET = params.TARGET | default(0) | float %}\n{% set TIMEOUT = (params.TIMEOUT | default(30) | int) * 60 %}\n{% set TEMP_SMOOTH = params.TEMP_SMOOTH | default(4.0) | float %}\n{% set RATE_SMOOTH = params.RATE_SMOOTH | default(20) | float %}\n{% set COMPLETE  = (params.COMPLETE | string) %}\n{% set CANCEL  = (params.CANCEL | string) %}\n{% set HEATING_REPORT_INTERVAL  = params.HEATING_REPORT_INTERVAL | default(2) | int %}\n{% set SOAKING_REPORT_INTERVAL  = params.SOAKING_REPORT_INTERVAL | default(5) | int %}\n\n\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=heater_sensor           VALUE="{HEATER | pprint}"\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp             VALUE={TARGET}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=min_soak_temp           VALUE={SOAK_TEMP}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soaker_sensor           VALUE="{SOAKER | pprint}"\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_rate             VALUE={RATE}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining     VALUE={TIMEOUT}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=complete                VALUE="\'{COMPLETE}\'"\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=cancel                  VALUE="\'{CANCEL}\'"\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=temp_smooth_time        VALUE={TEMP_SMOOTH}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=rate_smooth_time        VALUE={RATE_SMOOTH}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=heating_report_interval VALUE={HEATING_REPORT_INTERVAL}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soaking_report_interval VALUE={SOAKING_REPORT_INTERVAL}\n\n\n{% set soak_temp = printer[SOAKER].temperature %}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=last_temp               VALUE={soak_temp}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=temp_history            VALUE="{[soak_temp] | pprint}"\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=smoothed_temp_history   VALUE="{[] | pprint}"\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed      VALUE=0\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=last_soak_temp_rate     VALUE=None\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=check_interval          VALUE=1.0\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=resume_trigger          VALUE=False\n{% set is_print_active = printer[\'virtual_sdcard\'].is_active or printer[\'virtual_sdcard\'].file_position != 0.0 %}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=was_print_active        VALUE={is_print_active}\n\n\n{% if (HEATER and TARGET != 0.0) %}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="\'heating\'"\nSET_HEATER_TEMPERATURE HEATER={HEATER} TARGET={TARGET}\n{% else %}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="\'soaking\'"\n{% endif %}\n\n\n{% if is_print_active %}\nPAUSE\n{% endif %}\n\nUPDATE_DELAYED_GCODE ID=_heat_soaker DURATION={check_interval}'}, 'gcode_macro STOP_HEAT_SOAK': {'description': 'stops heat soak activity without running any callbacks', 'gcode': '\nUPDATE_DELAYED_GCODE ID=_heat_soaker DURATION=0\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="\'done\'"'}, 'gcode_macro CANCEL_HEAT_SOAK': {'description': 'cancels an in-progress HEAT_SOAK cycle and runs the cancel callback', 'gcode': '\n\n{% set heat_soak = printer[\'gcode_macro HEAT_SOAK\'] %}\n{% set stage = heat_soak.stage %}\n{% if stage in ("heating", "soaking") %}\nSTOP_HEAT_SOAK\n{% if heat_soak.cancel %}\n{heat_soak.cancel}\n{% endif %}\n{% endif %}'}, 'gcode_macro HEAT_SOAK_RESUME': {'description': 'Resume while heat soaking results in the soaking phase being skipped, any complete callback is run', 'gcode': '\n{% set ON_RESUME = (params.ON_RESUME | default("_HEAT_SOAK__BASE_RESUME")) | string %}\n{% set heat_soak = printer[\'gcode_macro HEAT_SOAK\'] %}\n{% set stage = heat_soak.stage %}\n{% if stage == "heating"  %}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=resume_trigger VALUE=True\n{% elif stage == "soaking" %}\nSTOP_HEAT_SOAK\n{% if heat_soak.complete %}\n{heat_soak.complete}\n{% endif %}\n{ON_RESUME} {% for p in params %}{\'%s=%s \' % (p, params[p])}{% endfor %}\n{% else %}\n{ON_RESUME} {% for p in params %}{\'%s=%s \' % (p, params[p])}{% endfor %}\n{% endif %}'}, 'delayed_gcode _heat_soaker': {'gcode': '\n{% set heat_soak = printer[\'gcode_macro HEAT_SOAK\'] %}\n\n\n\n\n{% set file_position_is_zero = (printer[\'virtual_sdcard\'].file_position == 0.0 )%}\n{% if heat_soak.was_print_active and file_position_is_zero %}\nSTOP_HEAT_SOAK\n{action_respond_info("HEAT_SOAK aborted. Detected a change in virtual_sdcard print state. Call STOP_HEAT_SOAK from CANCEL_PRINT to stop seeing this error message.")}\n{% endif %}\n\n\n{% if not file_position_is_zero and not printer[\'pause_resume\'].is_paused %}\nSTOP_HEAT_SOAK\n{action_respond_info("HEAT_SOAK aborted. Print is no longer paused. Call STOP_HEAT_SOAK or HEAT_SOAK_RESUME from your RESUME macro to stop seeing this error message.")}\n{% endif %}\n\n\n{% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }\n\n{% set soaker_sensor = printer[heat_soak.soaker_sensor] %}\n{% set soak_temp = soaker_sensor.temperature %}\n{% if heat_soak.heater_sensor %}\n{% set heater_sensor = printer[heat_soak.heater_sensor] %}\n{% set heater_temp = heater_sensor.temperature | round(1) %}\n{% endif %}\n{% set stage = heat_soak.stage %}\n\n\n{% set temp_history = heat_soak.temp_history %}\n{% set smoothed_temp_history = heat_soak.smoothed_temp_history %}\n{% set temp_diff = soak_temp - (temp_history | last) %}\n{% set _ = temp_history.append(soak_temp) %}\n{% set soak_temp_smoothed = None %}\n{% set slope = None %}\n{% if (temp_history | length) > heat_soak.temp_smooth_time %}\n{% set temp_history = temp_history[1:] %}\n\n{% set soak_temp_smoothed = ((temp_history | sum) / (temp_history | length)) %}\n\n{% set _ = smoothed_temp_history.append(soak_temp_smoothed) %}\n\n{% set soak_temp_smoothed = soak_temp_smoothed | round(3) %}\n\n{% if (smoothed_temp_history | length) > heat_soak.rate_smooth_time %}\n{% set smoothed_temp_history = smoothed_temp_history[1:] %}\n\n\n\n\n{% set count = (smoothed_temp_history | length) %}\n{% set times = range(0, count, 1) %}\n{% set x_sum = (times | sum) | float %}\n{% set y_sum = (smoothed_temp_history | sum) | float %}\n\n\n{% set xx_sum_arr = [] %}\n{% set xy_sum_arr = [] %}\n{% for i in times %}\n{% set x = times[i] %}\n{% set y = smoothed_temp_history[i] %}\n{% set _ = xx_sum_arr.append(x * x) %}\n{% set _ = xy_sum_arr.append(x * y) %}\n{% endfor %}\n{% set xx_sum = (xx_sum_arr | sum) | float %}\n{% set xy_sum = (xy_sum_arr | sum) | float %}\n\n{% set slope = (60.0 * ((count | float * xy_sum) - (x_sum * y_sum)) / ((count | float * xx_sum) - (x_sum * x_sum))) | round(3) %}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=temp_history VALUE="{(temp_history | pprint | replace("\\n", ""))}"\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=smoothed_temp_history VALUE="{(smoothed_temp_history | pprint | replace("\\n", ""))}"\n\n\n{% if stage == "heating" %}\n{% if heater_temp < heat_soak.target_temp %}\n{% if total_time_elapsed % heat_soak.heating_report_interval == 0 %}\n{% set message = "Heating -- %.1fC / %.1fC -- %.1fm elapsed" % (heater_temp, heat_soak.target_temp, total_time_elapsed / 60.0) %}\nM117 {message}\n{action_respond_info(message)}\n{% endif %}\n{% else %}\n{action_respond_info("Heating completed after ~%.1fm, starting heat soak phase." % (total_time_elapsed / 60.0))}\n\n{% set stage = "done" if heat_soak.resume_trigger else "soaking" %}\n\n{% set total_time_elapsed = 0 %}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }\n{% endif %}\n{% endif %}\n\n\n{% if stage == "soaking" %}\n\n{% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }\n\n\n{% if soak_time_remaining <= 0 %}\n{action_respond_info("Heat soak timed out after ~%.1fm" % (total_time_elapsed / 60.0))}\n{% set stage = "cancel" %}\n\n{% elif slope is none or soak_temp_smoothed is none %}\n{% if total_time_elapsed % heat_soak.soaking_report_interval == 0 %}\n\n{% set message = "Soaking -- gathering data -- %.1fm remaining" % (soak_time_remaining / 60.0) %}\nM117 { message }\n{action_respond_info(message)}\n{% endif %}\n\n{% elif (slope > heat_soak.target_rate) or (heat_soak.min_soak_temp > 0 and soak_temp_smoothed < heat_soak.min_soak_temp) %}\n{% if total_time_elapsed % heat_soak.soaking_report_interval == 0 %}\n{% set format_vars = [\nsoak_temp_smoothed | float,\n(heat_soak.min_soak_temp | float | round(0) | string) if (heat_soak.min_soak_temp > 0) else "--",\nslope,\nheat_soak.target_rate,\nsoak_time_remaining / 60.0\n] %}\n{% set message = "Soaking -- temp: {0:.1f}C / {1}C -- rate: {2:.3f}C/m / {3:.3f}C/m -- {4:.1f}m remaining".format(*format_vars) %}\nM117 { message }\n{action_respond_info(message)}\n{% endif %}\n\n{% else %}\n{action_respond_info("Heat soak complete after ~%.1fm at %.3fC/m / %.1fC" % (total_time_elapsed / 60.0, slope, soak_temp))}\n{% set stage = "done" %}\n{% endif %}\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="\'{stage}\'"\n\n{% if stage in ("done", "cancel") %}\nSTOP_HEAT_SOAK\n{% if stage == "cancel" %}\n{% if heat_soak.cancel %}\n{heat_soak.cancel}\n{% elif printer[\'virtual_sdcard\'].is_active %}\nCANCEL_PRINT\n{% endif %}\n{% else %}\n{% if heat_soak.complete %}\n{heat_soak.complete}\n{% endif %}\n{% if printer[\'pause_resume\'].is_paused  %}\nRESUME\n{% endif %}\n{% endif %}\n{% else %}\n\nUPDATE_DELAYED_GCODE ID=_heat_soaker DURATION={ heat_soak.check_interval }\n\nG4 P1\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="\'{stage}\'"'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '58.437', 'pid_ki': '2.347', 'pid_kd': '363.769'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_WARMUP': {'description': 'Perform initial homing and heating tasks', 'gcode': "\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP | default(190) | float %}\n{% set BED_TEMP = params.BED_TEMP | default(60) | float %}\n\n\nM104 S{EXTRUDER_TEMP * 0.75}\nM140 S{BED_TEMP}\nG32\n\n\nHEAT_SOAK HEATER='heater_bed' TARGET={BED_TEMP} SOAKER='temperature_sensor top_bed'"}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.005000, -0.000000, -0.000000, -0.000000, -0.017500\n-0.007500, -0.007500, -0.010000, -0.002500, -0.047500\n-0.005000, -0.000000, 0.000000, -0.010000, -0.045000\n-0.012500, -0.015000, 0.000000, -0.020000, -0.035000\n0.047500, 0.047500, 0.040000, 0.040000, 0.017500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '310.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\nHEAT_SOAK_RESUME ON_RESUME=_HEAT_SOAK__BASE_RESUME', 'rename_existing': '_HEAT_SOAK__BASE_RESUME', 'description': 'Resume while heat soaking results in the soaking phase being skipped, any complete callback is run', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.8, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro filament_load': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.005, -0.0, -0.0, -0.0, -0.0175], [-0.0075, -0.0075, -0.01, -0.0025, -0.0475], [-0.005, -0.0, 0.0, -0.01, -0.045], [-0.0125, -0.015, 0.0, -0.02, -0.035], [0.0475, 0.0475, 0.04, 0.04, 0.0175]], 'min_x': 40.0, 'max_x': 310.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro heat_soak': {'gcode': '\n{ action_respond_info( "Heat Soak starting" )}\n\n\n{% set SOAKER = params.SOAKER | string %}\n{% set RATE = params.RATE | default(0.3) | float %}\n{% set SOAK_TEMP = params.SOAK_TEMP | default(0.0) | float %}\n{% set HEATER = (params.HEATER | string) %}\n{% set TARGET = params.TARGET | default(0) | float %}\n{% set TIMEOUT = (params.TIMEOUT | default(30) | int) * 60 %}\n{% set TEMP_SMOOTH = params.TEMP_SMOOTH | default(4.0) | float %}\n{% set RATE_SMOOTH = params.RATE_SMOOTH | default(20) | float %}\n{% set COMPLETE  = (params.COMPLETE | string) %}\n{% set CANCEL  = (params.CANCEL | string) %}\n{% set HEATING_REPORT_INTERVAL  = params.HEATING_REPORT_INTERVAL | default(2) | int %}\n{% set SOAKING_REPORT_INTERVAL  = params.SOAKING_REPORT_INTERVAL | default(5) | int %}\n\n\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=heater_sensor           VALUE="{HEATER | pprint}"\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp             VALUE={TARGET}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=min_soak_temp           VALUE={SOAK_TEMP}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soaker_sensor           VALUE="{SOAKER | pprint}"\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_rate             VALUE={RATE}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining     VALUE={TIMEOUT}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=complete                VALUE="\'{COMPLETE}\'"\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=cancel                  VALUE="\'{CANCEL}\'"\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=temp_smooth_time        VALUE={TEMP_SMOOTH}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=rate_smooth_time        VALUE={RATE_SMOOTH}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=heating_report_interval VALUE={HEATING_REPORT_INTERVAL}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soaking_report_interval VALUE={SOAKING_REPORT_INTERVAL}\n\n\n{% set soak_temp = printer[SOAKER].temperature %}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=last_temp               VALUE={soak_temp}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=temp_history            VALUE="{[soak_temp] | pprint}"\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=smoothed_temp_history   VALUE="{[] | pprint}"\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed      VALUE=0\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=last_soak_temp_rate     VALUE=None\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=check_interval          VALUE=1.0\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=resume_trigger          VALUE=False\n{% set is_print_active = printer[\'virtual_sdcard\'].is_active or printer[\'virtual_sdcard\'].file_position != 0.0 %}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=was_print_active        VALUE={is_print_active}\n\n\n{% if (HEATER and TARGET != 0.0) %}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="\'heating\'"\nSET_HEATER_TEMPERATURE HEATER={HEATER} TARGET={TARGET}\n{% else %}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="\'soaking\'"\n{% endif %}\n\n\n{% if is_print_active %}\nPAUSE\n{% endif %}\n\nUPDATE_DELAYED_GCODE ID=_heat_soaker DURATION={check_interval}', 'description': 'Wait for a temperature sensor to reach thermal equilibrium', 'variable_last_temp': '0', 'variable_last_soak_temp_rate': 'None', 'variable_temp_history': 'None', 'variable_smoothed_temp_history': 'None', 'variable_stage': '"done"', 'variable_total_time_elapsed': '0', 'variable_soak_time_remaining': '30', 'variable_check_interval': '1', 'variable_heating_report_interval': '2', 'variable_soaking_report_interval': '5', 'variable_heater_sensor': 'None', 'variable_soaker_sensor': 'None', 'variable_target_temp': '0.0', 'variable_min_soak_temp': '0', 'variable_target_rate': '0.3', 'variable_complete': 'None', 'variable_cancel': 'None', 'variable_temp_smooth_time': '4.0', 'variable_rate_smooth_time': '20.0', 'variable_resume_trigger': 'False', 'variable_was_print_active': 'False'}, 'gcode_macro stop_heat_soak': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_heat_soaker DURATION=0\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="\'done\'"', 'description': 'stops heat soak activity without running any callbacks'}, 'gcode_macro cancel_heat_soak': {'gcode': '\n\n{% set heat_soak = printer[\'gcode_macro HEAT_SOAK\'] %}\n{% set stage = heat_soak.stage %}\n{% if stage in ("heating", "soaking") %}\nSTOP_HEAT_SOAK\n{% if heat_soak.cancel %}\n{heat_soak.cancel}\n{% endif %}\n{% endif %}', 'description': 'cancels an in-progress HEAT_SOAK cycle and runs the cancel callback'}, 'gcode_macro heat_soak_resume': {'gcode': '\n{% set ON_RESUME = (params.ON_RESUME | default("_HEAT_SOAK__BASE_RESUME")) | string %}\n{% set heat_soak = printer[\'gcode_macro HEAT_SOAK\'] %}\n{% set stage = heat_soak.stage %}\n{% if stage == "heating"  %}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=resume_trigger VALUE=True\n{% elif stage == "soaking" %}\nSTOP_HEAT_SOAK\n{% if heat_soak.complete %}\n{heat_soak.complete}\n{% endif %}\n{ON_RESUME} {% for p in params %}{\'%s=%s \' % (p, params[p])}{% endfor %}\n{% else %}\n{ON_RESUME} {% for p in params %}{\'%s=%s \' % (p, params[p])}{% endfor %}\n{% endif %}', 'description': 'Resume while heat soaking results in the soaking phase being skipped, any complete callback is run'}, 'delayed_gcode _heat_soaker': {'gcode': '\n{% set heat_soak = printer[\'gcode_macro HEAT_SOAK\'] %}\n\n\n\n\n{% set file_position_is_zero = (printer[\'virtual_sdcard\'].file_position == 0.0 )%}\n{% if heat_soak.was_print_active and file_position_is_zero %}\nSTOP_HEAT_SOAK\n{action_respond_info("HEAT_SOAK aborted. Detected a change in virtual_sdcard print state. Call STOP_HEAT_SOAK from CANCEL_PRINT to stop seeing this error message.")}\n{% endif %}\n\n\n{% if not file_position_is_zero and not printer[\'pause_resume\'].is_paused %}\nSTOP_HEAT_SOAK\n{action_respond_info("HEAT_SOAK aborted. Print is no longer paused. Call STOP_HEAT_SOAK or HEAT_SOAK_RESUME from your RESUME macro to stop seeing this error message.")}\n{% endif %}\n\n\n{% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }\n\n{% set soaker_sensor = printer[heat_soak.soaker_sensor] %}\n{% set soak_temp = soaker_sensor.temperature %}\n{% if heat_soak.heater_sensor %}\n{% set heater_sensor = printer[heat_soak.heater_sensor] %}\n{% set heater_temp = heater_sensor.temperature | round(1) %}\n{% endif %}\n{% set stage = heat_soak.stage %}\n\n\n{% set temp_history = heat_soak.temp_history %}\n{% set smoothed_temp_history = heat_soak.smoothed_temp_history %}\n{% set temp_diff = soak_temp - (temp_history | last) %}\n{% set _ = temp_history.append(soak_temp) %}\n{% set soak_temp_smoothed = None %}\n{% set slope = None %}\n{% if (temp_history | length) > heat_soak.temp_smooth_time %}\n{% set temp_history = temp_history[1:] %}\n\n{% set soak_temp_smoothed = ((temp_history | sum) / (temp_history | length)) %}\n\n{% set _ = smoothed_temp_history.append(soak_temp_smoothed) %}\n\n{% set soak_temp_smoothed = soak_temp_smoothed | round(3) %}\n\n{% if (smoothed_temp_history | length) > heat_soak.rate_smooth_time %}\n{% set smoothed_temp_history = smoothed_temp_history[1:] %}\n\n\n\n\n{% set count = (smoothed_temp_history | length) %}\n{% set times = range(0, count, 1) %}\n{% set x_sum = (times | sum) | float %}\n{% set y_sum = (smoothed_temp_history | sum) | float %}\n\n\n{% set xx_sum_arr = [] %}\n{% set xy_sum_arr = [] %}\n{% for i in times %}\n{% set x = times[i] %}\n{% set y = smoothed_temp_history[i] %}\n{% set _ = xx_sum_arr.append(x * x) %}\n{% set _ = xy_sum_arr.append(x * y) %}\n{% endfor %}\n{% set xx_sum = (xx_sum_arr | sum) | float %}\n{% set xy_sum = (xy_sum_arr | sum) | float %}\n\n{% set slope = (60.0 * ((count | float * xy_sum) - (x_sum * y_sum)) / ((count | float * xx_sum) - (x_sum * x_sum))) | round(3) %}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=temp_history VALUE="{(temp_history | pprint | replace("\\n", ""))}"\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=smoothed_temp_history VALUE="{(smoothed_temp_history | pprint | replace("\\n", ""))}"\n\n\n{% if stage == "heating" %}\n{% if heater_temp < heat_soak.target_temp %}\n{% if total_time_elapsed % heat_soak.heating_report_interval == 0 %}\n{% set message = "Heating -- %.1fC / %.1fC -- %.1fm elapsed" % (heater_temp, heat_soak.target_temp, total_time_elapsed / 60.0) %}\nM117 {message}\n{action_respond_info(message)}\n{% endif %}\n{% else %}\n{action_respond_info("Heating completed after ~%.1fm, starting heat soak phase." % (total_time_elapsed / 60.0))}\n\n{% set stage = "done" if heat_soak.resume_trigger else "soaking" %}\n\n{% set total_time_elapsed = 0 %}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }\n{% endif %}\n{% endif %}\n\n\n{% if stage == "soaking" %}\n\n{% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }\n\n\n{% if soak_time_remaining <= 0 %}\n{action_respond_info("Heat soak timed out after ~%.1fm" % (total_time_elapsed / 60.0))}\n{% set stage = "cancel" %}\n\n{% elif slope is none or soak_temp_smoothed is none %}\n{% if total_time_elapsed % heat_soak.soaking_report_interval == 0 %}\n\n{% set message = "Soaking -- gathering data -- %.1fm remaining" % (soak_time_remaining / 60.0) %}\nM117 { message }\n{action_respond_info(message)}\n{% endif %}\n\n{% elif (slope > heat_soak.target_rate) or (heat_soak.min_soak_temp > 0 and soak_temp_smoothed < heat_soak.min_soak_temp) %}\n{% if total_time_elapsed % heat_soak.soaking_report_interval == 0 %}\n{% set format_vars = [\nsoak_temp_smoothed | float,\n(heat_soak.min_soak_temp | float | round(0) | string) if (heat_soak.min_soak_temp > 0) else "--",\nslope,\nheat_soak.target_rate,\nsoak_time_remaining / 60.0\n] %}\n{% set message = "Soaking -- temp: {0:.1f}C / {1}C -- rate: {2:.3f}C/m / {3:.3f}C/m -- {4:.1f}m remaining".format(*format_vars) %}\nM117 { message }\n{action_respond_info(message)}\n{% endif %}\n\n{% else %}\n{action_respond_info("Heat soak complete after ~%.1fm at %.3fC/m / %.1fC" % (total_time_elapsed / 60.0, slope, soak_temp))}\n{% set stage = "done" %}\n{% endif %}\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="\'{stage}\'"\n\n{% if stage in ("done", "cancel") %}\nSTOP_HEAT_SOAK\n{% if stage == "cancel" %}\n{% if heat_soak.cancel %}\n{heat_soak.cancel}\n{% elif printer[\'virtual_sdcard\'].is_active %}\nCANCEL_PRINT\n{% endif %}\n{% else %}\n{% if heat_soak.complete %}\n{heat_soak.complete}\n{% endif %}\n{% if printer[\'pause_resume\'].is_paused  %}\nRESUME\n{% endif %}\n{% endif %}\n{% else %}\n\nUPDATE_DELAYED_GCODE ID=_heat_soaker DURATION={ heat_soak.check_interval }\n\nG4 P1\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="\'{stage}\'"', 'initial_duration': 0.0}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 58.437, 'pid_ki': 2.347, 'pid_kd': 363.769, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_warmup': {'gcode': "\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP | default(190) | float %}\n{% set BED_TEMP = params.BED_TEMP | default(60) | float %}\n\n\nM104 S{EXTRUDER_TEMP * 0.75}\nM140 S{BED_TEMP}\nG32\n\n\nHEAT_SOAK HEATER='heater_bed' TARGET={BED_TEMP} SOAKER='temperature_sensor top_bed'", 'description': 'Perform initial homing and heating tasks'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 18:22:45,293 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 18:22:45,295 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-28 18:22:45,295 [printer.py:reinit()] - # Extruders: 1
2024-03-28 18:22:45,296 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 18:22:45,296 [printer.py:reinit()] - # Fans: 4
2024-03-28 18:22:45,296 [printer.py:reinit()] - # Output pins: 0
2024-03-28 18:22:45,296 [printer.py:reinit()] - # Leds: 1
2024-03-28 18:22:45,296 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 18:22:45,322 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 18:22:45,325 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-28 18:22:45,668 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-28 18:22:45,669 [screen.py:init_klipper()] - Printer initialized
2024-03-28 18:22:45,669 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-28 18:22:45,670 [printer.py:change_state()] - Adding callback for state: startup
2024-03-28 18:22:47,019 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-28 18:22:47,019 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 18:22:47,022 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 18:22:47,027 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 18:22:47,028 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 18:22:47,154 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 18:22:47,170 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 18:22:47,179 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 18:22:47,190 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 18:22:47,248 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 18:22:47,250 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 18:22:47,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-28 18:22:47,303 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 18:22:47,324 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 18:22:56,287 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro HEAT_SOAK:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute ''
2024-03-28 18:24:50,416 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-28 18:24:50,417 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-28 18:24:50,418 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-28 18:24:50,419 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 18:24:50,424 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 18:24:50,424 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 18:24:50,490 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 18:24:54,182 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 18:24:54,200 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 18:24:54,217 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 18:24:54,218 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 18:24:54,218 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 18:24:54,239 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 18:24:54,285 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-0.800'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic', 'zero_reference_position': '175, 175'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '58.437', 'pid_ki': '2.347', 'pid_kd': '363.769'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.005000, -0.000000, -0.000000, -0.000000, -0.017500\n-0.007500, -0.007500, -0.010000, -0.002500, -0.047500\n-0.005000, -0.000000, 0.000000, -0.010000, -0.045000\n-0.012500, -0.015000, 0.000000, -0.020000, -0.035000\n0.047500, 0.047500, 0.040000, 0.040000, 0.017500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '310.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.8, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro filament_load': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.005, -0.0, -0.0, -0.0, -0.0175], [-0.0075, -0.0075, -0.01, -0.0025, -0.0475], [-0.005, -0.0, 0.0, -0.01, -0.045], [-0.0125, -0.015, 0.0, -0.02, -0.035], [0.0475, 0.0475, 0.04, 0.04, 0.0175]], 'min_x': 40.0, 'max_x': 310.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 58.437, 'pid_ki': 2.347, 'pid_kd': 363.769, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 18:24:54,292 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 18:24:54,293 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-28 18:24:54,294 [printer.py:reinit()] - # Extruders: 1
2024-03-28 18:24:54,294 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 18:24:54,294 [printer.py:reinit()] - # Fans: 4
2024-03-28 18:24:54,294 [printer.py:reinit()] - # Output pins: 0
2024-03-28 18:24:54,294 [printer.py:reinit()] - # Leds: 1
2024-03-28 18:24:54,294 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 18:24:54,322 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 18:24:54,325 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-28 18:24:54,639 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-28 18:24:54,639 [screen.py:init_klipper()] - Printer initialized
2024-03-28 18:24:54,640 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-28 18:24:54,640 [printer.py:change_state()] - Adding callback for state: startup
2024-03-28 18:24:55,766 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-28 18:24:55,767 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 18:24:55,770 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 18:24:55,780 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 18:24:55,781 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 18:24:55,924 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 18:24:55,939 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 18:24:55,949 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 18:24:55,958 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 18:24:56,016 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 18:24:56,022 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 18:24:56,067 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-28 18:24:56,070 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 18:24:56,093 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 18:29:42,966 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-28 18:29:42,967 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-28 18:29:42,968 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-28 18:29:42,969 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 18:29:42,973 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 18:29:42,974 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 18:29:43,041 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 18:29:46,184 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 18:29:46,204 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 18:29:46,223 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 18:29:46,223 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 18:29:46,224 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 18:29:46,248 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 18:29:46,299 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-0.800'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic', 'zero_reference_position': '175, 175'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '58.437', 'pid_ki': '2.347', 'pid_kd': '363.769'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.005000, -0.000000, -0.000000, -0.000000, -0.017500\n-0.007500, -0.007500, -0.010000, -0.002500, -0.047500\n-0.005000, -0.000000, 0.000000, -0.010000, -0.045000\n-0.012500, -0.015000, 0.000000, -0.020000, -0.035000\n0.047500, 0.047500, 0.040000, 0.040000, 0.017500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '310.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.8, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro filament_load': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.005, -0.0, -0.0, -0.0, -0.0175], [-0.0075, -0.0075, -0.01, -0.0025, -0.0475], [-0.005, -0.0, 0.0, -0.01, -0.045], [-0.0125, -0.015, 0.0, -0.02, -0.035], [0.0475, 0.0475, 0.04, 0.04, 0.0175]], 'min_x': 40.0, 'max_x': 310.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 58.437, 'pid_ki': 2.347, 'pid_kd': 363.769, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 18:29:46,306 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 18:29:46,308 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-28 18:29:46,308 [printer.py:reinit()] - # Extruders: 1
2024-03-28 18:29:46,309 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 18:29:46,310 [printer.py:reinit()] - # Fans: 4
2024-03-28 18:29:46,311 [printer.py:reinit()] - # Output pins: 0
2024-03-28 18:29:46,311 [printer.py:reinit()] - # Leds: 1
2024-03-28 18:29:46,312 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 18:29:46,343 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 18:29:46,347 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-28 18:29:46,652 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-28 18:29:46,653 [screen.py:init_klipper()] - Printer initialized
2024-03-28 18:29:46,653 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-28 18:29:46,654 [printer.py:change_state()] - Adding callback for state: startup
2024-03-28 18:29:48,276 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-28 18:29:48,276 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 18:29:48,279 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 18:29:48,284 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 18:29:48,285 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 18:29:48,409 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 18:29:48,425 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 18:29:48,434 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 18:29:48,444 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 18:29:48,500 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 18:29:48,502 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 18:29:48,554 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-28 18:29:48,560 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 18:29:48,580 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 18:41:35,349 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 18:41:35,477 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 18:41:37,948 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 18:41:37,957 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 18:41:37,980 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 50.000 [0.000]
2024-03-28 18:41:40,787 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 18:41:40,830 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 18:41:42,475 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 18:41:43,103 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 18:41:43,280 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-28 18:41:43,310 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-28 18:41:44,187 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-28 18:43:25,787 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 18:43:25,830 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 18:43:26,860 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 18:43:26,870 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 18:43:28,355 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 18:43:28,361 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 18:43:39,492 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 18:43:39,499 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 18:56:40,738 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 18:56:40,783 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 18:56:41,796 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 18:56:41,902 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-03-28 18:56:42,888 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 18:56:42,927 [temperature.py:add_device()] - Adding device: extruder
2024-03-28 18:56:42,943 [temperature.py:add_device()] - Adding device: heater_bed
2024-03-28 18:56:42,963 [temperature.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 18:56:42,983 [temperature.py:select_heater()] - Selecting extruder
2024-03-28 18:56:42,988 [temperature.py:select_heater()] - Selecting heater_bed
2024-03-28 18:56:43,048 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2024-03-28 18:56:47,954 [temperature.py:verify_max_temp()] - 200/300
2024-03-28 18:56:47,954 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S200
2024-03-28 18:57:51,258 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 18:57:51,329 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-03-28 18:57:53,357 [extrude.py:change_speed()] - ### Speed 5
2024-03-28 18:57:53,829 [extrude.py:change_distance()] - ### Distance 25
2024-03-28 18:57:54,354 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-03-28 18:57:54,355 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-03-28 18:58:01,494 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-03-28 18:58:01,496 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-03-28 18:58:03,275 [screen.py:_load_panel()] - Loading panel: shutdown
2024-03-28 18:58:03,329 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > shutdown
2024-03-28 18:58:04,570 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 18:58:04,667 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-03-28 18:58:07,620 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-03-28 18:58:07,622 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-03-28 18:58:14,081 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-03-28 18:58:14,083 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-03-28 18:58:34,954 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 18:58:35,020 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 18:58:36,740 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 18:58:36,768 [print.py:__init__()] - Thumbsize: 114.20689655172413
2024-03-28 18:58:36,778 [print.py:__init__()] - list
2024-03-28 18:58:36,789 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-03-28 18:58:36,821 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-03-28 18:58:37,115 [print.py:load_files()] - Loaded in 0.284 seconds
2024-03-28 18:58:41,127 [KlippyGtk.py:Dialog()] - Showing dialog Print First_Layer_Octo_0.2.gcode (width=800, height=480)
2024-03-28 18:58:41,866 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 18:58:41,867 [print.py:confirm_print_response()] - Starting print: First_Layer_Octo_0.2.gcode
2024-03-28 18:58:41,868 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-28 18:58:41,955 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 18:58:41,956 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 18:58:41,991 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 18:58:42,209 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 18:58:42,220 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 18:58:42,237 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 18:58:42,246 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 19:06:47,903 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 19:06:48,062 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 19:07:34,297 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-28 19:07:34,794 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-03-28 19:10:28,943 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 19:10:28,944 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 19:10:31,273 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 19:10:31,359 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 19:10:31,387 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-28 19:10:31,402 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Octo_0.2.gcode Size: 65635
2024-03-28 19:10:31,423 [job_status.py:show_file_thumbnail()] - First_Layer_Octo_0.2.gcode
2024-03-28 19:10:33,129 [printer.py:get_probe()] - Probe type: probe
2024-03-28 19:10:33,157 [KlippyGtk.py:Dialog()] - Showing dialog Save Z (width=800, height=480)
2024-03-28 19:10:33,987 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 19:10:33,988 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: Z_OFFSET_APPLY_PROBE
2024-03-28 19:10:33,989 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SAVE_CONFIG
2024-03-28 19:10:34,051 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffa924fe40 (GtkDialog at 0x1445c5f0)>
2024-03-28 19:10:34,083 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-28 19:10:35,172 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-28 19:10:35,173 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-28 19:10:35,175 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-28 19:10:35,175 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 19:10:35,184 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 19:10:35,185 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 19:10:35,186 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 19:10:35,256 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 19:10:38,186 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:10:38,208 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 19:10:38,226 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 19:10:38,227 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 19:10:38,228 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 19:10:38,335 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 19:10:38,380 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-0.750'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic', 'zero_reference_position': '175, 175'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '58.437', 'pid_ki': '2.347', 'pid_kd': '363.769'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.062500, -0.037500, -0.065000\n-0.070000, 0.000000, -0.067500\n-0.107500, -0.077500, -0.100000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '137.5', 'max_x': '212.5', 'min_y': '137.5', 'max_y': '212.5'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.75, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro filament_load': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0625, -0.0375, -0.065], [-0.07, 0.0, -0.0675], [-0.1075, -0.0775, -0.1]], 'min_x': 137.5, 'max_x': 212.5, 'min_y': 137.5, 'max_y': 212.5, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 58.437, 'pid_ki': 2.347, 'pid_kd': 363.769, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 19:10:38,386 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 19:10:38,388 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-28 19:10:38,388 [printer.py:reinit()] - # Extruders: 1
2024-03-28 19:10:38,388 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 19:10:38,389 [printer.py:reinit()] - # Fans: 4
2024-03-28 19:10:38,389 [printer.py:reinit()] - # Output pins: 0
2024-03-28 19:10:38,389 [printer.py:reinit()] - # Leds: 1
2024-03-28 19:10:38,389 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 19:10:38,416 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 19:10:38,419 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-28 19:10:38,739 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-28 19:10:38,739 [screen.py:init_klipper()] - Printer initialized
2024-03-28 19:10:38,740 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-28 19:10:38,740 [printer.py:change_state()] - Adding callback for state: startup
2024-03-28 19:10:40,615 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-28 19:10:40,615 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 19:10:40,618 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 19:10:40,623 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 19:10:40,624 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 19:10:40,758 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 19:10:40,775 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 19:10:40,786 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 19:10:40,797 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 19:10:40,857 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 19:10:40,859 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 19:10:40,913 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-28 19:10:40,916 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 19:10:40,936 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 19:10:42,934 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 19:10:42,991 [temperature.py:add_device()] - Adding device: extruder
2024-03-28 19:10:43,010 [temperature.py:add_device()] - Adding device: heater_bed
2024-03-28 19:10:43,029 [temperature.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 19:10:43,046 [temperature.py:select_heater()] - Selecting extruder
2024-03-28 19:10:43,049 [temperature.py:select_heater()] - Selecting heater_bed
2024-03-28 19:10:43,119 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-03-28 19:10:46,322 [temperature.py:verify_max_temp()] - 50/120
2024-03-28 19:10:46,322 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S50
2024-03-28 19:10:52,600 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 19:10:52,674 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 19:20:53,911 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffadbcb840 (GtkDialog at 0x140bbbe0)>
2024-03-28 19:20:53,948 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-28 19:24:58,262 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-03-28 19:24:58,262 [printer.py:change_state()] - Adding callback for state: shutdown
2024-03-28 19:24:58,273 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 19:24:58,282 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 19:24:58,284 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffffa8783ac0>>
2024-03-28 19:24:58,285 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 19:24:58,372 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 19:25:18,143 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2024-03-28 19:25:19,079 [KlippyWebsocket.py:restart()] - Sending printer.restart
2024-03-28 19:17:26,517 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-28 19:17:26,518 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-64-g1c9d82a
2024-03-28 19:17:26,519 [functions.py:log_start()] - Python version: 3.9
2024-03-28 19:17:26,786 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-28 19:17:26,788 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-03-28 19:17:26,811 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-28 19:17:26,815 [config.py:__init__()] - ====== Saved Def ======

[main]
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-03-28 19:17:26,817 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-28 19:17:26,957 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-03-28 19:17:26,957 [config.py:install_language()] - Using lang en
2024-03-28 19:17:26,989 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-28 19:17:26,993 [screen.py:__init__()] - Wayland: False Display name: :0
2024-03-28 19:17:26,998 [screen.py:__init__()] - Screen resolution: 800x480
2024-03-28 19:17:27,002 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-03-28 19:17:29,201 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-28 19:17:29,214 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-03-28 19:17:29,224 [screen.py:initial_connection()] - Default printer: None
2024-03-28 19:17:29,302 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-28 19:17:29,303 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-28 19:17:29,375 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 19:17:29,390 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-28 19:17:29,391 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:17:29,432 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-28 19:17:29,450 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-28 19:17:29,467 [_logging.py:info()] - Websocket connected
2024-03-28 19:17:29,468 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-28 19:17:29,569 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:17:29,587 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 19:17:29,604 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 19:17:29,605 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 19:17:29,606 [screen.py:init_klipper()] - Klipper not connected
2024-03-28 19:17:32,880 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:17:32,908 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 19:17:32,909 [screen.py:init_klipper()] - Klipper not connected
2024-03-28 19:17:35,881 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:17:35,903 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 19:17:35,904 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 19:17:35,930 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 19:17:35,976 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-0.750'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic', 'zero_reference_position': '175, 175'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '58.437', 'pid_ki': '2.347', 'pid_kd': '363.769'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.062500, -0.037500, -0.065000\n-0.070000, 0.000000, -0.067500\n-0.107500, -0.077500, -0.100000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '137.5', 'max_x': '212.5', 'min_y': '137.5', 'max_y': '212.5'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.75, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro filament_load': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0625, -0.0375, -0.065], [-0.07, 0.0, -0.0675], [-0.1075, -0.0775, -0.1]], 'min_x': 137.5, 'max_x': 212.5, 'min_y': 137.5, 'max_y': 212.5, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 58.437, 'pid_ki': 2.347, 'pid_kd': 363.769, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 19:17:35,981 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 19:17:35,983 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-28 19:17:35,984 [printer.py:reinit()] - # Extruders: 1
2024-03-28 19:17:35,984 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 19:17:35,985 [printer.py:reinit()] - # Fans: 4
2024-03-28 19:17:35,985 [printer.py:reinit()] - # Output pins: 0
2024-03-28 19:17:35,986 [printer.py:reinit()] - # Leds: 1
2024-03-28 19:17:35,987 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 19:17:36,026 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 19:17:36,030 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-28 19:17:36,345 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-28 19:17:36,345 [screen.py:init_klipper()] - Printer initialized
2024-03-28 19:17:36,346 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-28 19:17:36,346 [printer.py:change_state()] - Adding callback for state: startup
2024-03-28 19:17:58,338 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-28 19:17:58,339 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 19:17:58,342 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 19:17:58,356 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-28 19:17:58,534 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 19:17:58,552 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 19:17:58,564 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 19:17:58,580 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 19:17:58,646 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 19:17:58,649 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 19:17:58,673 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-03-28 19:17:58,760 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-03-28 19:17:58,761 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 19:17:58,783 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-03-28 19:18:03,880 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 19:18:03,956 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-28 19:18:03,960 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 19:18:03,988 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 19:18:03,990 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 19:18:04,026 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-28 19:18:04,032 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 19:18:04,052 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 19:34:44,085 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-28 19:53:53,706 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 19:54:03,579 [screen.py:_load_panel()] - Loading panel: move
2024-03-28 19:54:03,792 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 19:54:04,606 [move.py:change_distance()] - ### Distance 50
2024-03-28 19:54:05,102 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 19:54:05,108 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 19:54:06,158 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 19:54:06,206 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 19:54:07,120 [screen.py:_load_panel()] - Loading panel: extrude
2024-03-28 19:54:07,222 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-03-28 19:54:09,049 [screen.py:show_popup_message()] - error: Macro UNLOAD_FILAMENT not found
2024-03-28 19:55:52,651 [screen.py:show_popup_message()] - error: Macro LOAD_FILAMENT not found
2024-03-28 20:16:07,703 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 20:16:07,704 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 20:16:07,719 [screen.py:_load_panel()] - Loading panel: job_status
2024-03-28 20:16:07,948 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 20:16:07,958 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 20:16:07,979 [job_status.py:update_file_metadata()] - Update Metadata. File: 2020 Extrusion Clips.gcode Size: 5002362
2024-03-28 20:16:07,996 [job_status.py:show_file_thumbnail()] - 2020 Extrusion Clips.gcode
2024-03-28 20:24:50,350 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 20:24:50,910 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 20:24:50,913 [screen.py:_load_panel()] - Loading panel: exclude
2024-03-28 20:24:50,933 [exclude.py:__init__()] - Excluded: []
2024-03-28 20:24:50,934 [exclude.py:__init__()] - Adding 2020_EXTRUSION_CABLE_ORGANIZER_WITH_TWIST_IN_T_NUT_STL_ID_0_COPY_0
2024-03-28 20:24:50,938 [exclude.py:__init__()] - Adding 2020_EXTRUSION_CABLE_ORGANIZER_WITH_TWIST_IN_T_NUT_STL_ID_1_COPY_0
2024-03-28 20:24:50,941 [exclude.py:__init__()] - Adding 2020_EXTRUSION_CABLE_ORGANIZER_WITH_TWIST_IN_T_NUT_STL_ID_2_COPY_0
2024-03-28 20:24:50,991 [screen.py:attach_panel()] - Current panel hierarchy: job_status > exclude
2024-03-28 20:24:50,995 [exclude.py:process_update()] - Excluded objects: []
2024-03-28 20:24:51,740 [objectmap.py:event_cb()] - Touched GRAPH 228,78 BED: 183,208
2024-03-28 20:24:51,741 [objectmap.py:event_cb()] - TOUCHED object it's: 2020_EXTRUSION_CABLE_ORGANIZER_WITH_TWIST_IN_T_NUT_STL_ID_2_COPY_0
2024-03-28 20:24:51,748 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffff9401cb40 (GtkDialog at 0x2c0b59e0)>
2024-03-28 20:24:51,780 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-28 20:24:52,543 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 20:24:52,543 [screen.py:_send_action()] - printer.gcode.script: {'script': 'EXCLUDE_OBJECT NAME=2020_EXTRUSION_CABLE_ORGANIZER_WITH_TWIST_IN_T_NUT_STL_ID_2_COPY_0'}
2024-03-28 20:24:53,112 [screen.py:show_popup_message()] - echo: // Excluding object 2020_EXTRUSION_CABLE_ORGANIZER_WITH_TWIST_IN_T_NUT_STL_ID_2_COPY_0
2024-03-28 20:24:53,326 [exclude.py:process_update()] - Excluded objects: ['2020_EXTRUSION_CABLE_ORGANIZER_WITH_TWIST_IN_T_NUT_STL_ID_2_COPY_0']
2024-03-28 20:25:36,011 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 20:25:36,060 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 20:25:36,079 [job_status.py:update_file_metadata()] - Update Metadata. File: 2020 Extrusion Clips.gcode Size: 5002362
2024-03-28 20:25:36,090 [job_status.py:show_file_thumbnail()] - 2020 Extrusion Clips.gcode
2024-03-28 20:25:36,666 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 20:25:37,806 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 20:25:37,806 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 20:25:37,807 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 20:25:37,814 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 20:25:40,698 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 20:25:40,698 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 20:25:40,717 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-03-28 20:25:41,974 [job_status.py:close_panel()] - Closing job_status panel
2024-03-28 20:25:41,975 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 20:25:41,981 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 20:25:42,106 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 20:25:42,122 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 20:25:42,131 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 20:25:42,141 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 20:25:42,197 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 20:26:04,773 [screen.py:_load_panel()] - Loading panel: temperature
2024-03-28 20:26:04,798 [temperature.py:add_device()] - Adding device: extruder
2024-03-28 20:26:04,811 [temperature.py:add_device()] - Adding device: heater_bed
2024-03-28 20:26:04,822 [temperature.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 20:26:04,833 [temperature.py:select_heater()] - Selecting extruder
2024-03-28 20:26:04,835 [temperature.py:select_heater()] - Selecting heater_bed
2024-03-28 20:26:04,887 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-03-28 20:26:29,596 [temperature.py:verify_max_temp()] - 50/120
2024-03-28 20:26:29,597 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S50
2024-03-28 20:26:30,779 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 20:26:30,851 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 20:27:48,082 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 20:27:48,083 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 20:27:48,101 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 20:27:48,300 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 20:27:48,314 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 20:27:48,328 [job_status.py:update_file_metadata()] - Update Metadata. File: 2020 Extrusion Clips.gcode Size: 5002578
2024-03-28 20:27:48,339 [job_status.py:show_file_thumbnail()] - 2020 Extrusion Clips.gcode
2024-03-28 20:33:14,428 [screen.py:_load_panel()] - Loading panel: fine_tune
2024-03-28 20:33:14,538 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 20:33:15,434 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 20:34:29,155 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 20:44:27,912 [fine_tune.py:change_percent_delta()] - ### Delta 1
2024-03-28 20:44:28,391 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M221 S99'}
2024-03-28 21:36:30,556 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 21:36:30,602 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 21:36:30,621 [job_status.py:update_file_metadata()] - Update Metadata. File: 2020 Extrusion Clips.gcode Size: 5002578
2024-03-28 21:36:30,631 [job_status.py:show_file_thumbnail()] - 2020 Extrusion Clips.gcode
2024-03-28 21:39:27,650 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 21:39:27,650 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 21:39:27,669 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-28 21:39:32,420 [job_status.py:close_panel()] - Closing job_status panel
2024-03-28 21:39:32,421 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 21:39:32,427 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 21:39:32,550 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 21:39:32,565 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 21:39:32,574 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 21:39:32,584 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 21:39:32,639 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 21:39:35,382 [main_menu.py:verify_max_temp()] - 50/120
2024-03-28 21:39:35,382 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S50
2024-03-28 21:54:33,115 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 21:54:33,115 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 21:54:33,137 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 21:54:33,346 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 21:54:33,356 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 21:54:33,375 [job_status.py:update_file_metadata()] - Update Metadata. File: baseline.gcode Size: 278660
2024-03-28 21:54:33,376 [job_status.py:show_file_thumbnail()] - baseline.gcode
2024-03-28 21:54:33,376 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-03-28 22:02:24,509 [screen.py:show_popup_message()] - error: // Unknown command:"T0"
2024-03-28 22:02:58,957 [screen.py:show_popup_message()] - error: Move exceeds maximum extrusion (5.085mm^2 vs 5.000mm^2)
2024-03-28 22:03:01,384 [screen.py:show_popup_message()] - error: SDCARD_RESET_FILE cannot be run from the sdcard
2024-03-28 22:03:01,602 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 22:03:01,603 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 22:03:01,618 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'error'
2024-03-28 22:10:07,834 [job_status.py:set_state()] - Changing job_status state from 'error' to 'standby'
2024-03-28 22:10:23,617 [job_status.py:update_file_metadata()] - Update Metadata. File: baseline.gcode Size: 279181
2024-03-28 22:10:23,618 [job_status.py:show_file_thumbnail()] - baseline.gcode
2024-03-28 22:10:23,619 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-03-28 22:10:38,109 [job_status.py:close_panel()] - Closing job_status panel
2024-03-28 22:10:38,109 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 22:10:38,116 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 22:10:38,238 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 22:10:38,253 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 22:10:38,263 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 22:10:38,273 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 22:10:38,338 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 22:10:39,397 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 22:10:39,602 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 22:10:40,393 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 22:10:40,398 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 22:11:42,625 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 22:11:42,626 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 22:11:42,649 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 22:11:42,862 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 22:11:42,877 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 22:11:42,892 [job_status.py:update_file_metadata()] - Update Metadata. File: baseline.gcode Size: 279181
2024-03-28 22:11:42,893 [job_status.py:show_file_thumbnail()] - baseline.gcode
2024-03-28 22:11:42,894 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-03-28 22:17:24,030 [screen.py:show_popup_message()] - error: // Unknown command:"T0"
2024-03-28 22:17:54,714 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 22:17:54,822 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 22:17:55,808 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 22:17:56,274 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-28 22:27:04,567 [fine_tune.py:change_percent_delta()] - ### Delta 1
2024-03-28 22:27:04,939 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M221 S100'}
2024-03-28 22:27:05,672 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 22:27:05,716 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 22:27:05,738 [job_status.py:update_file_metadata()] - Update Metadata. File: baseline.gcode Size: 279181
2024-03-28 22:27:05,739 [job_status.py:show_file_thumbnail()] - baseline.gcode
2024-03-28 22:27:05,740 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-03-28 22:28:13,291 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-28 22:28:13,868 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 22:28:13,869 [job_status.py:cancel_confirm()] - Canceling print
2024-03-28 22:28:13,870 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-28 22:28:13,876 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-28 22:28:16,565 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 22:28:16,565 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 22:28:16,581 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-03-28 22:28:56,940 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 22:28:56,940 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 22:28:56,960 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 22:28:56,968 [job_status.py:update_file_metadata()] - Update Metadata. File: Flow.gcode Size: 131065
2024-03-28 22:28:56,977 [job_status.py:show_file_thumbnail()] - Flow.gcode
2024-03-28 22:28:57,067 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 22:28:57,267 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 22:28:57,277 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 22:28:57,294 [job_status.py:update_file_metadata()] - Update Metadata. File: Flow.gcode Size: 131065
2024-03-28 22:28:57,303 [job_status.py:show_file_thumbnail()] - Flow.gcode
2024-03-28 22:29:34,604 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 22:29:34,734 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-28 22:29:35,512 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-28 22:29:36,025 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-28 22:40:41,183 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 22:40:41,243 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 22:40:41,262 [job_status.py:update_file_metadata()] - Update Metadata. File: Flow.gcode Size: 131065
2024-03-28 22:40:41,272 [job_status.py:show_file_thumbnail()] - Flow.gcode
2024-03-28 22:47:19,065 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 22:47:19,066 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 22:47:19,084 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-28 22:49:13,702 [printer.py:get_probe()] - Probe type: probe
2024-03-28 22:49:13,730 [KlippyGtk.py:Dialog()] - Showing dialog Save Z (width=800, height=480)
2024-03-28 22:49:14,312 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 22:49:14,313 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: Z_OFFSET_APPLY_PROBE
2024-03-28 22:49:14,315 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SAVE_CONFIG
2024-03-28 22:49:14,376 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffff8d7c5880 (GtkDialog at 0x2c5293d0)>
2024-03-28 22:49:14,408 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-28 22:49:15,504 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-28 22:49:15,505 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-28 22:49:15,506 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-28 22:49:15,506 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 22:49:15,513 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 22:49:15,514 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 22:49:15,579 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 22:49:18,953 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 22:49:18,979 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 22:49:19,001 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 22:49:19,001 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 22:49:19,002 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 22:49:19,027 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 22:49:19,066 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-0.735'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic', 'zero_reference_position': '175, 175'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '58.437', 'pid_ki': '2.347', 'pid_kd': '363.769'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.025000, 0.030000, 0.002500\n0.015000, 0.000000, 0.005000\n-0.035000, -0.015000, -0.040000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.735, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.025, 0.03, 0.0025], [0.015, 0.0, 0.005], [-0.035, -0.015, -0.04]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 58.437, 'pid_ki': 2.347, 'pid_kd': 363.769, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 22:49:19,072 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 22:49:19,074 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-28 22:49:19,074 [printer.py:reinit()] - # Extruders: 1
2024-03-28 22:49:19,075 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 22:49:19,075 [printer.py:reinit()] - # Fans: 4
2024-03-28 22:49:19,075 [printer.py:reinit()] - # Output pins: 0
2024-03-28 22:49:19,075 [printer.py:reinit()] - # Leds: 1
2024-03-28 22:49:19,075 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 22:49:19,103 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 22:49:19,106 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-28 22:49:19,424 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-28 22:49:19,425 [screen.py:init_klipper()] - Printer initialized
2024-03-28 22:49:19,425 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-28 22:49:19,426 [printer.py:change_state()] - Adding callback for state: startup
2024-03-28 22:49:20,805 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-28 22:49:20,805 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 22:49:20,809 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 22:49:20,818 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 22:49:21,023 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 22:49:21,039 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 22:49:21,048 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 22:49:21,062 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 22:49:21,122 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 22:49:21,124 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 22:49:21,168 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-28 22:49:21,171 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 22:49:21,192 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 23:31:29,214 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 23:31:29,378 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 23:31:30,322 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 23:31:30,328 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 23:31:30,346 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 50.000 [0.000]
2024-03-28 23:31:31,493 [screen.py:_load_panel()] - Loading panel: menu
2024-03-28 23:31:31,764 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-28 23:31:31,794 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-28 23:31:32,332 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-28 23:31:58,686 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 23:31:58,796 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 23:31:59,690 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 23:31:59,695 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 23:32:01,066 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 23:32:01,072 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 23:32:03,883 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 23:32:03,888 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 23:32:05,195 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 23:32:05,200 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 23:32:22,706 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-03-28 23:32:22,710 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-28 23:17:26,012 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-28 23:17:26,013 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-64-g1c9d82a
2024-03-28 23:17:26,014 [functions.py:log_start()] - Python version: 3.9
2024-03-28 23:17:26,295 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-28 23:17:26,297 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-03-28 23:17:26,319 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-28 23:17:26,323 [config.py:__init__()] - ====== Saved Def ======

[main]
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-03-28 23:17:26,324 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-28 23:17:26,485 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-03-28 23:17:26,486 [config.py:install_language()] - Using lang en
2024-03-28 23:17:26,523 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-28 23:17:26,527 [screen.py:__init__()] - Wayland: False Display name: :0
2024-03-28 23:17:26,534 [screen.py:__init__()] - Screen resolution: 800x480
2024-03-28 23:17:26,538 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-03-28 23:17:28,524 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-28 23:17:28,539 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-03-28 23:17:28,548 [screen.py:initial_connection()] - Default printer: None
2024-03-28 23:17:28,628 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-28 23:17:28,628 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-28 23:17:28,713 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 23:17:28,728 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-28 23:17:28,728 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 23:17:28,771 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-28 23:17:28,792 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-28 23:17:28,811 [_logging.py:info()] - Websocket connected
2024-03-28 23:17:28,812 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-28 23:17:28,816 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 23:17:28,834 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 23:17:28,853 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 23:17:28,854 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 23:17:28,854 [screen.py:init_klipper()] - Klipper not connected
2024-03-28 23:17:31,836 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 23:17:31,886 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 23:17:31,887 [screen.py:init_klipper()] - Klipper not connected
2024-03-28 23:17:34,835 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 23:17:34,856 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 23:17:34,857 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 23:17:34,895 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-03-28 23:17:37,835 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 23:17:37,856 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 23:17:37,876 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 23:17:37,876 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 23:17:37,877 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 23:17:37,900 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 23:17:37,949 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-0.735'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic', 'zero_reference_position': '175, 175'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '58.437', 'pid_ki': '2.347', 'pid_kd': '363.769'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.025000, 0.030000, 0.002500\n0.015000, 0.000000, 0.005000\n-0.035000, -0.015000, -0.040000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.735, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.025, 0.03, 0.0025], [0.015, 0.0, 0.005], [-0.035, -0.015, -0.04]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 58.437, 'pid_ki': 2.347, 'pid_kd': 363.769, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 23:17:37,953 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 23:17:37,955 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-28 23:17:37,956 [printer.py:reinit()] - # Extruders: 1
2024-03-28 23:17:37,956 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 23:17:37,956 [printer.py:reinit()] - # Fans: 4
2024-03-28 23:17:37,957 [printer.py:reinit()] - # Output pins: 0
2024-03-28 23:17:37,957 [printer.py:reinit()] - # Leds: 1
2024-03-28 23:17:37,957 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 23:17:37,985 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 23:17:37,988 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-28 23:17:38,309 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-28 23:17:38,309 [screen.py:init_klipper()] - Printer initialized
2024-03-28 23:17:38,310 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-28 23:17:38,310 [printer.py:change_state()] - Adding callback for state: startup
2024-03-28 23:17:39,182 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-28 23:17:39,182 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 23:17:39,184 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 23:17:39,189 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-28 23:17:39,326 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 23:17:39,341 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 23:17:39,351 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 23:17:39,360 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 23:17:39,415 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 23:17:39,417 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 23:17:39,438 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-03-28 23:17:39,514 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-03-28 23:17:39,514 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 23:17:39,539 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-03-28 23:17:44,836 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 23:17:44,928 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-28 23:17:44,932 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 23:17:44,978 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 23:17:44,980 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 23:17:45,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-28 23:17:45,036 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 23:17:45,056 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 23:18:19,323 [screen.py:_load_panel()] - Loading panel: extrude
2024-03-28 23:18:19,419 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-03-28 23:18:20,604 [screen.py:_load_panel()] - Loading panel: temperature
2024-03-28 23:18:20,630 [temperature.py:add_device()] - Adding device: extruder
2024-03-28 23:18:20,640 [temperature.py:add_device()] - Adding device: heater_bed
2024-03-28 23:18:20,652 [temperature.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-28 23:18:20,662 [temperature.py:select_heater()] - Selecting extruder
2024-03-28 23:18:20,665 [temperature.py:select_heater()] - Selecting heater_bed
2024-03-29 11:28:33,408 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2024-03-29 11:28:36,716 [temperature.py:verify_max_temp()] - 50/120
2024-03-29 11:28:36,716 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S50
2024-03-29 11:28:43,419 [temperature.py:verify_max_temp()] - 200/300
2024-03-29 11:28:43,420 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S200
2024-03-29 11:28:44,931 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-29 11:28:45,017 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-03-29 11:30:25,840 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=120'}
2024-03-29 11:30:37,720 [extrude.py:change_distance()] - ### Distance 25
2024-03-29 11:30:52,207 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-29 11:30:52,247 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-29 11:30:53,977 [screen.py:_load_panel()] - Loading panel: move
2024-03-29 11:30:54,106 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-29 11:30:59,190 [screen.py:_load_panel()] - Loading panel: menu
2024-03-29 11:30:59,460 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-29 11:30:59,489 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-29 11:31:00,192 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-29 11:31:33,756 [screen.py:show_popup_message()] - error: No trigger on z after full movement
2024-03-29 11:31:53,442 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28 Z'}
2024-03-29 11:33:05,598 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-03-29 11:33:05,648 [screen.py:show_popup_message()] - error: Must home axis first: 50.000 25.000 10.000 [120.000]
2024-03-29 11:33:07,474 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-29 11:33:13,698 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-29 11:33:13,747 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-29 11:33:14,818 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-29 11:33:14,905 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-29 11:33:16,154 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-03-29 11:33:20,087 [temperature.py:verify_max_temp()] - 150/300
2024-03-29 11:33:20,088 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S150
2024-03-29 11:33:20,946 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-29 11:33:21,015 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-29 11:33:40,691 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-29 11:33:41,281 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-29 11:33:41,312 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-29 11:33:42,163 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-03-29 11:44:23,603 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-29 11:44:23,604 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-29 11:44:23,607 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-29 11:44:23,608 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-29 11:44:23,613 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 11:44:23,723 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-29 11:44:26,518 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-29 11:44:26,542 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-29 11:44:26,563 [printer.py:configure_cameras()] - Cameras: []
2024-03-29 11:44:26,563 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-29 11:44:26,564 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-29 11:44:26,713 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-29 11:44:26,741 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-29 11:44:26,743 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-29 11:44:26,743 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-29 11:44:26,743 [printer.py:reinit()] - # Extruders: 0
2024-03-29 11:44:26,744 [printer.py:reinit()] - # Temperature devices: 0
2024-03-29 11:44:26,744 [printer.py:reinit()] - # Fans: 0
2024-03-29 11:44:26,744 [printer.py:reinit()] - # Output pins: 0
2024-03-29 11:44:26,744 [printer.py:reinit()] - # Leds: 0
2024-03-29 11:44:26,744 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-29 11:44:26,768 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-29 11:44:26,770 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-03-29 11:44:26,997 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-29 11:44:26,998 [screen.py:init_klipper()] - Printer initialized
2024-03-29 11:44:26,998 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-03-29 11:44:26,999 [printer.py:change_state()] - Adding callback for state: error
2024-03-29 11:44:27,004 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 11:44:27,074 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-29 11:44:43,130 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-03-29 11:44:43,131 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-29 11:44:43,132 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-29 11:44:43,133 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-29 11:44:43,135 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 11:44:43,201 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-29 11:44:46,514 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-29 11:44:46,532 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-29 11:44:46,550 [printer.py:configure_cameras()] - Cameras: []
2024-03-29 11:44:46,550 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-29 11:44:46,551 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-29 11:44:46,571 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-29 11:44:46,789 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-29 11:44:46,790 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-29 11:44:46,791 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-29 11:44:46,791 [printer.py:reinit()] - # Extruders: 0
2024-03-29 11:44:46,791 [printer.py:reinit()] - # Temperature devices: 0
2024-03-29 11:44:46,791 [printer.py:reinit()] - # Fans: 0
2024-03-29 11:44:46,792 [printer.py:reinit()] - # Output pins: 0
2024-03-29 11:44:46,792 [printer.py:reinit()] - # Leds: 0
2024-03-29 11:44:46,792 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-29 11:44:46,818 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-29 11:44:46,820 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-03-29 11:44:47,049 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-29 11:44:47,050 [screen.py:init_klipper()] - Printer initialized
2024-03-29 11:44:47,050 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-03-29 11:44:47,051 [printer.py:change_state()] - Adding callback for state: error
2024-03-29 11:44:47,056 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 11:44:47,119 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-29 11:45:04,365 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-03-29 11:45:04,366 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-29 11:45:04,368 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-29 11:45:04,368 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-29 11:45:04,371 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 11:45:04,435 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-29 11:45:07,515 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-29 11:45:07,534 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-29 11:45:07,551 [printer.py:configure_cameras()] - Cameras: []
2024-03-29 11:45:07,552 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-29 11:45:07,552 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-29 11:45:07,579 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-29 11:45:07,624 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-0.735'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic', 'zero_reference_position': '175, 175'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '58.437', 'pid_ki': '2.347', 'pid_kd': '363.769'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.025000, 0.030000, 0.002500\n0.015000, 0.000000, 0.005000\n-0.035000, -0.015000, -0.040000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.735, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.025, 0.03, 0.0025], [0.015, 0.0, 0.005], [-0.035, -0.015, -0.04]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 58.437, 'pid_ki': 2.347, 'pid_kd': 363.769, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-29 11:45:07,629 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-29 11:45:07,631 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-29 11:45:07,631 [printer.py:reinit()] - # Extruders: 1
2024-03-29 11:45:07,631 [printer.py:reinit()] - # Temperature devices: 2
2024-03-29 11:45:07,631 [printer.py:reinit()] - # Fans: 4
2024-03-29 11:45:07,631 [printer.py:reinit()] - # Output pins: 0
2024-03-29 11:45:07,632 [printer.py:reinit()] - # Leds: 1
2024-03-29 11:45:07,632 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-29 11:45:07,658 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-29 11:45:07,661 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-29 11:45:07,985 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-29 11:45:07,986 [screen.py:init_klipper()] - Printer initialized
2024-03-29 11:45:07,986 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-29 11:45:07,987 [printer.py:change_state()] - Adding callback for state: startup
2024-03-29 11:45:09,868 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-29 11:45:09,869 [printer.py:change_state()] - Adding callback for state: ready
2024-03-29 11:45:09,872 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-29 11:45:09,881 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 11:45:10,024 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-29 11:45:10,039 [main_menu.py:add_device()] - Adding device: extruder
2024-03-29 11:45:10,048 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-29 11:45:10,058 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-29 11:45:10,117 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-29 11:45:10,120 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-29 11:45:10,164 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-29 11:45:10,168 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-29 11:45:10,188 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-29 11:47:57,345 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 11:47:57,370 [temperature.py:add_device()] - Adding device: extruder
2024-03-29 11:47:57,383 [temperature.py:add_device()] - Adding device: heater_bed
2024-03-29 11:47:57,394 [temperature.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-29 11:47:57,405 [temperature.py:select_heater()] - Selecting extruder
2024-03-29 11:47:57,407 [temperature.py:select_heater()] - Selecting heater_bed
2024-03-29 11:47:57,460 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-03-29 11:47:58,570 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-29 11:47:58,616 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-29 11:47:59,560 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 11:47:59,688 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-29 11:47:59,954 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 11:48:00,197 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-29 11:48:00,236 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-29 11:48:00,760 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-29 11:53:25,580 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-29 11:53:25,581 [printer.py:change_state()] - Adding callback for state: printing
2024-03-29 11:53:25,609 [screen.py:_load_panel()] - Loading panel: job_status
2024-03-29 11:53:25,885 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-29 11:53:25,895 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-29 11:53:25,916 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron Calibration cube.gcode Size: 1839033
2024-03-29 11:53:25,931 [job_status.py:show_file_thumbnail()] - Voron Calibration cube.gcode
2024-03-29 12:02:55,854 [screen.py:_load_panel()] - Loading panel: fine_tune
2024-03-29 12:02:55,969 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-29 12:25:32,367 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-29 12:25:32,368 [printer.py:change_state()] - Adding callback for state: ready
2024-03-29 12:56:02,952 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-29 12:56:03,027 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-29 12:56:03,047 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-29 12:56:03,056 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron Calibration cube.gcode Size: 1839033
2024-03-29 12:56:03,072 [job_status.py:show_file_thumbnail()] - Voron Calibration cube.gcode
2024-03-29 12:56:04,290 [job_status.py:close_panel()] - Closing job_status panel
2024-03-29 12:56:04,290 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-29 12:56:04,296 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 12:56:04,420 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-29 12:56:04,435 [main_menu.py:add_device()] - Adding device: extruder
2024-03-29 12:56:04,444 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-29 12:56:04,454 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-29 12:56:04,512 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-29 12:56:05,740 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 12:56:05,793 [temperature.py:add_device()] - Adding device: extruder
2024-03-29 12:56:05,811 [temperature.py:add_device()] - Adding device: heater_bed
2024-03-29 12:56:05,832 [temperature.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-29 12:56:05,850 [temperature.py:select_heater()] - Selecting extruder
2024-03-29 12:56:05,854 [temperature.py:select_heater()] - Selecting heater_bed
2024-03-29 12:56:05,937 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-03-29 12:56:11,191 [temperature.py:verify_max_temp()] - 200/300
2024-03-29 12:56:11,229 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-29 12:56:15,530 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-29 12:56:15,531 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PID_CALIBRATE HEATER=extruder TARGET=200'}
2024-03-29 13:00:10,979 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-29 13:00:11,117 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-29 13:02:43,933 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffb9683f00 (GtkDialog at 0x1895dc40)>
2024-03-29 13:02:43,982 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-29 13:03:00,575 [screen.py:show_popup_message()] - error: Error on 'PID_CALIBRATE': missing HEATER
2024-03-29 13:03:04,079 [screen.py:show_popup_message()] - error: Malformed command 'PID_CALIBRATE BED'
2024-03-29 13:03:10,240 [screen.py:show_popup_message()] - error: Malformed command 'PID_CALIBRATE BED 60'
2024-03-29 13:03:34,192 [screen.py:show_popup_message()] - error: SAVE_CONFIG section 'extruder' option 'control' conflicts with included value
2024-03-29 13:05:03,591 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-29 13:05:03,592 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-29 13:05:03,594 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-29 13:05:03,595 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-29 13:05:03,601 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-29 13:05:03,602 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 13:05:03,689 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-29 13:05:06,516 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-29 13:05:06,542 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-29 13:05:06,562 [printer.py:configure_cameras()] - Cameras: []
2024-03-29 13:05:06,563 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-29 13:05:06,563 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-29 13:05:06,695 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-29 13:05:06,739 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-0.735'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic', 'zero_reference_position': '175, 175'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '58.437', 'pid_ki': '2.347', 'pid_kd': '363.769'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.025000, 0.030000, 0.002500\n0.015000, 0.000000, 0.005000\n-0.035000, -0.015000, -0.040000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.735, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.025, 0.03, 0.0025], [0.015, 0.0, 0.005], [-0.035, -0.015, -0.04]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 58.437, 'pid_ki': 2.347, 'pid_kd': 363.769, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-29 13:05:06,745 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-29 13:05:06,747 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-29 13:05:06,747 [printer.py:reinit()] - # Extruders: 1
2024-03-29 13:05:06,747 [printer.py:reinit()] - # Temperature devices: 2
2024-03-29 13:05:06,748 [printer.py:reinit()] - # Fans: 4
2024-03-29 13:05:06,748 [printer.py:reinit()] - # Output pins: 0
2024-03-29 13:05:06,748 [printer.py:reinit()] - # Leds: 1
2024-03-29 13:05:06,748 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-29 13:05:06,775 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-29 13:05:06,778 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-29 13:05:07,099 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-29 13:05:07,100 [screen.py:init_klipper()] - Printer initialized
2024-03-29 13:05:07,100 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-29 13:05:07,101 [printer.py:change_state()] - Adding callback for state: startup
2024-03-29 13:05:08,980 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-29 13:05:08,980 [printer.py:change_state()] - Adding callback for state: ready
2024-03-29 13:05:08,983 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-29 13:05:08,992 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 13:05:09,148 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-29 13:05:09,168 [main_menu.py:add_device()] - Adding device: extruder
2024-03-29 13:05:09,180 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-29 13:05:09,194 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-29 13:05:09,272 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-29 13:05:09,273 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-29 13:05:09,319 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-29 13:05:09,323 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-29 13:05:09,343 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-29 13:05:26,728 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 13:05:26,754 [temperature.py:add_device()] - Adding device: extruder
2024-03-29 13:05:26,765 [temperature.py:add_device()] - Adding device: heater_bed
2024-03-29 13:05:26,776 [temperature.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-29 13:05:26,788 [temperature.py:select_heater()] - Selecting extruder
2024-03-29 13:05:26,790 [temperature.py:select_heater()] - Selecting heater_bed
2024-03-29 13:05:26,844 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-03-29 13:05:28,705 [temperature.py:select_heater()] - Deselecting heater_bed
2024-03-29 13:05:31,071 [temperature.py:verify_max_temp()] - 60/120
2024-03-29 13:05:31,079 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffbc511f80 (GtkDialog at 0x187b5660)>
2024-03-29 13:05:31,125 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-29 13:05:32,628 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-29 13:05:32,629 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PID_CALIBRATE HEATER=heater_bed TARGET=60'}
2024-03-29 13:11:10,942 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffbc50c900 (GtkDialog at 0x1853cb50)>
2024-03-29 13:11:10,992 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-29 13:14:19,299 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-29 13:14:23,814 [temperature.py:verify_max_temp()] - 200/300
2024-03-29 13:14:23,822 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffb8470300 (GtkDialog at 0x18541c30)>
2024-03-29 13:14:23,879 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-29 13:14:25,380 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-29 13:14:25,380 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PID_CALIBRATE HEATER=extruder TARGET=200'}
2024-03-29 13:20:42,716 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffbc511240 (GtkDialog at 0x187bc2f0)>
2024-03-29 13:20:42,743 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-29 13:21:03,005 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-29 13:21:03,006 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-29 13:21:03,008 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-29 13:21:03,008 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-29 13:21:03,017 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-29 13:21:03,045 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 13:21:03,118 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-29 13:21:06,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-29 13:21:06,546 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-29 13:21:06,563 [printer.py:configure_cameras()] - Cameras: []
2024-03-29 13:21:06,564 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-29 13:21:06,564 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-29 13:21:06,586 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-29 13:21:06,630 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-0.735'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic', 'zero_reference_position': '175, 175'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.025000, 0.030000, 0.002500\n0.015000, 0.000000, 0.005000\n-0.035000, -0.015000, -0.040000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.735, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.025, 0.03, 0.0025], [0.015, 0.0, 0.005], [-0.035, -0.015, -0.04]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-29 13:21:06,636 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-29 13:21:06,637 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-29 13:21:06,638 [printer.py:reinit()] - # Extruders: 1
2024-03-29 13:21:06,638 [printer.py:reinit()] - # Temperature devices: 2
2024-03-29 13:21:06,638 [printer.py:reinit()] - # Fans: 4
2024-03-29 13:21:06,639 [printer.py:reinit()] - # Output pins: 0
2024-03-29 13:21:06,640 [printer.py:reinit()] - # Leds: 1
2024-03-29 13:21:06,641 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-29 13:21:06,667 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-29 13:21:06,670 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-29 13:21:06,985 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-29 13:21:06,985 [screen.py:init_klipper()] - Printer initialized
2024-03-29 13:21:06,986 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-29 13:21:06,986 [printer.py:change_state()] - Adding callback for state: startup
2024-03-29 13:21:08,359 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-29 13:21:08,360 [printer.py:change_state()] - Adding callback for state: ready
2024-03-29 13:21:08,362 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-29 13:21:08,368 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 13:21:08,493 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-29 13:21:08,512 [main_menu.py:add_device()] - Adding device: extruder
2024-03-29 13:21:08,522 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-29 13:21:08,532 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-29 13:21:08,588 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-29 13:21:08,590 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-29 13:21:08,643 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-29 13:21:08,647 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-29 13:21:08,667 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-29 14:14:25,514 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-29 16:07:42,110 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-29 16:07:42,153 [screen.py:wake_screen()] - Screen wake up
2024-03-29 16:07:45,928 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-03-29 16:07:45,999 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2024-03-29 16:07:52,392 [screen.py:show_popup_message()] - echo: STANDBY 
2024-03-29 16:07:52,403 [screen.py:_send_action()] - printer.gcode.script: {'script': 'STANDBY'}
2024-03-29 16:23:50,813 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-29 16:23:50,927 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-29 16:36:34,091 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffbc511440 (GtkDialog at 0x185933a0)>
2024-03-29 16:36:34,159 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-29 16:37:10,353 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-29 16:42:15,413 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffb95f5880 (GtkDialog at 0x18d3eb40)>
2024-03-29 16:42:15,474 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-29 16:43:13,366 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-29 16:43:14,647 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 16:43:14,810 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-29 16:43:16,491 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-29 16:43:16,533 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-29 16:43:17,271 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2024-03-29 16:43:24,895 [screen.py:show_popup_message()] - echo: PARK_HZ 
2024-03-29 16:43:24,915 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK_HZ'}
2024-03-29 16:43:29,219 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-29 16:43:29,275 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-29 16:43:30,401 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-29 16:43:31,068 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 16:43:31,313 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-29 16:43:31,345 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-29 16:43:31,843 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-29 16:44:01,547 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-03-29 16:54:48,270 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-03-29 16:58:30,905 [screen.py:show_popup_message()] - error: Retries aborting: Probed points range is increasing. Possibly Z motor numbering is wrong
2024-03-29 17:01:06,684 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-29 17:01:06,684 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-29 17:01:06,686 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-29 17:01:06,686 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-29 17:01:06,692 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 17:01:06,773 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-29 17:01:10,515 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-29 17:01:10,537 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-29 17:01:10,555 [printer.py:configure_cameras()] - Cameras: []
2024-03-29 17:01:10,556 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-29 17:01:10,556 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-29 17:01:10,578 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-29 17:01:10,620 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-0.735'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'hold_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'hold_current': '0.80', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '15'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.025000, 0.030000, 0.002500\n0.015000, 0.000000, 0.005000\n-0.035000, -0.015000, -0.040000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.735, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.025, 0.03, 0.0025], [0.015, 0.0, 0.005], [-0.035, -0.015, -0.04]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 0.7, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-29 17:01:10,627 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-29 17:01:10,628 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-29 17:01:10,629 [printer.py:reinit()] - # Extruders: 1
2024-03-29 17:01:10,629 [printer.py:reinit()] - # Temperature devices: 2
2024-03-29 17:01:10,629 [printer.py:reinit()] - # Fans: 4
2024-03-29 17:01:10,629 [printer.py:reinit()] - # Output pins: 0
2024-03-29 17:01:10,630 [printer.py:reinit()] - # Leds: 1
2024-03-29 17:01:10,631 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-29 17:01:10,658 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-29 17:01:10,661 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-29 17:01:10,997 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-29 17:01:10,998 [screen.py:init_klipper()] - Printer initialized
2024-03-29 17:01:10,999 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-29 17:01:10,999 [printer.py:change_state()] - Adding callback for state: startup
2024-03-29 17:01:12,359 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-29 17:01:12,360 [printer.py:change_state()] - Adding callback for state: ready
2024-03-29 17:01:12,363 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-29 17:01:12,368 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 17:01:12,496 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-29 17:01:12,512 [main_menu.py:add_device()] - Adding device: extruder
2024-03-29 17:01:12,521 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-29 17:01:12,531 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-29 17:01:12,588 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-29 17:01:12,590 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-29 17:01:12,635 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-29 17:01:12,640 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-29 17:01:12,661 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-29 17:54:48,514 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-29 18:25:30,811 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-29 18:25:30,834 [screen.py:wake_screen()] - Screen wake up
2024-03-29 18:25:31,837 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 18:25:31,972 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-29 18:25:32,999 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 18:25:33,181 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-29 18:25:33,211 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-29 18:25:33,979 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-03-29 18:26:56,271 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-29 18:26:56,271 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-29 18:26:56,273 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-29 18:26:56,274 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-29 18:26:56,277 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 18:26:56,344 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-29 18:26:59,516 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-29 18:26:59,536 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-29 18:26:59,561 [printer.py:configure_cameras()] - Cameras: []
2024-03-29 18:26:59,562 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-29 18:26:59,563 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-29 18:26:59,588 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-29 18:26:59,637 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.05', 'samples_tolerance_retries': '10', 'z_offset': '-0.735'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.0025', 'max_adjust': '15'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.025000, 0.030000, 0.002500\n0.015000, 0.000000, 0.005000\n-0.035000, -0.015000, -0.040000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.735, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.05, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.025, 0.03, 0.0025], [0.015, 0.0, 0.005], [-0.035, -0.015, -0.04]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.0025, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-29 18:26:59,644 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-29 18:26:59,646 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-29 18:26:59,646 [printer.py:reinit()] - # Extruders: 1
2024-03-29 18:26:59,646 [printer.py:reinit()] - # Temperature devices: 2
2024-03-29 18:26:59,646 [printer.py:reinit()] - # Fans: 4
2024-03-29 18:26:59,647 [printer.py:reinit()] - # Output pins: 0
2024-03-29 18:26:59,647 [printer.py:reinit()] - # Leds: 1
2024-03-29 18:26:59,647 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-29 18:26:59,674 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-29 18:26:59,677 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-29 18:26:59,998 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-29 18:26:59,999 [screen.py:init_klipper()] - Printer initialized
2024-03-29 18:27:00,000 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-29 18:27:00,000 [printer.py:change_state()] - Adding callback for state: startup
2024-03-29 18:27:01,614 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-29 18:27:01,614 [printer.py:change_state()] - Adding callback for state: ready
2024-03-29 18:27:01,618 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-29 18:27:01,624 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 18:27:01,750 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-29 18:27:01,766 [main_menu.py:add_device()] - Adding device: extruder
2024-03-29 18:27:01,775 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-29 18:27:01,785 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-29 18:27:01,842 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-29 18:27:01,844 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-29 18:27:01,889 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-29 18:27:01,894 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-29 18:27:01,915 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-29 19:25:34,514 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-30 00:17:27,189 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-30 00:17:27,190 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-64-g1c9d82a
2024-03-30 00:17:27,190 [functions.py:log_start()] - Python version: 3.9
2024-03-30 00:17:27,570 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-30 00:17:27,571 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-03-30 00:17:27,597 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-30 00:17:27,600 [config.py:__init__()] - ====== Saved Def ======

[main]
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-03-30 00:17:27,602 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-30 00:17:27,737 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-03-30 00:17:27,738 [config.py:install_language()] - Using lang en
2024-03-30 00:17:27,782 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-30 00:17:27,785 [screen.py:__init__()] - Wayland: False Display name: :0
2024-03-30 00:17:27,792 [screen.py:__init__()] - Screen resolution: 800x480
2024-03-30 00:17:27,796 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-03-30 00:17:29,788 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-30 00:17:29,803 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-03-30 00:17:29,815 [screen.py:initial_connection()] - Default printer: None
2024-03-30 00:17:29,898 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-30 00:17:29,898 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-30 00:17:29,981 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-30 00:17:29,997 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-30 00:17:29,997 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-30 00:17:30,047 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-30 00:17:30,073 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-30 00:17:30,091 [_logging.py:info()] - Websocket connected
2024-03-30 00:17:30,092 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-30 00:17:30,095 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-30 00:17:30,116 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-30 00:17:30,137 [printer.py:configure_cameras()] - Cameras: []
2024-03-30 00:17:30,138 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-30 00:17:30,139 [screen.py:init_klipper()] - Klipper not connected
2024-03-30 00:17:33,003 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-30 00:17:33,037 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-30 00:17:33,038 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-30 00:17:33,087 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-03-30 00:17:35,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-30 00:17:36,019 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-30 00:17:36,041 [printer.py:configure_cameras()] - Cameras: []
2024-03-30 00:17:36,042 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-30 00:17:36,043 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-30 00:17:36,069 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-30 00:17:36,122 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '7.5', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.735'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.0025', 'max_adjust': '15'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.025000, 0.030000, 0.002500\n0.015000, 0.000000, 0.005000\n-0.035000, -0.015000, -0.040000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.735, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 7.5, 'lift_speed': 7.5, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'median', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.025, 0.03, 0.0025], [0.015, 0.0, 0.005], [-0.035, -0.015, -0.04]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.0025, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-30 00:17:36,126 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-30 00:17:36,128 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-30 00:17:36,129 [printer.py:reinit()] - # Extruders: 1
2024-03-30 00:17:36,129 [printer.py:reinit()] - # Temperature devices: 2
2024-03-30 00:17:36,129 [printer.py:reinit()] - # Fans: 4
2024-03-30 00:17:36,130 [printer.py:reinit()] - # Output pins: 0
2024-03-30 00:17:36,130 [printer.py:reinit()] - # Leds: 1
2024-03-30 00:17:36,130 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-30 00:17:38,904 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-30 00:17:38,919 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-30 00:17:39,096 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-30 00:17:39,097 [screen.py:init_klipper()] - Printer initialized
2024-03-30 00:17:39,098 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-30 00:17:39,098 [printer.py:change_state()] - Adding callback for state: startup
2024-03-30 00:17:40,759 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-30 00:17:40,759 [printer.py:change_state()] - Adding callback for state: ready
2024-03-30 00:17:40,761 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-30 00:17:40,767 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-30 00:17:40,907 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-30 00:17:40,923 [main_menu.py:add_device()] - Adding device: extruder
2024-03-30 00:17:40,932 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-30 00:17:40,942 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-30 00:17:40,998 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-30 00:17:41,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-30 00:17:41,028 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-03-30 00:17:41,111 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-03-30 00:17:41,112 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-30 00:17:41,135 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-03-30 00:17:45,997 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-30 00:17:46,040 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-30 00:17:46,043 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-30 00:17:46,067 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-30 00:17:46,070 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-30 00:17:46,109 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-30 00:17:46,112 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-30 00:17:46,135 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-30 12:29:16,476 [screen.py:show_popup_message()] - error: Retries aborting: Probed points range is increasing. Possibly Z motor numbering is wrong
2024-03-30 13:01:40,301 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-30 13:17:26,707 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-30 13:17:26,728 [screen.py:wake_screen()] - Screen wake up
2024-03-30 13:17:28,405 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-03-30 13:17:28,476 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2024-03-30 13:17:30,604 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-30 13:17:30,659 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-30 13:17:31,580 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-03-30 13:17:31,580 [screen.py:_go_to_submenu()] - #### Menu __main
2024-03-30 13:17:31,589 [screen.py:_load_panel()] - Loading panel: menu
2024-03-30 13:17:32,027 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-03-30 13:17:32,041 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-03-30 13:17:32,085 [menu.py:arrangeMenuItems()] - X > more pins
2024-03-30 13:17:32,091 [menu.py:arrangeMenuItems()] - X > more power
2024-03-30 13:17:32,097 [menu.py:arrangeMenuItems()] - X > more camera
2024-03-30 13:17:32,107 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-03-30 13:17:32,126 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-03-30 13:17:33,178 [screen.py:_load_panel()] - Loading panel: console
2024-03-30 13:17:33,267 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console
2024-03-30 13:19:02,988 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-30 13:19:03,032 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-03-30 13:19:03,047 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-03-30 13:19:03,083 [menu.py:arrangeMenuItems()] - X > more pins
2024-03-30 13:19:03,090 [menu.py:arrangeMenuItems()] - X > more power
2024-03-30 13:19:03,096 [menu.py:arrangeMenuItems()] - X > more camera
2024-03-30 13:19:03,105 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-03-30 13:19:03,126 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-03-30 13:19:05,660 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-30 13:19:05,742 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-30 13:19:07,578 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2024-03-30 13:19:11,318 [screen.py:show_popup_message()] - echo: PARK 
2024-03-30 13:19:11,328 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK'}
2024-03-30 13:19:16,940 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-30 13:19:16,999 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-30 13:22:47,699 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-30 13:26:17,733 [screen.py:show_popup_message()] - error: Retries aborting: Probed points range is increasing. Possibly Z motor numbering is wrong
2024-03-30 13:30:29,112 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-30 13:30:29,113 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-30 13:30:29,115 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-30 13:30:29,115 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-30 13:30:29,122 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-30 13:30:29,123 [screen.py:show_panel()] - Reinitializing panel
2024-03-30 13:30:29,189 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-30 13:30:32,299 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-30 13:30:32,322 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-30 13:30:32,342 [printer.py:configure_cameras()] - Cameras: []
2024-03-30 13:30:32,342 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-30 13:30:32,343 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-30 13:30:32,382 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-30 13:30:32,428 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.735'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.0025', 'max_adjust': '15'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.025000, 0.030000, 0.002500\n0.015000, 0.000000, 0.005000\n-0.035000, -0.015000, -0.040000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.735, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.025, 0.03, 0.0025], [0.015, 0.0, 0.005], [-0.035, -0.015, -0.04]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.0025, 'max_adjust': 15.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-30 13:30:32,433 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-30 13:30:32,435 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-30 13:30:32,436 [printer.py:reinit()] - # Extruders: 1
2024-03-30 13:30:32,436 [printer.py:reinit()] - # Temperature devices: 2
2024-03-30 13:30:32,436 [printer.py:reinit()] - # Fans: 4
2024-03-30 13:30:32,436 [printer.py:reinit()] - # Output pins: 0
2024-03-30 13:30:32,436 [printer.py:reinit()] - # Leds: 1
2024-03-30 13:30:32,437 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-30 13:30:32,464 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-30 13:30:32,467 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-30 13:30:32,798 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-30 13:30:32,799 [screen.py:init_klipper()] - Printer initialized
2024-03-30 13:30:32,799 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-30 13:30:32,800 [printer.py:change_state()] - Adding callback for state: startup
2024-03-30 13:30:34,668 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-30 13:30:34,668 [printer.py:change_state()] - Adding callback for state: ready
2024-03-30 13:30:34,671 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-30 13:30:34,676 [screen.py:show_panel()] - Reinitializing panel
2024-03-30 13:30:34,808 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-30 13:30:34,825 [main_menu.py:add_device()] - Adding device: extruder
2024-03-30 13:30:34,835 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-30 13:30:34,845 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-30 13:30:34,904 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-30 13:30:34,906 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-30 13:30:34,953 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-30 13:30:34,958 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-30 13:30:34,979 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-30 13:42:52,616 [screen.py:show_popup_message()] - error: Retries aborting: Probed points range is increasing. Possibly Z motor numbering is wrong
2024-03-30 13:17:27,775 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-30 13:17:27,776 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-64-g1c9d82a
2024-03-30 13:17:27,776 [functions.py:log_start()] - Python version: 3.9
2024-03-30 13:17:28,221 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-30 13:17:28,223 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-03-30 13:17:28,253 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-30 13:17:28,257 [config.py:__init__()] - ====== Saved Def ======

[main]
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-03-30 13:17:28,260 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-30 13:17:28,407 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-03-30 13:17:28,408 [config.py:install_language()] - Using lang en
2024-03-30 13:17:28,452 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-30 13:17:28,455 [screen.py:__init__()] - Wayland: False Display name: :0
2024-03-30 13:17:28,462 [screen.py:__init__()] - Screen resolution: 800x480
2024-03-30 13:17:28,466 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-03-30 13:17:30,932 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-30 13:17:30,946 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-03-30 13:17:30,956 [screen.py:initial_connection()] - Default printer: None
2024-03-30 13:17:31,042 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-30 13:17:31,043 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-30 13:17:31,129 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-30 13:17:31,150 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-30 13:17:31,150 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-30 13:17:31,188 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-30 13:17:31,211 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-30 13:17:31,232 [_logging.py:info()] - Websocket connected
2024-03-30 13:17:31,232 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-30 13:17:31,534 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-30 13:17:31,555 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-30 13:17:31,575 [printer.py:configure_cameras()] - Cameras: []
2024-03-30 13:17:31,575 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-30 13:17:31,576 [screen.py:init_klipper()] - Klipper not connected
2024-03-30 13:17:34,560 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-30 13:17:34,583 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-30 13:17:34,584 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-30 13:17:34,624 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-03-30 13:17:37,556 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-30 13:17:37,574 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-30 13:17:37,592 [printer.py:configure_cameras()] - Cameras: []
2024-03-30 13:17:37,593 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-30 13:17:37,593 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-30 13:17:39,454 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-30 13:17:39,544 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.735'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.004', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.025000, 0.030000, 0.002500\n0.015000, 0.000000, 0.005000\n-0.035000, -0.015000, -0.040000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.735, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.025, 0.03, 0.0025], [0.015, 0.0, 0.005], [-0.035, -0.015, -0.04]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.004, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-30 13:17:39,554 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-30 13:17:39,556 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-30 13:17:39,557 [printer.py:reinit()] - # Extruders: 1
2024-03-30 13:17:39,557 [printer.py:reinit()] - # Temperature devices: 2
2024-03-30 13:17:39,559 [printer.py:reinit()] - # Fans: 4
2024-03-30 13:17:39,570 [printer.py:reinit()] - # Output pins: 0
2024-03-30 13:17:39,570 [printer.py:reinit()] - # Leds: 1
2024-03-30 13:17:39,571 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-30 13:17:39,607 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-30 13:17:39,612 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-30 13:17:39,876 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-30 13:17:39,876 [screen.py:init_klipper()] - Printer initialized
2024-03-30 13:17:39,877 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-30 13:17:39,877 [printer.py:change_state()] - Adding callback for state: startup
2024-03-30 13:17:41,024 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-30 13:17:41,025 [printer.py:change_state()] - Adding callback for state: ready
2024-03-30 13:17:41,026 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-30 13:17:41,031 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-30 13:17:41,171 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-30 13:17:41,187 [main_menu.py:add_device()] - Adding device: extruder
2024-03-30 13:17:41,196 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-30 13:17:41,206 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-30 13:17:41,263 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-30 13:17:41,266 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-30 13:17:41,285 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-03-30 13:17:41,365 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-03-30 13:17:41,366 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-30 13:17:41,388 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-03-30 13:17:46,557 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-30 13:17:46,635 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-30 13:17:46,639 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-30 13:17:46,674 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-30 13:17:46,677 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-30 13:17:46,751 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-30 13:17:46,754 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-30 13:17:46,780 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-30 19:07:53,507 [screen.py:_load_panel()] - Loading panel: move
2024-03-30 19:07:53,638 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-30 19:07:54,373 [screen.py:_load_panel()] - Loading panel: menu
2024-03-30 19:07:54,541 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-30 19:07:54,573 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-30 19:07:55,554 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-30 19:08:23,593 [screen.py:show_popup_message()] - error: Endstop z still triggered after retract
2024-03-30 19:08:28,633 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28 Z'}
2024-03-30 19:08:31,142 [screen.py:show_popup_message()] - error: Endstop z still triggered after retract
2024-03-30 19:09:47,737 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28 Z'}
2024-03-30 19:09:57,193 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-30 19:09:57,275 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-30 19:09:59,361 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-30 19:09:59,443 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-30 19:10:00,721 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-30 19:10:01,323 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-30 19:10:02,027 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-30 19:10:02,027 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M18'}
2024-03-30 19:10:08,931 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-30 19:10:08,964 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-30 19:10:09,377 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-30 19:10:25,281 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-03-30 19:10:30,117 [screen.py:show_popup_message()] - error: No trigger on probe after full movement
2024-03-30 19:10:41,308 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-30 19:10:41,349 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-30 19:10:42,004 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffa83d7c00 (GtkDialog at 0x2b8d8890)>
2024-03-30 19:10:42,032 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-30 19:10:43,214 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-30 19:10:43,215 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M18'}
2024-03-30 19:10:45,923 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-30 19:10:45,972 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-30 19:10:46,369 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-30 19:11:30,715 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-03-30 19:17:51,831 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2024-03-30 19:54:08,373 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-30 19:54:08,414 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-30 19:54:09,255 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-30 19:54:09,302 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-30 19:54:09,669 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-30 19:59:45,105 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-03-30 20:05:19,944 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2024-03-30 20:12:25,246 [screen.py:show_popup_message()] - error: Retries aborting: Probed points range is increasing. Possibly Z motor numbering is wrong
2024-03-30 20:59:45,677 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-30 22:02:18,037 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-30 22:02:18,069 [screen.py:wake_screen()] - Screen wake up
2024-03-30 22:02:19,252 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-03-30 22:02:22,197 [screen.py:_menu_go_back()] - #### Menu go home
2024-03-30 22:02:22,286 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-30 22:02:24,317 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-03-30 22:02:24,318 [screen.py:_go_to_submenu()] - #### Menu __main
2024-03-30 22:02:24,335 [screen.py:_load_panel()] - Loading panel: menu
2024-03-30 22:02:24,801 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-03-30 22:02:24,813 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-03-30 22:02:24,851 [menu.py:arrangeMenuItems()] - X > more pins
2024-03-30 22:02:24,857 [menu.py:arrangeMenuItems()] - X > more power
2024-03-30 22:02:24,863 [menu.py:arrangeMenuItems()] - X > more camera
2024-03-30 22:02:24,874 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-03-30 22:02:24,890 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-03-30 22:02:26,286 [screen.py:_load_panel()] - Loading panel: console
2024-03-30 22:02:26,400 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console
2024-03-30 22:16:51,091 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-30 22:16:51,134 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-03-30 22:16:51,149 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-03-30 22:16:51,183 [menu.py:arrangeMenuItems()] - X > more pins
2024-03-30 22:16:51,191 [menu.py:arrangeMenuItems()] - X > more power
2024-03-30 22:16:51,196 [menu.py:arrangeMenuItems()] - X > more camera
2024-03-30 22:16:51,206 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-03-30 22:16:51,223 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-03-30 22:16:57,196 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-30 22:16:57,274 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-30 22:16:57,967 [screen.py:_load_panel()] - Loading panel: extrude
2024-03-30 22:16:58,068 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-03-30 22:16:59,959 [screen.py:_load_panel()] - Loading panel: temperature
2024-03-30 22:16:59,997 [temperature.py:add_device()] - Adding device: extruder
2024-03-30 22:17:00,016 [temperature.py:add_device()] - Adding device: heater_bed
2024-03-30 22:17:00,035 [temperature.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-30 22:17:00,053 [temperature.py:select_heater()] - Selecting extruder
2024-03-30 22:17:00,056 [temperature.py:select_heater()] - Selecting heater_bed
2024-03-30 22:17:00,116 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2024-03-30 22:17:05,787 [temperature.py:verify_max_temp()] - 200/300
2024-03-30 22:17:05,788 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S200
2024-03-30 22:20:11,987 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-30 22:20:12,027 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-03-30 22:20:12,983 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=120'}
2024-03-30 22:20:38,923 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2024-03-30 22:20:38,954 [screen.py:show_popup_message()] - error: // Unknown command:"G1 -"
2024-03-30 22:20:46,590 [extrude.py:change_distance()] - ### Distance 25
2024-03-30 22:20:47,067 [extrude.py:change_speed()] - ### Speed 25
2024-03-30 22:20:48,091 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-03-30 22:20:48,093 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2024-03-30 22:20:49,379 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-03-30 22:20:49,382 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2024-03-30 22:20:51,107 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-03-30 22:20:51,109 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2024-03-30 22:21:33,288 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=1500'}
2024-03-30 22:22:16,653 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2024-03-30 22:22:22,275 [temperature.py:verify_max_temp()] - 150/300
2024-03-30 22:22:22,275 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S150
2024-03-30 22:22:23,419 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-30 22:22:23,515 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-03-30 22:22:24,787 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-30 22:22:24,827 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-30 22:22:25,986 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-30 22:22:26,679 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-30 22:22:26,710 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-30 22:22:27,263 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-30 22:22:56,044 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-03-30 22:25:46,012 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-30 22:25:46,013 [printer.py:change_state()] - Adding callback for state: printing
2024-03-30 22:25:46,026 [screen.py:_load_panel()] - Loading panel: job_status
2024-03-30 22:25:46,261 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-30 22:25:46,272 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-30 22:25:46,294 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Patches.gcode Size: 145372
2024-03-30 22:25:46,312 [job_status.py:show_file_thumbnail()] - First_Layer_Patches.gcode
2024-03-30 22:47:06,140 [screen.py:_load_panel()] - Loading panel: fine_tune
2024-03-30 22:47:06,258 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-30 22:47:07,658 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-30 22:47:56,475 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S75'}
2024-03-30 22:48:10,723 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-30 22:48:10,769 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-30 22:48:10,789 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Patches.gcode Size: 145372
2024-03-30 22:48:10,800 [job_status.py:show_file_thumbnail()] - First_Layer_Patches.gcode
2024-03-30 22:48:17,215 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-30 22:49:39,941 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-30 22:49:41,179 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-30 22:49:43,269 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-30 22:49:44,812 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-30 22:49:46,637 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-30 22:49:49,466 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-30 22:49:51,195 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-30 22:50:08,226 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-30 22:50:08,668 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-30 22:51:20,765 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-30 22:53:29,139 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M221 S98'}
2024-03-30 22:53:44,841 [fine_tune.py:change_percent_delta()] - ### Delta 1
2024-03-30 22:53:45,243 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M221 S99'}
2024-03-30 22:53:57,620 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-30 22:54:19,963 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-30 22:55:36,776 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-30 22:55:36,776 [printer.py:change_state()] - Adding callback for state: ready
2024-03-30 22:57:59,243 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-30 22:57:59,243 [printer.py:change_state()] - Adding callback for state: printing
2024-03-30 22:57:59,258 [screen.py:show_panel()] - Reinitializing panel
2024-03-30 22:57:59,456 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-30 22:57:59,466 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-30 22:57:59,482 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Patches.gcode Size: 131471
2024-03-30 22:57:59,493 [job_status.py:show_file_thumbnail()] - First_Layer_Patches.gcode
2024-03-30 23:02:58,906 [screen.py:show_popup_message()] - error: Retries aborting: Probed points range is increasing. Possibly Z motor numbering is wrong
2024-03-30 23:03:01,074 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2024-03-30 23:03:01,327 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-30 23:03:01,328 [printer.py:change_state()] - Adding callback for state: ready
2024-03-30 23:03:01,352 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'error'
2024-03-30 23:05:23,928 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-30 23:05:23,929 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-30 23:05:23,931 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-30 23:05:23,932 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-30 23:05:23,937 [screen.py:show_panel()] - Reinitializing panel
2024-03-30 23:05:24,001 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-30 23:05:27,676 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-30 23:05:27,698 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-30 23:05:27,716 [printer.py:configure_cameras()] - Cameras: []
2024-03-30 23:05:27,717 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-30 23:05:27,717 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-30 23:05:27,739 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-30 23:05:27,780 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.735'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.025000, 0.030000, 0.002500\n0.015000, 0.000000, 0.005000\n-0.035000, -0.015000, -0.040000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.735, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.025, 0.03, 0.0025], [0.015, 0.0, 0.005], [-0.035, -0.015, -0.04]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-30 23:05:27,786 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-30 23:05:27,787 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-30 23:05:27,788 [printer.py:reinit()] - # Extruders: 1
2024-03-30 23:05:27,788 [printer.py:reinit()] - # Temperature devices: 2
2024-03-30 23:05:27,788 [printer.py:reinit()] - # Fans: 4
2024-03-30 23:05:27,788 [printer.py:reinit()] - # Output pins: 0
2024-03-30 23:05:27,789 [printer.py:reinit()] - # Leds: 1
2024-03-30 23:05:27,789 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-30 23:05:27,817 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-30 23:05:27,820 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-30 23:05:28,168 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-30 23:05:28,168 [screen.py:init_klipper()] - Printer initialized
2024-03-30 23:05:28,169 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-30 23:05:28,169 [printer.py:change_state()] - Adding callback for state: startup
2024-03-30 23:05:29,519 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-30 23:05:29,520 [printer.py:change_state()] - Adding callback for state: ready
2024-03-30 23:05:29,524 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-30 23:05:29,529 [screen.py:show_panel()] - Reinitializing panel
2024-03-30 23:05:29,653 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-30 23:05:29,668 [main_menu.py:add_device()] - Adding device: extruder
2024-03-30 23:05:29,677 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-30 23:05:29,687 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-30 23:05:29,742 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-30 23:05:29,744 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-30 23:05:29,789 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-30 23:05:29,794 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-30 23:05:29,814 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-30 23:05:32,822 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-30 23:05:32,822 [printer.py:change_state()] - Adding callback for state: printing
2024-03-30 23:05:32,845 [screen.py:show_panel()] - Reinitializing panel
2024-03-30 23:05:33,058 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-30 23:05:33,072 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-30 23:05:33,092 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Patches.gcode Size: 131471
2024-03-30 23:05:33,102 [job_status.py:show_file_thumbnail()] - First_Layer_Patches.gcode
2024-03-30 23:23:29,057 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-30 23:23:29,058 [printer.py:change_state()] - Adding callback for state: ready
2024-03-30 23:23:29,080 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-30 23:38:31,497 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-30 23:38:31,498 [job_status.py:restart()] - Starting print: First_Layer_Patches.gcode
2024-03-30 23:38:31,499 [job_status.py:new_print()] - reseting progress
2024-03-30 23:38:31,752 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-30 23:38:31,752 [printer.py:change_state()] - Adding callback for state: printing
2024-03-30 23:38:31,771 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2024-03-30 23:38:31,825 [screen.py:show_panel()] - Reinitializing panel
2024-03-30 23:38:32,117 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-30 23:38:32,128 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-30 23:38:32,142 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Patches.gcode Size: 131471
2024-03-30 23:38:32,152 [job_status.py:show_file_thumbnail()] - First_Layer_Patches.gcode
2024-03-30 23:38:32,585 [screen.py:show_panel()] - Reinitializing panel
2024-03-30 23:38:32,692 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-30 23:38:37,799 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-03-30 23:38:38,396 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-03-30 23:46:14,486 [screen.py:show_popup_message()] - error: Retries aborting: Probed points range is increasing. Possibly Z motor numbering is wrong
2024-03-30 23:46:16,666 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2024-03-30 23:46:16,843 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-30 23:46:16,843 [printer.py:change_state()] - Adding callback for state: ready
2024-03-30 23:46:18,150 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-30 23:46:18,194 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-30 23:46:18,209 [screen.py:show_popup_message()] - error: Retries aborting: Probed points range is increasing. Possibly Z motor numbering is wrong
2024-03-30 23:46:18,217 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'error'
2024-03-30 23:46:18,224 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Patches.gcode Size: 131471
2024-03-30 23:46:18,234 [job_status.py:show_file_thumbnail()] - First_Layer_Patches.gcode
2024-03-30 23:46:19,967 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SDCARD_RESET_FILE
2024-03-30 23:46:19,969 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-30 23:46:19,970 [job_status.py:restart()] - Starting print: First_Layer_Patches.gcode
2024-03-30 23:46:19,971 [job_status.py:new_print()] - reseting progress
2024-03-30 23:46:20,091 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-30 23:46:20,091 [printer.py:change_state()] - Adding callback for state: printing
2024-03-30 23:46:20,110 [job_status.py:set_state()] - Changing job_status state from 'error' to 'printing'
2024-03-30 23:46:20,162 [screen.py:show_panel()] - Reinitializing panel
2024-03-30 23:46:20,359 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-30 23:46:20,369 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-30 23:46:20,383 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Patches.gcode Size: 131471
2024-03-30 23:46:20,393 [job_status.py:show_file_thumbnail()] - First_Layer_Patches.gcode
2024-03-30 23:49:55,626 [screen.py:show_panel()] - Reinitializing panel
2024-03-30 23:49:55,758 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-30 23:50:40,014 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-30 23:53:06,311 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-30 23:53:24,217 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-30 23:53:49,375 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-30 23:54:58,114 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-30 23:54:58,115 [printer.py:change_state()] - Adding callback for state: ready
2024-03-30 23:55:10,812 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-30 23:55:15,065 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-30 23:55:15,119 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-30 23:55:15,133 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-30 23:55:15,142 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Patches.gcode Size: 131471
2024-03-30 23:55:15,151 [job_status.py:show_file_thumbnail()] - First_Layer_Patches.gcode
2024-03-30 23:55:19,534 [printer.py:get_probe()] - Probe type: probe
2024-03-30 23:55:19,583 [KlippyGtk.py:Dialog()] - Showing dialog Save Z (width=800, height=480)
2024-03-30 23:55:20,120 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-30 23:55:20,121 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: Z_OFFSET_APPLY_PROBE
2024-03-30 23:55:20,122 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SAVE_CONFIG
2024-03-30 23:55:20,188 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffa83d7140 (GtkDialog at 0x2ba96560)>
2024-03-30 23:55:20,224 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-03-30 23:55:21,232 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-30 23:55:21,233 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SAVE_CONFIG'}
2024-03-30 23:55:21,463 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-30 23:55:21,463 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-30 23:55:21,465 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-30 23:55:21,466 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-30 23:55:21,472 [screen.py:show_panel()] - Reinitializing panel
2024-03-30 23:55:21,541 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-30 23:55:24,677 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-30 23:55:24,698 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-30 23:55:24,718 [printer.py:configure_cameras()] - Cameras: []
2024-03-30 23:55:24,719 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-30 23:55:24,719 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-30 23:55:24,746 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-30 23:55:24,792 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.750'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.042500, -0.010500, 0.001500\n-0.006500, 0.013500, -0.005000\n-0.006500, -0.010500, -0.041500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '117.5', 'max_x': '232.5', 'min_y': '117.5', 'max_y': '232.5'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.75, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0425, -0.0105, 0.0015], [-0.0065, 0.0135, -0.005], [-0.0065, -0.0105, -0.0415]], 'min_x': 117.5, 'max_x': 232.5, 'min_y': 117.5, 'max_y': 232.5, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-30 23:55:24,798 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-30 23:55:24,800 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-30 23:55:24,801 [printer.py:reinit()] - # Extruders: 1
2024-03-30 23:55:24,801 [printer.py:reinit()] - # Temperature devices: 2
2024-03-30 23:55:24,801 [printer.py:reinit()] - # Fans: 4
2024-03-30 23:55:24,801 [printer.py:reinit()] - # Output pins: 0
2024-03-30 23:55:24,801 [printer.py:reinit()] - # Leds: 1
2024-03-30 23:55:24,802 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-30 23:55:24,829 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-30 23:55:24,832 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-30 23:55:25,161 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-30 23:55:25,162 [screen.py:init_klipper()] - Printer initialized
2024-03-30 23:55:25,163 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-30 23:55:25,163 [printer.py:change_state()] - Adding callback for state: startup
2024-03-30 23:55:27,031 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-30 23:55:27,031 [printer.py:change_state()] - Adding callback for state: ready
2024-03-30 23:55:27,034 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-30 23:55:27,039 [screen.py:show_panel()] - Reinitializing panel
2024-03-30 23:55:27,163 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-30 23:55:27,179 [main_menu.py:add_device()] - Adding device: extruder
2024-03-30 23:55:27,190 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-30 23:55:27,203 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-30 23:55:27,258 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-30 23:55:27,260 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-30 23:55:27,314 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-30 23:55:27,319 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-30 23:55:27,339 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-31 00:02:26,070 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-31 00:02:26,071 [printer.py:change_state()] - Adding callback for state: printing
2024-03-31 00:02:26,090 [screen.py:show_panel()] - Reinitializing panel
2024-03-31 00:02:26,310 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-31 00:02:26,325 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-31 00:02:26,344 [job_status.py:update_file_metadata()] - Update Metadata. File: pa_pattern.gcode Size: 86314
2024-03-31 00:02:26,346 [job_status.py:show_file_thumbnail()] - pa_pattern.gcode
2024-03-31 00:02:26,346 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-03-31 00:18:07,377 [screen.py:show_panel()] - Reinitializing panel
2024-03-31 00:18:07,542 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-31 00:20:29,140 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-31 00:20:29,197 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-31 00:20:29,217 [job_status.py:update_file_metadata()] - Update Metadata. File: pa_pattern.gcode Size: 86314
2024-03-31 00:20:29,218 [job_status.py:show_file_thumbnail()] - pa_pattern.gcode
2024-03-31 00:20:29,219 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-03-31 00:22:41,178 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-31 00:22:41,179 [printer.py:change_state()] - Adding callback for state: ready
2024-03-31 00:22:41,196 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-31 00:32:47,478 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-31 00:32:47,478 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-31 00:32:47,480 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-31 00:32:47,481 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-31 00:32:47,485 [screen.py:show_panel()] - Reinitializing panel
2024-03-31 00:32:47,556 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-31 00:32:50,678 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-31 00:32:50,699 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-31 00:32:50,717 [printer.py:configure_cameras()] - Cameras: []
2024-03-31 00:32:50,718 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-31 00:32:50,718 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-31 00:32:50,739 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-31 00:32:50,780 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.750'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.03', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.042500, -0.010500, 0.001500\n-0.006500, 0.013500, -0.005000\n-0.006500, -0.010500, -0.041500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '117.5', 'max_x': '232.5', 'min_y': '117.5', 'max_y': '232.5'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.75, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.03, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0425, -0.0105, 0.0015], [-0.0065, 0.0135, -0.005], [-0.0065, -0.0105, -0.0415]], 'min_x': 117.5, 'max_x': 232.5, 'min_y': 117.5, 'max_y': 232.5, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-31 00:32:50,786 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-31 00:32:50,788 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-31 00:32:50,788 [printer.py:reinit()] - # Extruders: 1
2024-03-31 00:32:50,789 [printer.py:reinit()] - # Temperature devices: 2
2024-03-31 00:32:50,789 [printer.py:reinit()] - # Fans: 4
2024-03-31 00:32:50,789 [printer.py:reinit()] - # Output pins: 0
2024-03-31 00:32:50,789 [printer.py:reinit()] - # Leds: 1
2024-03-31 00:32:50,789 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-31 00:32:50,817 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-31 00:32:50,820 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-31 00:32:51,152 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-31 00:32:51,153 [screen.py:init_klipper()] - Printer initialized
2024-03-31 00:32:51,153 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-31 00:32:51,154 [printer.py:change_state()] - Adding callback for state: startup
2024-03-31 00:32:53,022 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-31 00:32:53,022 [printer.py:change_state()] - Adding callback for state: ready
2024-03-31 00:32:53,025 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-31 00:32:53,030 [screen.py:show_panel()] - Reinitializing panel
2024-03-31 00:32:53,165 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-31 00:32:53,180 [main_menu.py:add_device()] - Adding device: extruder
2024-03-31 00:32:53,190 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-31 00:32:53,200 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-31 00:32:53,256 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-31 00:32:53,258 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-31 00:32:53,310 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-31 00:32:53,313 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-31 00:32:53,334 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-31 00:33:25,128 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-31 00:33:25,129 [printer.py:change_state()] - Adding callback for state: printing
2024-03-31 00:33:25,153 [screen.py:show_panel()] - Reinitializing panel
2024-03-31 00:33:25,373 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-31 00:33:25,390 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-31 00:33:25,418 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes.gcode Size: 3625483
2024-03-31 00:33:25,429 [job_status.py:show_file_thumbnail()] - EM_Cubes.gcode
2024-03-31 00:43:59,947 [screen.py:show_panel()] - Reinitializing panel
2024-03-31 00:44:00,063 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-31 00:44:01,145 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-31 00:44:01,188 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-31 00:44:01,207 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes.gcode Size: 3625483
2024-03-31 00:44:01,217 [job_status.py:show_file_thumbnail()] - EM_Cubes.gcode
2024-03-31 00:44:01,833 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-03-31 00:44:01,833 [screen.py:_go_to_submenu()] - #### Menu __print
2024-03-31 00:44:01,840 [screen.py:_load_panel()] - Loading panel: menu
2024-03-31 00:44:02,166 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-03-31 00:44:02,194 [menu.py:arrangeMenuItems()] - X > move
2024-03-31 00:44:02,205 [menu.py:arrangeMenuItems()] - X > power
2024-03-31 00:44:02,221 [menu.py:arrangeMenuItems()] - X > camera
2024-03-31 00:44:02,245 [menu.py:arrangeMenuItems()] - X > spoolman
2024-03-31 00:44:05,227 [screen.py:_load_panel()] - Loading panel: settings
2024-03-31 00:44:05,566 [screen.py:attach_panel()] - Current panel hierarchy: job_status >  > settings
2024-03-31 00:44:15,016 [screen_panel.py:on_dropdown_change()] - [main] theme changed to colorized
2024-03-31 00:44:21,882 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-31 00:44:21,883 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-64-g1c9d82a
2024-03-31 00:44:21,883 [functions.py:log_start()] - Python version: 3.9
2024-03-31 00:44:22,039 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-31 00:44:22,039 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-03-31 00:44:22,060 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-31 00:44:22,063 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = colorized
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-03-31 00:44:22,064 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-31 00:44:22,197 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-03-31 00:44:22,198 [config.py:install_language()] - Using lang en
2024-03-31 00:44:22,222 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-31 00:44:22,225 [screen.py:__init__()] - Wayland: False Display name: :0
2024-03-31 00:44:22,229 [screen.py:__init__()] - Screen resolution: 800x480
2024-03-31 00:44:22,233 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-03-31 00:44:22,758 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-31 00:44:22,772 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-03-31 00:44:22,782 [screen.py:initial_connection()] - Default printer: None
2024-03-31 00:44:22,862 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-31 00:44:22,863 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-31 00:44:22,939 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-31 00:44:22,954 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-31 00:44:22,954 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-31 00:44:22,984 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-31 00:44:23,004 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-31 00:44:23,020 [_logging.py:info()] - Websocket connected
2024-03-31 00:44:23,020 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-31 00:44:23,304 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-31 00:44:23,322 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-31 00:44:23,341 [printer.py:configure_cameras()] - Cameras: []
2024-03-31 00:44:23,342 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-31 00:44:23,342 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-31 00:44:23,365 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-31 00:44:23,565 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.750'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.03', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.042500, -0.010500, 0.001500\n-0.006500, 0.013500, -0.005000\n-0.006500, -0.010500, -0.041500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '117.5', 'max_x': '232.5', 'min_y': '117.5', 'max_y': '232.5'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.75, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.03, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0425, -0.0105, 0.0015], [-0.0065, 0.0135, -0.005], [-0.0065, -0.0105, -0.0415]], 'min_x': 117.5, 'max_x': 232.5, 'min_y': 117.5, 'max_y': 232.5, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-31 00:44:23,570 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-31 00:44:23,572 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-31 00:44:23,572 [printer.py:reinit()] - # Extruders: 1
2024-03-31 00:44:23,572 [printer.py:reinit()] - # Temperature devices: 2
2024-03-31 00:44:23,573 [printer.py:reinit()] - # Fans: 4
2024-03-31 00:44:23,573 [printer.py:reinit()] - # Output pins: 0
2024-03-31 00:44:23,573 [printer.py:reinit()] - # Leds: 1
2024-03-31 00:44:23,573 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-31 00:44:23,600 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-31 00:44:23,603 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-31 00:44:23,966 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-31 00:44:23,966 [screen.py:init_klipper()] - Printer initialized
2024-03-31 00:44:23,967 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-03-31 00:44:23,967 [printer.py:change_state()] - Adding callback for state: printing
2024-03-31 00:44:23,990 [screen.py:_load_panel()] - Loading panel: job_status
2024-03-31 00:44:24,217 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-31 00:44:24,227 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-31 00:44:24,249 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-03-31 00:44:24,251 [job_status.py:show_file_thumbnail()] - EM_Cubes.gcode
2024-03-31 00:44:24,251 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-03-31 00:44:24,270 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes.gcode Size: 3625483
2024-03-31 00:44:24,283 [job_status.py:show_file_thumbnail()] - EM_Cubes.gcode
2024-03-31 00:44:26,353 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-03-31 00:44:26,353 [screen.py:_go_to_submenu()] - #### Menu __print
2024-03-31 00:44:26,360 [screen.py:_load_panel()] - Loading panel: menu
2024-03-31 00:44:26,699 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-03-31 00:44:26,741 [menu.py:arrangeMenuItems()] - X > move
2024-03-31 00:44:26,754 [menu.py:arrangeMenuItems()] - X > power
2024-03-31 00:44:26,774 [menu.py:arrangeMenuItems()] - X > camera
2024-03-31 00:44:26,798 [menu.py:arrangeMenuItems()] - X > spoolman
2024-03-31 00:44:27,874 [screen.py:_load_panel()] - Loading panel: settings
2024-03-31 00:44:28,195 [screen.py:attach_panel()] - Current panel hierarchy: job_status >  > settings
2024-03-31 00:44:34,009 [screen_panel.py:on_dropdown_change()] - [main] theme changed to material-darker
2024-03-31 00:44:40,174 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-31 00:44:40,175 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-64-g1c9d82a
2024-03-31 00:44:40,175 [functions.py:log_start()] - Python version: 3.9
2024-03-31 00:44:40,320 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-31 00:44:40,321 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-03-31 00:44:40,341 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-31 00:44:40,344 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-03-31 00:44:40,345 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-31 00:44:40,480 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-03-31 00:44:40,480 [config.py:install_language()] - Using lang en
2024-03-31 00:44:40,502 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-31 00:44:40,505 [screen.py:__init__()] - Wayland: False Display name: :0
2024-03-31 00:44:40,509 [screen.py:__init__()] - Screen resolution: 800x480
2024-03-31 00:44:40,512 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-03-31 00:44:40,985 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-31 00:44:40,997 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-03-31 00:44:41,007 [screen.py:initial_connection()] - Default printer: None
2024-03-31 00:44:41,085 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-31 00:44:41,086 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-31 00:44:41,148 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-31 00:44:41,164 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-31 00:44:41,164 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-31 00:44:41,192 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-31 00:44:41,210 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-31 00:44:41,223 [_logging.py:info()] - Websocket connected
2024-03-31 00:44:41,224 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-31 00:44:41,476 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-31 00:44:41,494 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-31 00:44:41,513 [printer.py:configure_cameras()] - Cameras: []
2024-03-31 00:44:41,514 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-31 00:44:41,515 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-31 00:44:41,541 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-31 00:44:41,620 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.750'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.03', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.042500, -0.010500, 0.001500\n-0.006500, 0.013500, -0.005000\n-0.006500, -0.010500, -0.041500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '117.5', 'max_x': '232.5', 'min_y': '117.5', 'max_y': '232.5'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.75, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.03, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0425, -0.0105, 0.0015], [-0.0065, 0.0135, -0.005], [-0.0065, -0.0105, -0.0415]], 'min_x': 117.5, 'max_x': 232.5, 'min_y': 117.5, 'max_y': 232.5, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': True, 'save_config_pending_items': {'bed_mesh default': {'version': '1', 'points': '\n  0.014500, -0.011500, -0.002000, -0.022000, -0.017500\n  -0.017000, -0.045000, -0.009000, -0.027000, -0.035000\n  -0.018000, -0.015000, 0.002500, -0.022000, -0.024500\n  -0.052500, -0.038000, -0.018000, -0.049500, -0.051500\n  0.004000, 0.020000, 0.006500, 0.023000, 0.031000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '60.0', 'max_x': '290.0', 'min_y': '60.0', 'max_y': '290.0'}}}}
2024-03-31 00:44:41,625 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-31 00:44:41,627 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-31 00:44:41,627 [printer.py:reinit()] - # Extruders: 1
2024-03-31 00:44:41,628 [printer.py:reinit()] - # Temperature devices: 2
2024-03-31 00:44:41,628 [printer.py:reinit()] - # Fans: 4
2024-03-31 00:44:41,628 [printer.py:reinit()] - # Output pins: 0
2024-03-31 00:44:41,629 [printer.py:reinit()] - # Leds: 1
2024-03-31 00:44:41,629 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-31 00:44:41,662 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-31 00:44:41,665 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-31 00:44:42,017 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-31 00:44:42,017 [screen.py:init_klipper()] - Printer initialized
2024-03-31 00:44:42,018 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-03-31 00:44:42,018 [printer.py:change_state()] - Adding callback for state: printing
2024-03-31 00:44:42,029 [screen.py:_load_panel()] - Loading panel: job_status
2024-03-31 00:44:42,215 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-31 00:44:42,225 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-31 00:44:42,246 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-03-31 00:44:42,248 [job_status.py:show_file_thumbnail()] - EM_Cubes.gcode
2024-03-31 00:44:42,248 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-03-31 00:44:42,268 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes.gcode Size: 3625483
2024-03-31 00:44:42,281 [job_status.py:show_file_thumbnail()] - EM_Cubes.gcode
2024-03-31 00:45:36,436 [KlippyGtk.py:Dialog()] - Showing dialog EM_Cubes.gcode (width=800, height=492)
2024-03-31 00:45:37,303 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-31 00:46:08,191 [screen.py:_load_panel()] - Loading panel: fine_tune
2024-03-31 00:46:08,277 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-31 00:54:12,040 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-03-31 00:54:12,526 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-03-31 00:55:09,338 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-03-31 01:03:03,183 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-31 01:03:03,223 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-31 01:03:03,242 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cubes.gcode Size: 3625483
2024-03-31 01:03:03,253 [job_status.py:show_file_thumbnail()] - EM_Cubes.gcode
2024-03-31 01:08:38,557 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-03-31 01:08:39,706 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-31 01:08:39,706 [job_status.py:cancel_confirm()] - Canceling print
2024-03-31 01:08:39,707 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-31 01:08:39,713 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-31 01:08:41,559 [KlippyWebsocket.py:emergency_stop()] - Sending printer.emergency_stop
2024-03-31 01:08:41,560 [KlippyWebsocket.py:emergency_stop()] - Sending printer.emergency_stop
2024-03-31 01:08:41,682 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2024-03-31 01:08:41,683 [printer.py:change_state()] - Adding callback for state: shutdown
2024-03-31 01:08:41,732 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-31 01:08:41,735 [screen.py:show_panel()] - Reinitializing panel
2024-03-31 01:08:41,793 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-31 01:08:48,856 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-03-31 01:08:48,856 [screen.py:_go_to_submenu()] - #### Menu __splashscreen
2024-03-31 01:08:48,859 [screen.py:_load_panel()] - Loading panel: menu
2024-03-31 01:08:48,882 [menu.py:evaluate_enable()] - moonraker connected True
2024-03-31 01:08:48,955 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2024-03-31 01:08:48,968 [menu.py:arrangeMenuItems()] - X > power
2024-03-31 01:08:48,972 [menu.py:evaluate_enable()] - moonraker connected True
2024-03-31 01:08:51,281 [screen.py:_load_panel()] - Loading panel: system
2024-03-31 01:08:51,323 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/system_info
2024-03-31 01:08:51,397 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen >  > system
2024-03-31 01:08:51,447 [system.py:get_updates()] - {'jsonrpc': '2.0', 'result': {'github_rate_limit': None, 'github_requests_remaining': None, 'github_limit_reset_time': None, 'version_info': {'system': {'package_count': 0, 'package_list': []}, 'moonraker': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Arksine', 'repo_name': 'moonraker', 'remote_url': 'https://github.com/Arksine/moonraker.git', 'recovery_url': 'https://github.com/Arksine/moonraker.git', 'version': 'v0.8.0-324', 'remote_version': 'v0.8.0-324', 'rollback_version': 'v0.8.0-318', 'current_hash': 'a3e4dac5fb20f8dfc0857a252eef5219d5e0ec4c', 'remote_hash': 'a3e4dac5fb20f8dfc0857a252eef5219d5e0ec4c', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.8.0-324-ga3e4dac5', 'pristine': False, 'corrupt': False, 'warnings': [], 'anomalies': ["Repo has untracked source files: ['moonraker/components/timelapse.py']"]}, 'klipper': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Klipper3d', 'repo_name': 'klipper', 'remote_url': 'https://github.com/Klipper3d/klipper', 'recovery_url': 'https://github.com/Klipper3d/klipper', 'version': 'v0.12.0-132', 'remote_version': 'v0.12.0-132', 'rollback_version': 'v0.12.0-114', 'current_hash': 'e37b007f67e5bdc330af45b78643f7789c789907', 'remote_hash': 'e37b007f67e5bdc330af45b78643f7789c789907', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.12.0-132-ge37b007f', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'Klipper-Adaptive-Meshing-Purging': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'kyleisah', 'repo_name': 'Klipper-Adaptive-Meshing-Purging', 'remote_url': 'https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git', 'recovery_url': 'https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git', 'version': 'v1.1.2-12', 'remote_version': 'v1.1.2-12', 'rollback_version': 'v1.1.2-12', 'current_hash': 'd657271f13fc429b5ca36a4f8956b67c9ddf0558', 'remote_hash': 'd657271f13fc429b5ca36a4f8956b67c9ddf0558', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.1.2-12-gd657271f', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail-config': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'mainsail-config', 'remote_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'recovery_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'version': 'v1.2.1-0', 'remote_version': 'v1.2.1-0', 'rollback_version': 'v1.1.0-1', 'current_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'remote_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-0-ge57810d5', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail': {'channel': 'stable', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'web', 'info_tags': [], 'name': 'mainsail', 'repo_name': 'mainsail', 'owner': 'mainsail-crew', 'version': 'v2.10.0', 'remote_version': 'v2.10.0', 'rollback_version': 'v2.9.1', 'last_error': '', 'warnings': [], 'anomalies': []}, 'sonar': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'mainsail-crew', 'repo_name': 'sonar', 'remote_url': 'https://github.com/mainsail-crew/sonar.git', 'recovery_url': 'https://github.com/mainsail-crew/sonar.git', 'version': 'v0.1.3-1', 'remote_version': 'v0.1.3-1', 'rollback_version': 'v0.1.3-1', 'current_hash': 'eacc498a52f79292063b6f9b0e0c191c34c5dc09', 'remote_hash': 'eacc498a52f79292063b6f9b0e0c191c34c5dc09', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.1.3-1-geacc498a', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'timelapse': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'mainsail-crew', 'repo_name': 'moonraker-timelapse', 'remote_url': 'https://github.com/mainsail-crew/moonraker-timelapse.git', 'recovery_url': 'https://github.com/mainsail-crew/moonraker-timelapse.git', 'version': 'v0.0.1-143', 'remote_version': 'v0.0.1-143', 'rollback_version': 'v0.0.1-143', 'current_hash': 'c7fff11e542b95e0e15b8bb1443cea8159ac0274', 'remote_hash': 'c7fff11e542b95e0e15b8bb1443cea8159ac0274', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.0.1-143-gc7fff11e', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'KlipperScreen': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'KlipperScreen', 'repo_name': 'KlipperScreen', 'remote_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'recovery_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'version': 'v0.3.9-64', 'remote_version': 'v0.3.9-64', 'rollback_version': 'v0.3.8-105', 'current_hash': '1c9d82adfab1fb871d3791eb538a5a0f61e5baf8', 'remote_hash': '1c9d82adfab1fb871d3791eb538a5a0f61e5baf8', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.3.9-64-g1c9d82ad', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'print_area_bed_mesh': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Turge08', 'repo_name': 'print_area_bed_mesh', 'remote_url': 'https://github.com/Turge08/print_area_bed_mesh.git', 'recovery_url': 'https://github.com/Turge08/print_area_bed_mesh.git', 'version': 'v1.2.1-21', 'remote_version': 'v1.2.1-21', 'rollback_version': 'v1.2.1-21', 'current_hash': '53451c9dedd331c2ead0fbd0f55ee15c37d41b1f', 'remote_hash': '53451c9dedd331c2ead0fbd0f55ee15c37d41b1f', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-21-g53451c9d', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}}, 'busy': False}, 'id': 8}
2024-03-31 01:08:54,151 [KlippyGtk.py:Dialog()] - Showing dialog Update (width=800, height=480)
2024-03-31 01:08:54,884 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-31 01:08:54,885 [system.py:update_confirm()] - Updating full
2024-03-31 01:08:54,918 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=800, height=480)
2024-03-31 01:08:54,920 [system.py:update_program()] - Sending machine.update.full
2024-03-31 01:08:54,963 [base_panel.py:process_update()] - Update complete
2024-03-31 01:08:56,375 [base_panel.py:finish_updating()] - Finishing update
2024-03-31 01:08:56,386 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-31 01:08:56,386 [screen.py:_menu_go_back()] - #### Menu go home
2024-03-31 01:08:56,413 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-31 01:08:57,896 [KlippyWebsocket.py:connect()] - Already connected
2024-03-31 01:08:59,327 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-03-31 01:08:59,328 [screen.py:_go_to_submenu()] - #### Menu __splashscreen
2024-03-31 01:08:59,354 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2024-03-31 01:08:59,379 [menu.py:arrangeMenuItems()] - X > power
2024-03-31 01:08:59,384 [menu.py:evaluate_enable()] - moonraker connected True
2024-03-31 01:09:00,677 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-31 01:09:00,696 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-31 01:09:00,713 [printer.py:configure_cameras()] - Cameras: []
2024-03-31 01:09:00,714 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'shutdown', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-31 01:09:00,714 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-31 01:09:00,738 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-31 01:09:00,996 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.750'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.03', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.042500, -0.010500, 0.001500\n-0.006500, 0.013500, -0.005000\n-0.006500, -0.010500, -0.041500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '117.5', 'max_x': '232.5', 'min_y': '117.5', 'max_y': '232.5'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.75, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.03, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0425, -0.0105, 0.0015], [-0.0065, 0.0135, -0.005], [-0.0065, -0.0105, -0.0415]], 'min_x': 117.5, 'max_x': 232.5, 'min_y': 117.5, 'max_y': 232.5, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': True, 'save_config_pending_items': {'bed_mesh default': {'version': '1', 'points': '\n  0.014500, -0.011500, -0.002000, -0.022000, -0.017500\n  -0.017000, -0.045000, -0.009000, -0.027000, -0.035000\n  -0.018000, -0.015000, 0.002500, -0.022000, -0.024500\n  -0.052500, -0.038000, -0.018000, -0.049500, -0.051500\n  0.004000, 0.020000, 0.006500, 0.023000, 0.031000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '60.0', 'max_x': '290.0', 'min_y': '60.0', 'max_y': '290.0'}}}}
2024-03-31 01:09:01,002 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-31 01:09:01,003 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-31 01:09:01,004 [printer.py:reinit()] - # Extruders: 1
2024-03-31 01:09:01,004 [printer.py:reinit()] - # Temperature devices: 2
2024-03-31 01:09:01,004 [printer.py:reinit()] - # Fans: 4
2024-03-31 01:09:01,004 [printer.py:reinit()] - # Output pins: 0
2024-03-31 01:09:01,004 [printer.py:reinit()] - # Leds: 1
2024-03-31 01:09:01,006 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-31 01:09:01,036 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-31 01:09:01,039 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-31 01:09:01,364 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-31 01:09:01,365 [screen.py:init_klipper()] - Printer initialized
2024-03-31 00:17:22,040 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-31 00:17:22,041 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-64-g1c9d82a
2024-03-31 00:17:22,042 [functions.py:log_start()] - Python version: 3.9
2024-03-31 00:17:22,457 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-31 00:17:22,458 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-03-31 00:17:22,488 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-31 00:17:22,491 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-03-31 00:17:22,492 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-31 00:17:22,885 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-03-31 00:17:22,885 [config.py:install_language()] - Using lang en
2024-03-31 00:17:22,923 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-31 00:17:22,926 [screen.py:__init__()] - Wayland: False Display name: :0
2024-03-31 00:17:22,931 [screen.py:__init__()] - Screen resolution: 800x480
2024-03-31 00:17:22,934 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-03-31 00:17:25,546 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-31 00:17:25,559 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-03-31 00:17:25,569 [screen.py:initial_connection()] - Default printer: None
2024-03-31 00:17:25,648 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-31 00:17:25,648 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-31 00:17:25,748 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-31 00:17:25,763 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-31 00:17:25,764 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-31 00:17:25,801 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-31 00:17:25,821 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-31 00:17:25,840 [_logging.py:info()] - Websocket connected
2024-03-31 00:17:25,840 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-31 00:17:26,087 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-31 00:17:26,107 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-31 00:17:26,126 [printer.py:configure_cameras()] - Cameras: []
2024-03-31 00:17:26,127 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-31 00:17:26,128 [screen.py:init_klipper()] - Klipper not connected
2024-03-31 00:17:29,037 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-31 00:17:29,056 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-31 00:17:29,057 [screen.py:init_klipper()] - Klipper not connected
2024-03-31 00:17:32,037 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-31 00:17:32,060 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-31 00:17:32,061 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-31 00:17:32,100 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-03-31 00:17:35,039 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-31 00:17:35,071 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-31 00:17:35,097 [printer.py:configure_cameras()] - Cameras: []
2024-03-31 00:17:35,098 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-31 00:17:35,099 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-31 00:17:35,129 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-03-31 00:17:38,037 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-31 00:17:38,056 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-31 00:17:38,075 [printer.py:configure_cameras()] - Cameras: []
2024-03-31 00:17:38,075 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-31 00:17:38,076 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-31 00:17:38,799 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-31 00:17:38,902 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.750'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.03', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.042500, -0.010500, 0.001500\n-0.006500, 0.013500, -0.005000\n-0.006500, -0.010500, -0.041500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '117.5', 'max_x': '232.5', 'min_y': '117.5', 'max_y': '232.5'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.75, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.03, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0425, -0.0105, 0.0015], [-0.0065, 0.0135, -0.005], [-0.0065, -0.0105, -0.0415]], 'min_x': 117.5, 'max_x': 232.5, 'min_y': 117.5, 'max_y': 232.5, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-31 00:17:38,908 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-31 00:17:38,910 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-03-31 00:17:38,911 [printer.py:reinit()] - # Extruders: 1
2024-03-31 00:17:38,912 [printer.py:reinit()] - # Temperature devices: 2
2024-03-31 00:17:38,912 [printer.py:reinit()] - # Fans: 4
2024-03-31 00:17:38,915 [printer.py:reinit()] - # Output pins: 0
2024-03-31 00:17:38,915 [printer.py:reinit()] - # Leds: 1
2024-03-31 00:17:38,916 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-31 00:17:38,961 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-31 00:17:38,966 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-03-31 00:17:39,245 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-03-31 00:17:39,246 [screen.py:init_klipper()] - Printer initialized
2024-03-31 00:17:39,249 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-31 00:17:39,250 [printer.py:change_state()] - Adding callback for state: startup
2024-03-31 00:17:40,368 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-31 00:17:40,369 [printer.py:change_state()] - Adding callback for state: ready
2024-03-31 00:17:40,371 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-31 00:17:40,377 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-31 00:17:40,528 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-31 00:17:40,544 [main_menu.py:add_device()] - Adding device: extruder
2024-03-31 00:17:40,556 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-31 00:17:40,568 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-03-31 00:17:40,622 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-31 00:17:40,624 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-31 00:17:40,642 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-03-31 00:17:40,716 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-03-31 00:17:40,716 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-31 00:17:40,738 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-03-31 00:17:43,820 [screen.py:_load_panel()] - Loading panel: move
2024-03-31 00:17:43,945 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-31 00:17:45,122 [screen.py:_load_panel()] - Loading panel: menu
2024-03-31 00:17:45,388 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-31 00:17:45,419 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-31 00:17:46,034 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-31 00:17:46,073 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-31 00:17:46,074 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-31 00:17:46,095 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-31 00:17:46,096 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-31 00:17:46,132 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-03-31 00:17:46,132 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-31 00:17:46,154 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-31 00:17:46,156 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-31 00:18:10,671 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-31 00:18:10,717 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-31 00:18:12,759 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-03-31 00:18:12,767 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-07 22:08:42,183 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-07 22:08:42,221 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-07 22:08:43,117 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-07 22:08:43,469 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-07 22:08:43,500 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-07 22:08:44,338 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-07 22:15:07,206 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-07 22:15:07,275 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-07 22:15:11,726 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-07 22:15:17,285 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-07 22:15:17,324 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-07 22:15:18,583 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-04-07 22:15:18,640 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2024-04-07 22:15:24,737 [screen.py:show_popup_message()] - echo: PARK_HZ 
2024-04-07 22:15:24,758 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK_HZ'}
2024-04-07 22:23:27,695 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-07 22:23:27,750 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-07 22:23:29,123 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-07 22:23:29,795 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-07 22:23:29,826 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-07 22:23:31,242 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-07 22:27:25,070 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-07 22:27:25,119 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-07 22:27:25,929 [screen.py:_load_panel()] - Loading panel: shutdown
2024-04-07 22:27:25,978 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > shutdown
2024-04-07 22:27:28,473 [KlippyWebsocket.py:emergency_stop()] - Sending printer.emergency_stop
2024-04-07 22:27:28,475 [KlippyWebsocket.py:emergency_stop()] - Sending printer.emergency_stop
2024-04-07 22:27:28,715 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-04-07 22:27:28,716 [printer.py:change_state()] - Adding callback for state: shutdown
2024-04-07 22:27:28,726 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-07 22:27:28,728 [screen.py:show_panel()] - Reinitializing panel
2024-04-07 22:27:28,786 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-07 22:30:33,877 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2024-04-07 22:30:33,928 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-04-07 22:30:33,928 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-07 22:30:33,936 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-07 22:30:33,937 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-07 22:30:33,939 [screen.py:show_panel()] - Reinitializing panel
2024-04-07 22:30:33,995 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-07 22:30:36,867 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-07 22:30:36,889 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-07 22:30:36,910 [printer.py:configure_cameras()] - Cameras: []
2024-04-07 22:30:36,911 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-07 22:30:36,911 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-07 22:30:37,189 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-07 22:30:37,235 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.750'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.03', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.042500, -0.010500, 0.001500\n-0.006500, 0.013500, -0.005000\n-0.006500, -0.010500, -0.041500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '117.5', 'max_x': '232.5', 'min_y': '117.5', 'max_y': '232.5'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.75, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.03, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0425, -0.0105, 0.0015], [-0.0065, 0.0135, -0.005], [-0.0065, -0.0105, -0.0415]], 'min_x': 117.5, 'max_x': 232.5, 'min_y': 117.5, 'max_y': 232.5, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-07 22:30:37,241 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-07 22:30:37,242 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-04-07 22:30:37,243 [printer.py:reinit()] - # Extruders: 1
2024-04-07 22:30:37,243 [printer.py:reinit()] - # Temperature devices: 2
2024-04-07 22:30:37,243 [printer.py:reinit()] - # Fans: 4
2024-04-07 22:30:37,243 [printer.py:reinit()] - # Output pins: 0
2024-04-07 22:30:37,243 [printer.py:reinit()] - # Leds: 1
2024-04-07 22:30:37,244 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-07 22:30:37,269 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-07 22:30:37,272 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-07 22:30:37,606 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-07 22:30:37,607 [screen.py:init_klipper()] - Printer initialized
2024-04-07 22:30:37,607 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-07 22:30:37,608 [printer.py:change_state()] - Adding callback for state: startup
2024-04-07 22:30:39,473 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-07 22:30:39,474 [printer.py:change_state()] - Adding callback for state: ready
2024-04-07 22:30:39,476 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-07 22:30:39,481 [screen.py:show_panel()] - Reinitializing panel
2024-04-07 22:30:39,597 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-07 22:30:39,613 [main_menu.py:add_device()] - Adding device: extruder
2024-04-07 22:30:39,621 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-07 22:30:39,629 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-07 22:30:39,680 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-07 22:30:39,682 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-07 22:30:39,724 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-07 22:30:39,727 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-07 22:30:39,752 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-07 22:30:52,184 [screen.py:show_panel()] - Reinitializing panel
2024-04-07 22:30:52,357 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-07 22:30:53,706 [screen.py:show_panel()] - Reinitializing panel
2024-04-07 22:30:53,874 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-07 22:30:53,904 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-07 22:30:54,453 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-07 22:31:23,804 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-07 22:31:23,840 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-07 22:31:25,046 [screen.py:show_panel()] - Reinitializing panel
2024-04-07 22:31:25,122 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2024-04-07 22:31:28,694 [screen.py:show_popup_message()] - echo: PARK_HZ 
2024-04-07 22:31:28,704 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK_HZ'}
2024-04-07 22:32:40,412 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-07 22:32:40,468 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-07 22:32:41,471 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-07 22:32:42,672 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-07 22:32:42,703 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-07 22:32:43,252 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-07 22:36:29,807 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-07 22:38:57,829 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-07 22:40:30,453 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-07 22:42:24,991 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-07 22:43:53,397 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-07 22:44:38,237 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-07 22:48:09,269 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-07 22:49:13,581 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-07 22:51:52,950 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-07 23:00:54,388 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-07 23:00:54,389 [printer.py:change_state()] - Adding callback for state: printing
2024-04-07 23:00:54,409 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-07 23:00:54,634 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-07 23:00:54,644 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-07 23:00:54,664 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cube-100.gcode Size: 136971
2024-04-07 23:00:54,679 [job_status.py:show_file_thumbnail()] - EM_Cube-100.gcode
2024-04-07 23:07:36,537 [screen.py:show_popup_message()] - error: Retries aborting: Probed points range is increasing. Possibly Z motor numbering is wrong
2024-04-07 23:07:38,664 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2024-04-07 23:07:38,752 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-07 23:07:38,753 [printer.py:change_state()] - Adding callback for state: ready
2024-04-07 23:07:38,767 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'error'
2024-04-07 23:11:48,698 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-07 23:11:48,699 [printer.py:change_state()] - Adding callback for state: printing
2024-04-07 23:11:48,715 [job_status.py:set_state()] - Changing job_status state from 'error' to 'printing'
2024-04-07 23:11:48,794 [screen.py:show_panel()] - Reinitializing panel
2024-04-07 23:11:48,968 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-07 23:11:48,978 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-07 23:11:48,992 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cube-100.gcode Size: 136971
2024-04-07 23:11:49,002 [job_status.py:show_file_thumbnail()] - EM_Cube-100.gcode
2024-04-07 23:20:05,389 [screen.py:_load_panel()] - Loading panel: fine_tune
2024-04-07 23:20:05,523 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-04-07 23:20:06,242 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-04-07 23:20:07,285 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-07 23:27:48,583 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-07 23:27:48,583 [printer.py:change_state()] - Adding callback for state: ready
2024-04-07 23:32:41,731 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-07 23:32:41,732 [printer.py:change_state()] - Adding callback for state: printing
2024-04-07 23:32:41,746 [screen.py:show_panel()] - Reinitializing panel
2024-04-07 23:32:41,911 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-07 23:32:41,921 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-07 23:32:41,936 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cube-0.99.gcode Size: 136992
2024-04-07 23:32:41,945 [job_status.py:show_file_thumbnail()] - EM_Cube-0.99.gcode
2024-04-07 23:45:05,710 [screen.py:show_panel()] - Reinitializing panel
2024-04-07 23:45:05,801 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-04-07 23:45:06,091 [fine_tune.py:change_percent_delta()] - ### Delta 25
2024-04-07 23:45:07,307 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-04-07 23:45:07,623 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-07 23:45:31,080 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-07 23:45:42,791 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-07 23:45:43,893 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-07 23:49:32,957 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-07 23:52:23,687 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-07 23:53:32,317 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-07 23:53:32,317 [printer.py:change_state()] - Adding callback for state: ready
2024-04-08 00:25:51,832 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 00:25:51,872 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-08 00:25:51,887 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-04-08 00:25:51,894 [job_status.py:update_file_metadata()] - Update Metadata. File: EM_Cube-0.99.gcode Size: 136992
2024-04-08 00:25:51,903 [job_status.py:show_file_thumbnail()] - EM_Cube-0.99.gcode
2024-04-08 00:25:52,921 [printer.py:get_probe()] - Probe type: probe
2024-04-08 00:25:52,952 [KlippyGtk.py:Dialog()] - Showing dialog Save Z (width=800, height=480)
2024-04-08 00:25:53,539 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-08 00:25:53,540 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: Z_OFFSET_APPLY_PROBE
2024-04-08 00:25:53,541 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SAVE_CONFIG
2024-04-08 00:25:53,639 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-04-08 00:25:54,374 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-08 00:25:54,375 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SAVE_CONFIG'}
2024-04-08 00:25:54,872 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-08 00:25:54,872 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-08 00:25:54,874 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-08 00:25:54,874 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-08 00:25:54,880 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 00:25:54,943 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-08 00:25:57,868 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 00:25:57,892 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-08 00:25:57,911 [printer.py:configure_cameras()] - Cameras: []
2024-04-08 00:25:57,912 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 00:25:57,913 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-08 00:25:58,133 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-08 00:25:58,179 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.820'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '0'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.03', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.047000, 0.030500, 0.021500, 0.012000, 0.009000\n0.006000, 0.008000, 0.009000, 0.016500, -0.027500\n0.001000, -0.002500, 0.004000, -0.004000, -0.023000\n-0.008000, 0.011000, 0.010500, 0.009500, -0.017500\n0.077000, 0.077500, 0.076500, 0.073500, 0.063500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '310.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.82, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.03, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.047, 0.0305, 0.0215, 0.012, 0.009], [0.006, 0.008, 0.009, 0.0165, -0.0275], [0.001, -0.0025, 0.004, -0.004, -0.023], [-0.008, 0.011, 0.0105, 0.0095, -0.0175], [0.077, 0.0775, 0.0765, 0.0735, 0.0635]], 'min_x': 40.0, 'max_x': 310.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-08 00:25:58,185 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-08 00:25:58,187 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-04-08 00:25:58,187 [printer.py:reinit()] - # Extruders: 1
2024-04-08 00:25:58,188 [printer.py:reinit()] - # Temperature devices: 2
2024-04-08 00:25:58,188 [printer.py:reinit()] - # Fans: 4
2024-04-08 00:25:58,188 [printer.py:reinit()] - # Output pins: 0
2024-04-08 00:25:58,188 [printer.py:reinit()] - # Leds: 1
2024-04-08 00:25:58,188 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-08 00:25:58,216 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-08 00:25:58,219 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-08 00:25:58,550 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-08 00:25:58,550 [screen.py:init_klipper()] - Printer initialized
2024-04-08 00:25:58,551 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-08 00:25:58,552 [printer.py:change_state()] - Adding callback for state: startup
2024-04-08 00:26:00,417 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-08 00:26:00,417 [printer.py:change_state()] - Adding callback for state: ready
2024-04-08 00:26:00,420 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-08 00:26:00,426 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 00:26:00,599 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-08 00:26:00,630 [main_menu.py:add_device()] - Adding device: extruder
2024-04-08 00:26:00,643 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-08 00:26:00,658 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-08 00:26:00,727 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 00:26:00,729 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-08 00:26:00,772 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-08 00:26:00,775 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-08 00:26:00,796 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-08 00:27:09,374 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-08 00:27:09,375 [printer.py:change_state()] - Adding callback for state: printing
2024-04-08 00:27:09,397 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 00:27:09,586 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-08 00:27:09,598 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-08 00:27:09,620 [job_status.py:update_file_metadata()] - Update Metadata. File: calibration-cube(1).gcode Size: 867218
2024-04-08 00:27:09,632 [job_status.py:show_file_thumbnail()] - calibration-cube(1).gcode
2024-04-08 00:52:16,967 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-04-08 00:52:17,520 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-08 00:52:17,520 [job_status.py:cancel_confirm()] - Canceling print
2024-04-08 00:52:17,521 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-04-08 00:52:17,527 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-04-08 00:52:21,251 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-08 00:52:21,251 [printer.py:change_state()] - Adding callback for state: ready
2024-04-08 00:52:21,269 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-04-08 00:53:45,981 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-08 00:53:45,981 [printer.py:change_state()] - Adding callback for state: printing
2024-04-08 00:53:46,001 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-08 00:53:46,011 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Patch-0.2mm.gcode Size: 148776
2024-04-08 00:53:46,020 [job_status.py:show_file_thumbnail()] - First_Layer_Patch-0.2mm.gcode
2024-04-08 00:53:46,114 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 00:53:46,368 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-08 00:53:46,378 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-08 00:53:46,392 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Patch-0.2mm.gcode Size: 148776
2024-04-08 00:53:46,402 [job_status.py:show_file_thumbnail()] - First_Layer_Patch-0.2mm.gcode
2024-04-08 01:02:28,528 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 01:02:28,617 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-04-08 01:02:29,998 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-04-08 01:02:37,120 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-04-08 01:02:50,194 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-04-08 01:03:15,518 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-04-08 01:03:15,837 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-04-08 01:03:51,711 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 01:03:51,799 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-08 01:03:51,839 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Patch-0.2mm.gcode Size: 148776
2024-04-08 01:03:51,860 [job_status.py:show_file_thumbnail()] - First_Layer_Patch-0.2mm.gcode
2024-04-08 01:03:52,642 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-04-08 01:03:53,264 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-08 01:03:53,264 [job_status.py:cancel_confirm()] - Canceling print
2024-04-08 01:03:53,265 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-04-08 01:03:53,273 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-04-08 01:04:01,411 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-08 01:04:01,411 [printer.py:change_state()] - Adding callback for state: ready
2024-04-08 01:04:01,432 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-04-08 00:17:26,730 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-08 00:17:26,731 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-64-g1c9d82a
2024-04-08 00:17:26,732 [functions.py:log_start()] - Python version: 3.9
2024-04-08 00:17:27,044 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-08 00:17:27,045 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-08 00:17:27,071 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-08 00:17:27,075 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-04-08 00:17:27,077 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-08 00:17:27,218 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-08 00:17:27,219 [config.py:install_language()] - Using lang en
2024-04-08 00:17:27,256 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-08 00:17:27,259 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-08 00:17:27,265 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-08 00:17:27,268 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-08 00:17:29,501 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-08 00:17:29,514 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-08 00:17:29,525 [screen.py:initial_connection()] - Default printer: None
2024-04-08 00:17:29,605 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-08 00:17:29,605 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-08 00:17:29,679 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-08 00:17:29,699 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-08 00:17:29,700 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 00:17:29,751 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-08 00:17:29,772 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-08 00:17:29,793 [_logging.py:info()] - Websocket connected
2024-04-08 00:17:29,793 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-08 00:17:29,797 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 00:17:29,816 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-08 00:17:29,836 [printer.py:configure_cameras()] - Cameras: []
2024-04-08 00:17:29,836 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 00:17:29,837 [screen.py:init_klipper()] - Klipper not connected
2024-04-08 00:17:33,158 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 00:17:33,186 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 00:17:33,198 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-08 00:17:33,252 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-08 00:17:36,153 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 00:17:36,192 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-08 00:17:36,236 [printer.py:configure_cameras()] - Cameras: []
2024-04-08 00:17:36,237 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 00:17:36,238 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-08 00:17:36,269 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-08 00:17:36,320 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.820'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '0'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.03', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.047000, 0.030500, 0.021500, 0.012000, 0.009000\n0.006000, 0.008000, 0.009000, 0.016500, -0.027500\n0.001000, -0.002500, 0.004000, -0.004000, -0.023000\n-0.008000, 0.011000, 0.010500, 0.009500, -0.017500\n0.077000, 0.077500, 0.076500, 0.073500, 0.063500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '310.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.82, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.03, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.047, 0.0305, 0.0215, 0.012, 0.009], [0.006, 0.008, 0.009, 0.0165, -0.0275], [0.001, -0.0025, 0.004, -0.004, -0.023], [-0.008, 0.011, 0.0105, 0.0095, -0.0175], [0.077, 0.0775, 0.0765, 0.0735, 0.0635]], 'min_x': 40.0, 'max_x': 310.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-08 00:17:36,325 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-08 00:17:36,327 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-04-08 00:17:36,328 [printer.py:reinit()] - # Extruders: 1
2024-04-08 00:17:36,328 [printer.py:reinit()] - # Temperature devices: 2
2024-04-08 00:17:36,329 [printer.py:reinit()] - # Fans: 4
2024-04-08 00:17:36,329 [printer.py:reinit()] - # Output pins: 0
2024-04-08 00:17:36,329 [printer.py:reinit()] - # Leds: 1
2024-04-08 00:17:36,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-08 00:17:36,366 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-08 00:17:36,371 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-08 00:17:36,699 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-08 00:17:36,699 [screen.py:init_klipper()] - Printer initialized
2024-04-08 00:17:36,700 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-08 00:17:36,700 [printer.py:change_state()] - Adding callback for state: startup
2024-04-08 00:17:40,126 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-08 00:17:40,127 [printer.py:change_state()] - Adding callback for state: ready
2024-04-08 00:17:40,128 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-08 00:17:40,133 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-08 00:17:40,533 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-08 00:17:40,558 [main_menu.py:add_device()] - Adding device: extruder
2024-04-08 00:17:40,574 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-08 00:17:40,643 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-08 00:17:40,817 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 00:17:40,822 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-08 00:17:40,849 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-08 00:17:40,966 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-08 00:17:40,967 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-08 00:17:40,997 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-08 00:17:43,781 [screen.py:_load_panel()] - Loading panel: extrude
2024-04-08 00:17:43,897 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-08 00:17:44,719 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2024-04-08 00:17:45,323 [screen.py:show_popup_message()] - error: // Unknown command:"G1 -"
2024-04-08 00:17:46,157 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-08 00:17:46,250 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-08 00:17:46,252 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-08 00:17:46,276 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-08 00:17:46,277 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-08 00:17:46,313 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-08 00:17:46,313 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-08 00:17:46,333 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-08 00:17:50,411 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2024-04-08 00:17:50,439 [screen.py:show_popup_message()] - error: // Unknown command:"G1 -"
2024-04-08 00:17:53,071 [extrude.py:change_distance()] - ### Distance 25
2024-04-08 00:17:55,231 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-08 00:17:55,233 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F120'}
2024-04-08 00:17:55,258 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2024-04-08 00:17:57,351 [extrude.py:change_speed()] - ### Speed 25
2024-04-08 00:17:57,823 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-08 00:17:57,825 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2024-04-08 00:17:57,848 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2024-04-08 00:17:59,456 [screen.py:_load_panel()] - Loading panel: temperature
2024-04-08 00:17:59,492 [temperature.py:add_device()] - Adding device: extruder
2024-04-08 00:17:59,508 [temperature.py:add_device()] - Adding device: heater_bed
2024-04-08 00:17:59,525 [temperature.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-08 00:17:59,536 [temperature.py:select_heater()] - Selecting extruder
2024-04-08 00:17:59,538 [temperature.py:select_heater()] - Selecting heater_bed
2024-04-08 00:17:59,593 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2024-04-08 00:17:59,811 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S0
2024-04-08 00:17:59,813 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S0
2024-04-08 00:18:05,839 [temperature.py:verify_max_temp()] - 200/300
2024-04-08 00:18:05,840 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S200
2024-04-08 09:20:18,436 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 09:20:18,554 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-08 09:20:20,052 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=1500'}
2024-04-08 09:20:20,072 [screen.py:show_popup_message()] - error: // Unknown command:"G1 -"
2024-04-08 09:20:22,788 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-08 09:20:22,790 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2024-04-08 09:20:24,913 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-08 09:20:24,914 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2024-04-08 09:20:28,965 [extrude.py:change_speed()] - ### Speed 5
2024-04-08 09:20:31,189 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-08 09:20:31,192 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F300'}
2024-04-08 09:20:35,430 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-08 09:20:35,433 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F300'}
2024-04-08 09:20:42,803 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-08 09:20:42,805 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F300'}
2024-04-08 09:20:45,683 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-08 09:20:45,685 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F300'}
2024-04-08 09:20:48,923 [screen.py:_load_panel()] - Loading panel: shutdown
2024-04-08 09:20:49,006 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > shutdown
2024-04-08 09:20:49,816 [shutdown.py:reboot_poweroff()] - http://127.0.0.1:7125
2024-04-08 09:20:49,846 [KlippyGtk.py:Dialog()] - Showing dialog Shutdown (width=800, height=480)
2024-04-08 09:20:50,658 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-08 09:21:12,493 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-08 09:21:12,494 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-64-g1c9d82a
2024-04-08 09:21:12,494 [functions.py:log_start()] - Python version: 3.9
2024-04-08 09:21:12,902 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-08 09:21:12,903 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-08 09:21:12,937 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-08 09:21:12,941 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-04-08 09:21:12,942 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-08 09:21:13,331 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-08 09:21:13,332 [config.py:install_language()] - Using lang en
2024-04-08 09:21:13,365 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-08 09:21:13,368 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-08 09:21:13,373 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-08 09:21:13,376 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-08 09:21:15,951 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-08 09:21:15,965 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-08 09:21:15,975 [screen.py:initial_connection()] - Default printer: None
2024-04-08 09:21:16,054 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-08 09:21:16,055 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-08 09:21:16,157 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-08 09:21:16,172 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-08 09:21:16,172 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 09:21:16,212 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-08 09:21:16,232 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-08 09:21:16,250 [_logging.py:info()] - Websocket connected
2024-04-08 09:21:16,251 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-08 09:21:16,258 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 09:21:16,278 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-08 09:21:16,297 [printer.py:configure_cameras()] - Cameras: []
2024-04-08 09:21:16,298 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 09:21:16,298 [screen.py:init_klipper()] - Klipper not connected
2024-04-08 09:21:19,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 09:21:19,365 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 09:21:19,365 [screen.py:init_klipper()] - Klipper not connected
2024-04-08 09:21:22,347 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 09:21:22,370 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 09:21:22,371 [screen.py:init_klipper()] - Klipper not connected
2024-04-08 09:21:25,348 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 09:21:25,372 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 09:21:25,372 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-08 09:21:25,413 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-08 09:21:28,352 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 09:21:28,388 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-08 09:21:28,414 [printer.py:configure_cameras()] - Cameras: []
2024-04-08 09:21:28,415 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 09:21:28,415 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-08 09:21:28,812 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-08 09:21:28,901 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.820'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '0'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.03', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.047000, 0.030500, 0.021500, 0.012000, 0.009000\n0.006000, 0.008000, 0.009000, 0.016500, -0.027500\n0.001000, -0.002500, 0.004000, -0.004000, -0.023000\n-0.008000, 0.011000, 0.010500, 0.009500, -0.017500\n0.077000, 0.077500, 0.076500, 0.073500, 0.063500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '310.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.82, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.03, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.047, 0.0305, 0.0215, 0.012, 0.009], [0.006, 0.008, 0.009, 0.0165, -0.0275], [0.001, -0.0025, 0.004, -0.004, -0.023], [-0.008, 0.011, 0.0105, 0.0095, -0.0175], [0.077, 0.0775, 0.0765, 0.0735, 0.0635]], 'min_x': 40.0, 'max_x': 310.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-08 09:21:28,906 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-08 09:21:28,909 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-04-08 09:21:28,910 [printer.py:reinit()] - # Extruders: 1
2024-04-08 09:21:28,911 [printer.py:reinit()] - # Temperature devices: 2
2024-04-08 09:21:28,913 [printer.py:reinit()] - # Fans: 4
2024-04-08 09:21:28,913 [printer.py:reinit()] - # Output pins: 0
2024-04-08 09:21:28,914 [printer.py:reinit()] - # Leds: 1
2024-04-08 09:21:28,915 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-08 09:21:28,962 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-08 09:21:28,966 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-08 09:21:29,215 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-08 09:21:29,216 [screen.py:init_klipper()] - Printer initialized
2024-04-08 09:21:29,216 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-08 09:21:29,217 [printer.py:change_state()] - Adding callback for state: startup
2024-04-08 09:21:30,383 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-08 09:21:30,384 [printer.py:change_state()] - Adding callback for state: ready
2024-04-08 09:21:30,385 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-08 09:21:30,389 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-08 09:21:30,561 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-08 09:21:30,580 [main_menu.py:add_device()] - Adding device: extruder
2024-04-08 09:21:30,594 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-08 09:21:30,607 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-08 09:21:30,673 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 09:21:30,676 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-08 09:21:30,696 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-08 09:21:30,797 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-08 09:21:30,798 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-08 09:21:30,832 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-08 09:21:36,344 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-08 09:21:36,381 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-08 09:21:36,384 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-08 09:21:36,406 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-08 09:21:36,407 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-08 09:21:36,443 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-08 09:21:36,445 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-08 09:21:36,465 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-08 09:21:37,173 [screen.py:_load_panel()] - Loading panel: move
2024-04-08 09:21:37,331 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-08 09:21:38,869 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 09:21:38,908 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 09:21:40,875 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-08 09:21:40,875 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-08 09:21:40,883 [screen.py:_load_panel()] - Loading panel: menu
2024-04-08 09:21:41,286 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-08 09:21:41,298 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-08 09:21:41,335 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-08 09:21:41,341 [menu.py:arrangeMenuItems()] - X > more power
2024-04-08 09:21:41,346 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-08 09:21:41,356 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-08 09:21:41,371 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-08 09:21:42,135 [screen.py:_load_panel()] - Loading panel: led
2024-04-08 09:21:42,145 [led.py:color_selector()] - neopixel sb_leds
2024-04-08 09:21:42,166 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/database/item?namespace=mainsail&key=miscellaneous.entries
2024-04-08 09:21:42,194 [KlippyRest.py:_do_request()] - 404 Client Error>>Key miscellaneous in namespace mainsail not found for url>>http://127.0.0.1:7125/server/database/item?namespace=mainsail&key=miscellaneous.entries
2024-04-08 09:21:42,195 [led.py:color_selector()] - Adding preset: off
2024-04-08 09:21:42,198 [led.py:color_selector()] - Adding preset: on
2024-04-08 09:21:42,240 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > led
2024-04-08 09:21:44,390 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="sb_leds" RED=1.0 GREEN=1.0 BLUE=1.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-04-08 09:21:13,899 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-08 09:21:13,900 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-64-g1c9d82a
2024-04-08 09:21:13,900 [functions.py:log_start()] - Python version: 3.9
2024-04-08 09:21:14,174 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-08 09:21:14,175 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-08 09:21:14,205 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-08 09:21:14,210 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-04-08 09:21:14,212 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-08 09:21:14,363 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-08 09:21:14,364 [config.py:install_language()] - Using lang en
2024-04-08 09:21:14,395 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-08 09:21:14,398 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-08 09:21:14,404 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-08 09:21:14,407 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-08 09:21:15,582 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-08 09:21:15,602 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-08 09:21:15,615 [screen.py:initial_connection()] - Default printer: None
2024-04-08 09:21:15,703 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-08 09:21:15,704 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-08 09:21:15,783 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-08 09:21:15,803 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-08 09:21:15,804 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 09:21:15,843 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-08 09:21:15,868 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-08 09:21:15,888 [_logging.py:info()] - Websocket connected
2024-04-08 09:21:15,889 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-08 09:21:16,181 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 09:21:16,201 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-08 09:21:16,223 [printer.py:configure_cameras()] - Cameras: []
2024-04-08 09:21:16,224 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 09:21:16,225 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-08 09:21:16,256 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-08 09:21:16,381 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.820'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '0'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.03', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.047000, 0.030500, 0.021500, 0.012000, 0.009000\n0.006000, 0.008000, 0.009000, 0.016500, -0.027500\n0.001000, -0.002500, 0.004000, -0.004000, -0.023000\n-0.008000, 0.011000, 0.010500, 0.009500, -0.017500\n0.077000, 0.077500, 0.076500, 0.073500, 0.063500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '310.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.82, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.03, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.047, 0.0305, 0.0215, 0.012, 0.009], [0.006, 0.008, 0.009, 0.0165, -0.0275], [0.001, -0.0025, 0.004, -0.004, -0.023], [-0.008, 0.011, 0.0105, 0.0095, -0.0175], [0.077, 0.0775, 0.0765, 0.0735, 0.0635]], 'min_x': 40.0, 'max_x': 310.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-08 09:21:16,385 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-08 09:21:16,387 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-04-08 09:21:16,388 [printer.py:reinit()] - # Extruders: 1
2024-04-08 09:21:16,388 [printer.py:reinit()] - # Temperature devices: 2
2024-04-08 09:21:16,388 [printer.py:reinit()] - # Fans: 4
2024-04-08 09:21:16,389 [printer.py:reinit()] - # Output pins: 0
2024-04-08 09:21:16,389 [printer.py:reinit()] - # Leds: 1
2024-04-08 09:21:16,389 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-08 09:21:16,421 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-08 09:21:16,425 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-08 09:21:16,772 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-08 09:21:16,772 [screen.py:init_klipper()] - Printer initialized
2024-04-08 09:21:16,773 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-08 09:21:16,773 [printer.py:change_state()] - Adding callback for state: ready
2024-04-08 09:21:16,784 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-08 09:21:16,790 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-08 09:21:16,929 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-08 09:21:16,944 [main_menu.py:add_device()] - Adding device: extruder
2024-04-08 09:21:16,953 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-08 09:21:16,961 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-08 09:21:17,013 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 09:21:17,015 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-08 09:21:17,050 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-08 09:21:17,053 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-08 09:21:17,074 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-08 09:21:18,512 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-08 09:21:18,513 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-08 09:21:18,522 [screen.py:_load_panel()] - Loading panel: menu
2024-04-08 09:21:18,952 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-08 09:21:18,966 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-08 09:21:19,010 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-08 09:21:19,021 [menu.py:arrangeMenuItems()] - X > more power
2024-04-08 09:21:19,029 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-08 09:21:19,041 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-08 09:21:19,059 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-08 09:21:22,090 [screen.py:_load_panel()] - Loading panel: fan
2024-04-08 09:21:22,102 [fan.py:add_fan()] - Adding fan: fan
2024-04-08 09:21:22,133 [fan.py:add_fan()] - Adding fan: controller_fan controller_fan
2024-04-08 09:21:22,159 [fan.py:add_fan()] - Adding fan: heater_fan hotend_fan
2024-04-08 09:21:22,182 [fan.py:add_fan()] - Adding fan: heater_fan exhaust_fan
2024-04-08 09:21:22,267 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > fan
2024-04-08 09:21:23,751 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M106 S255
2024-04-08 09:21:39,926 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 09:21:39,982 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-08 09:21:39,999 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-08 09:21:40,045 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-08 09:21:40,052 [menu.py:arrangeMenuItems()] - X > more power
2024-04-08 09:21:40,059 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-08 09:21:40,072 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-08 09:21:40,092 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-08 09:21:41,215 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 09:21:41,251 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 09:21:42,520 [screen.py:_load_panel()] - Loading panel: temperature
2024-04-08 09:21:42,546 [temperature.py:add_device()] - Adding device: extruder
2024-04-08 09:21:42,555 [temperature.py:add_device()] - Adding device: heater_bed
2024-04-08 09:21:42,565 [temperature.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-08 09:21:42,574 [temperature.py:select_heater()] - Selecting extruder
2024-04-08 09:21:42,577 [temperature.py:select_heater()] - Selecting heater_bed
2024-04-08 09:21:42,623 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-04-08 09:21:47,762 [temperature.py:verify_max_temp()] - 150/300
2024-04-08 09:21:47,763 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S150
2024-04-08 09:53:16,590 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S0
2024-04-08 09:53:16,592 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S0
2024-04-08 09:53:17,618 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 09:53:17,659 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 09:53:18,711 [screen.py:_load_panel()] - Loading panel: move
2024-04-08 09:53:18,865 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-08 09:53:19,830 [screen.py:_load_panel()] - Loading panel: menu
2024-04-08 09:53:19,988 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-08 09:53:20,018 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-08 09:53:20,602 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-08 09:54:58,012 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-08 09:56:02,580 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-04-08 09:56:02,637 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu > gcode_macros
2024-04-08 09:56:04,819 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 09:56:04,868 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-08 09:56:04,899 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-08 09:56:05,683 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-08 09:56:05,722 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 09:56:07,285 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-08 09:56:07,285 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-08 09:56:07,331 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-08 09:56:07,346 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-08 09:56:07,382 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-08 09:56:07,388 [menu.py:arrangeMenuItems()] - X > more power
2024-04-08 09:56:07,393 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-08 09:56:07,403 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-08 09:56:07,419 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-08 09:56:13,083 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 09:56:13,120 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 10:56:13,775 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-08 12:50:14,035 [screen.py:close_screensaver()] - Closing Screensaver
2024-04-08 12:50:14,080 [screen.py:wake_screen()] - Screen wake up
2024-04-08 12:50:15,655 [screen.py:_load_panel()] - Loading panel: extrude
2024-04-08 12:50:15,742 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-08 12:50:16,683 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2024-04-08 12:50:18,925 [temperature.py:verify_max_temp()] - 200/300
2024-04-08 12:50:18,925 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S200
2024-04-08 12:50:24,149 [temperature.py:verify_max_temp()] - 50/120
2024-04-08 12:50:24,149 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S50
2024-04-08 12:50:25,934 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 12:50:25,997 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-08 12:50:35,634 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=120'}
2024-04-08 12:50:35,686 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2024-04-08 12:50:40,261 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2024-04-08 12:50:40,282 [screen.py:show_popup_message()] - error: // Unknown command:"G1 -"
2024-04-08 12:50:58,141 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=120'}
2024-04-08 12:50:58,169 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2024-04-08 12:51:25,957 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=120'}
2024-04-08 12:51:50,733 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=120'}
2024-04-08 12:52:07,615 [extrude.py:change_distance()] - ### Distance 5
2024-04-08 12:52:08,120 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-08 12:52:08,122 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+5 F120'}
2024-04-08 12:52:18,925 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-08 12:52:18,927 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+5 F120'}
2024-04-08 12:52:20,045 [extrude.py:change_distance()] - ### Distance 10
2024-04-08 12:52:21,205 [extrude.py:change_distance()] - ### Distance 15
2024-04-08 12:52:30,637 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=120'}
2024-04-08 12:53:08,581 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=120'}
2024-04-08 12:53:20,685 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 12:53:20,756 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 12:53:55,185 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-08 12:53:55,186 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-08 12:53:55,188 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-08 12:53:55,189 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-08 12:53:55,192 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 12:53:55,249 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-08 12:53:58,774 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 12:53:58,804 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-08 12:53:58,821 [printer.py:configure_cameras()] - Cameras: []
2024-04-08 12:53:58,822 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 12:53:58,822 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-08 12:53:58,844 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-08 12:53:58,885 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.820'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.03', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.047000, 0.030500, 0.021500, 0.012000, 0.009000\n0.006000, 0.008000, 0.009000, 0.016500, -0.027500\n0.001000, -0.002500, 0.004000, -0.004000, -0.023000\n-0.008000, 0.011000, 0.010500, 0.009500, -0.017500\n0.077000, 0.077500, 0.076500, 0.073500, 0.063500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '310.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.82, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.03, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.047, 0.0305, 0.0215, 0.012, 0.009], [0.006, 0.008, 0.009, 0.0165, -0.0275], [0.001, -0.0025, 0.004, -0.004, -0.023], [-0.008, 0.011, 0.0105, 0.0095, -0.0175], [0.077, 0.0775, 0.0765, 0.0735, 0.0635]], 'min_x': 40.0, 'max_x': 310.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-08 12:53:58,891 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-08 12:53:58,893 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-04-08 12:53:58,893 [printer.py:reinit()] - # Extruders: 1
2024-04-08 12:53:58,893 [printer.py:reinit()] - # Temperature devices: 2
2024-04-08 12:53:58,893 [printer.py:reinit()] - # Fans: 4
2024-04-08 12:53:58,893 [printer.py:reinit()] - # Output pins: 0
2024-04-08 12:53:58,894 [printer.py:reinit()] - # Leds: 1
2024-04-08 12:53:58,894 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-08 12:53:58,922 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-08 12:53:58,925 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-08 12:53:59,260 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-08 12:53:59,261 [screen.py:init_klipper()] - Printer initialized
2024-04-08 12:53:59,262 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-08 12:53:59,263 [printer.py:change_state()] - Adding callback for state: startup
2024-04-08 12:54:00,875 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-08 12:54:00,875 [printer.py:change_state()] - Adding callback for state: ready
2024-04-08 12:54:00,879 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-08 12:54:00,885 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 12:54:01,005 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-08 12:54:01,021 [main_menu.py:add_device()] - Adding device: extruder
2024-04-08 12:54:01,029 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-08 12:54:01,037 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-08 12:54:01,088 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 12:54:01,090 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-08 12:54:01,134 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-08 12:54:01,139 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-08 12:54:01,159 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-08 12:54:03,579 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=800, height=480)
2024-04-08 12:54:15,791 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-08 12:54:15,792 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-64-g1c9d82a
2024-04-08 12:54:15,792 [functions.py:log_start()] - Python version: 3.9
2024-04-08 12:54:15,925 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-08 12:54:15,926 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-08 12:54:15,944 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-08 12:54:15,948 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-04-08 12:54:15,949 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-08 12:54:16,080 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-08 12:54:16,081 [config.py:install_language()] - Using lang en
2024-04-08 12:54:16,106 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-08 12:54:16,109 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-08 12:54:16,113 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-08 12:54:16,118 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-08 12:54:16,594 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-08 12:54:16,607 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-08 12:54:16,616 [screen.py:initial_connection()] - Default printer: None
2024-04-08 12:54:16,698 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-08 12:54:16,699 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-08 12:54:16,768 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-08 12:54:16,782 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-08 12:54:16,782 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 12:54:16,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-08 12:54:16,828 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-08 12:54:16,846 [_logging.py:info()] - Websocket connected
2024-04-08 12:54:16,846 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-08 12:54:17,098 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 12:54:17,118 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-08 12:54:17,136 [printer.py:configure_cameras()] - Cameras: []
2024-04-08 12:54:17,136 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 12:54:17,137 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-08 12:54:17,158 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-08 12:54:17,448 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.820'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.03', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.047000, 0.030500, 0.021500, 0.012000, 0.009000\n0.006000, 0.008000, 0.009000, 0.016500, -0.027500\n0.001000, -0.002500, 0.004000, -0.004000, -0.023000\n-0.008000, 0.011000, 0.010500, 0.009500, -0.017500\n0.077000, 0.077500, 0.076500, 0.073500, 0.063500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '310.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.82, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.03, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.047, 0.0305, 0.0215, 0.012, 0.009], [0.006, 0.008, 0.009, 0.0165, -0.0275], [0.001, -0.0025, 0.004, -0.004, -0.023], [-0.008, 0.011, 0.0105, 0.0095, -0.0175], [0.077, 0.0775, 0.0765, 0.0735, 0.0635]], 'min_x': 40.0, 'max_x': 310.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-08 12:54:17,453 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-08 12:54:17,455 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f
2024-04-08 12:54:17,455 [printer.py:reinit()] - # Extruders: 1
2024-04-08 12:54:17,455 [printer.py:reinit()] - # Temperature devices: 2
2024-04-08 12:54:17,455 [printer.py:reinit()] - # Fans: 4
2024-04-08 12:54:17,456 [printer.py:reinit()] - # Output pins: 0
2024-04-08 12:54:17,456 [printer.py:reinit()] - # Leds: 1
2024-04-08 12:54:17,456 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-08 12:54:17,483 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-08 12:54:17,486 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-08 12:54:17,841 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-08 12:54:17,841 [screen.py:init_klipper()] - Printer initialized
2024-04-08 12:54:17,842 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-08 12:54:17,842 [printer.py:change_state()] - Adding callback for state: ready
2024-04-08 12:54:17,850 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-08 12:54:17,855 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-08 12:54:18,024 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-08 12:54:18,040 [main_menu.py:add_device()] - Adding device: extruder
2024-04-08 12:54:18,049 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-08 12:54:18,057 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-08 12:54:18,107 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 12:54:18,109 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-08 12:54:18,152 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-08 12:54:18,155 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-08 12:54:18,176 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-08 12:54:41,545 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=800, height=480)
2024-04-08 12:54:47,826 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-08 12:54:47,827 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-92-g11cebe8
2024-04-08 12:54:47,827 [functions.py:log_start()] - Python version: 3.9
2024-04-08 12:54:47,982 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-08 12:54:47,983 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-08 12:54:48,004 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-08 12:54:48,009 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-04-08 12:54:48,010 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-08 12:54:48,147 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-08 12:54:48,148 [config.py:install_language()] - Using lang en
2024-04-08 12:54:48,174 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-08 12:54:48,177 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-08 12:54:48,183 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-08 12:54:48,187 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-08 12:54:48,783 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-08 12:54:48,799 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-08 12:54:48,810 [screen.py:initial_connection()] - Default printer: None
2024-04-08 12:54:48,893 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-08 12:54:48,893 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-08 12:54:48,962 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-08 12:54:48,982 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-08 12:54:48,982 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 12:54:49,013 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-08 12:54:49,034 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-08 12:54:49,056 [_logging.py:info()] - Websocket connected
2024-04-08 12:54:49,057 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-08 12:54:49,416 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 12:54:49,436 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-08 12:54:49,456 [printer.py:configure_cameras()] - Cameras: []
2024-04-08 12:54:49,457 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 12:54:49,458 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-08 12:54:50,180 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
