2024-04-08 12:54:50,271 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.820'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.03', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.047000, 0.030500, 0.021500, 0.012000, 0.009000\n0.006000, 0.008000, 0.009000, 0.016500, -0.027500\n0.001000, -0.002500, 0.004000, -0.004000, -0.023000\n-0.008000, 0.011000, 0.010500, 0.009500, -0.017500\n0.077000, 0.077500, 0.076500, 0.073500, 0.063500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '310.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.82, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.03, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.047, 0.0305, 0.0215, 0.012, 0.009], [0.006, 0.008, 0.009, 0.0165, -0.0275], [0.001, -0.0025, 0.004, -0.004, -0.023], [-0.008, 0.011, 0.0105, 0.0095, -0.0175], [0.077, 0.0775, 0.0765, 0.0735, 0.0635]], 'min_x': 40.0, 'max_x': 310.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-08 12:54:50,276 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-08 12:54:50,278 [printer.py:reinit()] - Klipper version: v0.12.0-143-g01c7befa
2024-04-08 12:54:50,278 [printer.py:reinit()] - # Extruders: 1
2024-04-08 12:54:50,278 [printer.py:reinit()] - # Temperature devices: 2
2024-04-08 12:54:50,278 [printer.py:reinit()] - # Fans: 4
2024-04-08 12:54:50,279 [printer.py:reinit()] - # Output pins: 0
2024-04-08 12:54:50,279 [printer.py:reinit()] - # Leds: 1
2024-04-08 12:54:50,279 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-08 12:54:50,292 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-08 12:54:50,293 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-92-g11cebe8
2024-04-08 12:54:50,293 [functions.py:log_start()] - Python version: 3.9
2024-04-08 12:54:50,308 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-08 12:54:50,312 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-08 12:54:50,652 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-08 12:54:50,652 [screen.py:init_klipper()] - Printer initialized
2024-04-08 12:54:50,653 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-08 12:54:50,654 [printer.py:change_state()] - Adding callback for state: startup
2024-04-08 12:54:50,699 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=800, height=480)
2024-04-08 12:54:51,941 [base_panel.py:process_update()] - Update complete
2024-04-08 12:54:52,063 [KlippyWebsocket.py:on_close()] - Server Shutdown
2024-04-08 12:54:52,065 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2024-04-08 12:54:52,066 [screen.py:websocket_disconnected()] - ### websocket_disconnected
2024-04-08 12:54:52,068 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 12:54:52,142 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-08 12:54:52,239 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-08 12:54:52,242 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 12:54:52,307 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-08 12:54:52,327 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-08 12:54:52,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 12:54:52,341 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-08 12:55:02,776 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-08 12:55:02,777 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 12:55:02,814 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-08 12:55:02,844 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-08 12:55:02,871 [_logging.py:info()] - Websocket connected
2024-04-08 12:55:02,871 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-08 12:55:02,874 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 12:55:02,903 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-08 12:55:02,931 [printer.py:configure_cameras()] - Cameras: []
2024-04-08 12:55:02,932 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 12:55:02,932 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-08 12:55:02,966 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-08 12:55:03,120 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.820'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.03', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.047000, 0.030500, 0.021500, 0.012000, 0.009000\n0.006000, 0.008000, 0.009000, 0.016500, -0.027500\n0.001000, -0.002500, 0.004000, -0.004000, -0.023000\n-0.008000, 0.011000, 0.010500, 0.009500, -0.017500\n0.077000, 0.077500, 0.076500, 0.073500, 0.063500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '40.0', 'max_x': '310.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.82, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.03, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.047, 0.0305, 0.0215, 0.012, 0.009], [0.006, 0.008, 0.009, 0.0165, -0.0275], [0.001, -0.0025, 0.004, -0.004, -0.023], [-0.008, 0.011, 0.0105, 0.0095, -0.0175], [0.077, 0.0775, 0.0765, 0.0735, 0.0635]], 'min_x': 40.0, 'max_x': 310.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-08 12:55:03,126 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-08 12:55:03,127 [printer.py:reinit()] - Klipper version: v0.12.0-143-g01c7befa
2024-04-08 12:55:03,128 [printer.py:reinit()] - # Extruders: 1
2024-04-08 12:55:03,128 [printer.py:reinit()] - # Temperature devices: 2
2024-04-08 12:55:03,128 [printer.py:reinit()] - # Fans: 4
2024-04-08 12:55:03,128 [printer.py:reinit()] - # Output pins: 0
2024-04-08 12:55:03,128 [printer.py:reinit()] - # Leds: 1
2024-04-08 12:55:03,129 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-08 12:55:03,154 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-08 12:55:03,157 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-08 12:55:03,504 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-08 12:55:03,504 [screen.py:init_klipper()] - Printer initialized
2024-04-08 12:55:03,505 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-08 12:55:03,505 [printer.py:change_state()] - Adding callback for state: ready
2024-04-08 12:55:03,509 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-08 12:55:03,514 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-08 12:55:03,647 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-08 12:55:03,662 [main_menu.py:add_device()] - Adding device: extruder
2024-04-08 12:55:03,670 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-08 12:55:03,679 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-08 12:55:03,728 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 12:55:03,730 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-08 12:55:03,765 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-08 12:55:03,768 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-08 12:55:03,788 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-08 12:55:04,679 [base_panel.py:finish_updating()] - Finishing update
2024-04-08 12:55:04,687 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-08 12:55:04,688 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-08 12:55:04,708 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 12:55:26,950 [screen.py:_load_panel()] - Loading panel: extrude
2024-04-08 12:55:27,047 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-08 12:55:29,077 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=120'}
2024-04-08 12:56:29,220 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 12:56:29,256 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 12:56:30,298 [screen.py:_load_panel()] - Loading panel: move
2024-04-08 12:56:30,425 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-08 12:56:31,101 [screen.py:_load_panel()] - Loading panel: menu
2024-04-08 12:56:31,338 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-08 12:56:31,369 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-08 12:56:32,804 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-08 12:56:35,438 [screen.py:_load_panel()] - Loading panel: shutdown
2024-04-08 12:56:35,484 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu > shutdown
2024-04-08 12:57:08,583 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 12:57:08,636 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-08 12:57:08,694 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-08 12:57:11,021 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 12:57:11,090 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-08 12:57:13,281 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 12:57:13,352 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 12:57:14,142 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-08 12:57:17,566 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-08 12:57:17,568 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+10 F120'}
2024-04-08 12:57:23,325 [extrude.py:change_distance()] - ### Distance 25
2024-04-08 12:57:23,916 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-08 12:57:23,918 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F120'}
2024-04-08 12:57:30,220 [extrude.py:change_speed()] - ### Speed 5
2024-04-08 12:57:30,692 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-08 12:57:30,694 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-04-08 12:57:35,783 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-08 12:57:35,785 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-04-08 12:57:48,334 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 12:57:48,369 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 12:57:49,256 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-08 12:57:52,726 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 12:57:52,762 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 12:57:56,196 [main_menu.py:verify_max_temp()] - 60/120
2024-04-08 12:57:56,197 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S60
2024-04-08 12:57:58,964 [main_menu.py:verify_max_temp()] - 150/300
2024-04-08 12:57:58,965 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S150
2024-04-08 12:58:00,852 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-08 12:58:02,080 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-08 12:58:02,153 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-08 12:58:02,751 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-08 13:03:57,346 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-08 13:03:57,346 [printer.py:change_state()] - Adding callback for state: printing
2024-04-08 13:03:57,367 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-08 13:03:57,607 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-08 13:03:57,618 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-08 13:03:57,638 [job_status.py:update_file_metadata()] - Update Metadata. File: calibration-cube(1).gcode Size: 321596
2024-04-08 13:03:57,653 [job_status.py:show_file_thumbnail()] - calibration-cube(1).gcode
2024-04-08 13:10:38,670 [screen.py:_load_panel()] - Loading panel: fine_tune
2024-04-08 13:10:38,768 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-04-08 13:10:52,151 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-04-08 13:11:07,739 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-04-08 13:11:08,047 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-08 13:11:08,925 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-08 13:11:20,198 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-08 13:11:30,780 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 13:11:30,824 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-08 13:11:30,843 [job_status.py:update_file_metadata()] - Update Metadata. File: calibration-cube(1).gcode Size: 321596
2024-04-08 13:11:30,852 [job_status.py:show_file_thumbnail()] - calibration-cube(1).gcode
2024-04-08 13:11:31,766 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-04-08 13:11:32,382 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-08 13:11:32,383 [job_status.py:cancel_confirm()] - Canceling print
2024-04-08 13:11:32,384 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-04-08 13:11:32,392 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-04-08 13:11:35,832 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-08 13:11:35,833 [printer.py:change_state()] - Adding callback for state: ready
2024-04-08 13:11:35,850 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-04-08 13:33:40,922 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-04-08 13:33:40,924 [job_status.py:restart()] - Starting print: calibration-cube(1).gcode
2024-04-08 13:33:40,924 [job_status.py:new_print()] - reseting progress
2024-04-08 13:33:41,012 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-08 13:33:41,013 [printer.py:change_state()] - Adding callback for state: printing
2024-04-08 13:33:41,032 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-08 13:33:41,044 [job_status.py:update_file_metadata()] - Update Metadata. File: calibration-cube(1).gcode Size: 321596
2024-04-08 13:33:41,053 [job_status.py:show_file_thumbnail()] - calibration-cube(1).gcode
2024-04-08 13:33:41,136 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 13:33:41,392 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-08 13:33:41,403 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-08 13:33:41,418 [job_status.py:update_file_metadata()] - Update Metadata. File: calibration-cube(1).gcode Size: 321596
2024-04-08 13:33:41,427 [job_status.py:show_file_thumbnail()] - calibration-cube(1).gcode
2024-04-08 13:41:23,452 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 13:41:23,547 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-04-08 13:41:24,296 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-04-08 13:41:24,738 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-08 13:50:20,476 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-08 13:52:48,268 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S125'}
2024-04-08 13:52:48,730 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S150'}
2024-04-08 13:52:51,556 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S175'}
2024-04-08 13:52:52,418 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S200'}
2024-04-08 13:54:29,116 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S175'}
2024-04-08 14:05:51,908 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-08 14:05:51,908 [printer.py:change_state()] - Adding callback for state: ready
2024-04-08 14:06:42,558 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-08 14:06:42,559 [printer.py:change_state()] - Adding callback for state: printing
2024-04-08 14:06:42,571 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 14:06:42,739 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-08 14:06:42,749 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-08 14:06:42,763 [job_status.py:update_file_metadata()] - Update Metadata. File: temp_tower_pla.gcode Size: 4348480
2024-04-08 14:06:42,772 [job_status.py:show_file_thumbnail()] - temp_tower_pla.gcode
2024-04-08 14:15:33,347 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 14:15:33,435 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-04-08 14:15:42,662 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 14:15:42,701 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-08 14:15:42,720 [job_status.py:update_file_metadata()] - Update Metadata. File: temp_tower_pla.gcode Size: 4348480
2024-04-08 14:15:42,730 [job_status.py:show_file_thumbnail()] - temp_tower_pla.gcode
2024-04-08 14:16:38,544 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-04-08 14:16:39,714 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S150'}
2024-04-08 14:16:40,657 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S125'}
2024-04-08 14:16:41,704 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S100'}
2024-04-08 14:16:42,575 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 14:16:42,613 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-08 14:16:42,638 [job_status.py:update_file_metadata()] - Update Metadata. File: temp_tower_pla.gcode Size: 4348480
2024-04-08 14:16:42,647 [job_status.py:show_file_thumbnail()] - temp_tower_pla.gcode
2024-04-08 14:23:02,735 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-04-08 14:23:04,297 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-08 14:23:04,297 [job_status.py:cancel_confirm()] - Canceling print
2024-04-08 14:23:04,298 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-04-08 14:23:04,307 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-04-08 14:23:07,321 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-08 14:23:07,322 [printer.py:change_state()] - Adding callback for state: ready
2024-04-08 14:23:07,340 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-04-08 14:23:30,128 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-08 14:23:30,129 [printer.py:change_state()] - Adding callback for state: printing
2024-04-08 14:23:30,150 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-08 14:23:30,157 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Patch-0.2mm.gcode Size: 43954
2024-04-08 14:23:30,166 [job_status.py:show_file_thumbnail()] - First_Layer_Patch-0.2mm.gcode
2024-04-08 14:23:30,253 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 14:23:30,416 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-08 14:23:30,426 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-08 14:23:30,440 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Patch-0.2mm.gcode Size: 43954
2024-04-08 14:23:30,449 [job_status.py:show_file_thumbnail()] - First_Layer_Patch-0.2mm.gcode
2024-04-08 14:23:31,624 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 14:23:31,719 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-04-08 14:23:32,630 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-04-08 14:23:33,207 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-04-08 14:23:33,830 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 14:23:33,868 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-08 14:23:33,890 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Patch-0.2mm.gcode Size: 43954
2024-04-08 14:23:33,898 [job_status.py:show_file_thumbnail()] - First_Layer_Patch-0.2mm.gcode
2024-04-08 14:23:54,783 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-04-08 14:29:28,982 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 14:29:29,060 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-08 14:29:29,084 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Patch-0.2mm.gcode Size: 43954
2024-04-08 14:29:29,094 [job_status.py:show_file_thumbnail()] - First_Layer_Patch-0.2mm.gcode
2024-04-08 14:30:06,771 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-04-08 14:30:07,555 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-04-08 14:30:46,634 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-08 14:30:46,634 [printer.py:change_state()] - Adding callback for state: ready
2024-04-08 14:31:02,023 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-04-08 14:31:02,533 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 14:31:02,572 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-08 14:31:02,587 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-04-08 14:31:02,595 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Patch-0.2mm.gcode Size: 43954
2024-04-08 14:31:02,603 [job_status.py:show_file_thumbnail()] - First_Layer_Patch-0.2mm.gcode
2024-04-08 14:31:03,442 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-04-08 14:31:03,444 [job_status.py:restart()] - Starting print: First_Layer_Patch-0.2mm.gcode
2024-04-08 14:31:03,444 [job_status.py:new_print()] - reseting progress
2024-04-08 14:31:03,689 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-08 14:31:03,689 [printer.py:change_state()] - Adding callback for state: printing
2024-04-08 14:31:03,709 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2024-04-08 14:31:03,765 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 14:31:03,925 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-08 14:31:03,940 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-08 14:31:03,954 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Patch-0.2mm.gcode Size: 43954
2024-04-08 14:31:03,962 [job_status.py:show_file_thumbnail()] - First_Layer_Patch-0.2mm.gcode
2024-04-08 14:31:12,847 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 14:31:12,952 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-04-08 14:39:27,346 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-08 14:39:27,346 [printer.py:change_state()] - Adding callback for state: ready
2024-04-08 14:49:54,780 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 14:49:54,855 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-08 14:49:54,882 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-04-08 14:49:54,889 [job_status.py:update_file_metadata()] - Update Metadata. File: First_Layer_Patch-0.2mm.gcode Size: 43954
2024-04-08 14:49:54,898 [job_status.py:show_file_thumbnail()] - First_Layer_Patch-0.2mm.gcode
2024-04-08 14:49:55,612 [printer.py:get_probe()] - Probe type: probe
2024-04-08 14:49:55,639 [KlippyGtk.py:Dialog()] - Showing dialog Save Z (width=800, height=480)
2024-04-08 14:49:57,542 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-08 14:49:57,542 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: Z_OFFSET_APPLY_PROBE
2024-04-08 14:49:57,544 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SAVE_CONFIG
2024-04-08 14:49:57,638 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-04-08 14:17:21,420 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-08 14:17:21,421 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-92-g11cebe8
2024-04-08 14:17:21,422 [functions.py:log_start()] - Python version: 3.9
2024-04-08 14:17:21,770 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-08 14:17:21,771 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-08 14:17:21,826 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-08 14:17:21,830 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-04-08 14:17:21,831 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-08 14:17:22,109 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-08 14:17:22,110 [config.py:install_language()] - Using lang en
2024-04-08 14:17:22,138 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-08 14:17:22,141 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-08 14:17:22,147 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-08 14:17:22,150 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-08 14:17:24,181 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-08 14:17:24,200 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-08 14:17:24,212 [screen.py:initial_connection()] - Default printer: None
2024-04-08 14:17:24,305 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-08 14:17:24,306 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-08 14:17:24,785 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-08 14:17:24,812 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-08 14:17:24,813 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 14:17:24,865 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-08 14:17:24,891 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-08 14:17:24,917 [_logging.py:info()] - Websocket connected
2024-04-08 14:17:24,917 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-08 14:17:25,205 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 14:17:25,224 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-08 14:17:25,243 [printer.py:configure_cameras()] - Cameras: []
2024-04-08 14:17:25,244 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 14:17:25,245 [screen.py:init_klipper()] - Klipper not connected
2024-04-08 14:17:28,802 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 14:17:28,821 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 14:17:28,821 [screen.py:init_klipper()] - Klipper not connected
2024-04-08 14:17:31,807 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 14:17:31,845 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 14:17:31,846 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-08 14:17:31,914 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-08 14:17:34,805 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 14:17:34,830 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-08 14:17:34,855 [printer.py:configure_cameras()] - Cameras: []
2024-04-08 14:17:34,856 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 14:17:34,856 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-08 14:17:34,883 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-08 14:17:37,814 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 14:17:37,853 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-08 14:17:37,904 [printer.py:configure_cameras()] - Cameras: []
2024-04-08 14:17:37,906 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 14:17:37,907 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-08 14:17:38,249 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-08 14:17:38,363 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.795'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.03', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.010500, 0.032500, 0.025500\n0.031500, 0.006500, 0.013500\n0.001500, -0.019000, -0.017000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '162.5', 'max_x': '187.5', 'min_y': '162.5', 'max_y': '187.5'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.795, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.03, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.0105, 0.0325, 0.0255], [0.0315, 0.0065, 0.0135], [0.0015, -0.019, -0.017]], 'min_x': 162.5, 'max_x': 187.5, 'min_y': 162.5, 'max_y': 187.5, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-08 14:17:38,370 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-08 14:17:38,372 [printer.py:reinit()] - Klipper version: v0.12.0-143-g01c7befa
2024-04-08 14:17:38,373 [printer.py:reinit()] - # Extruders: 1
2024-04-08 14:17:38,373 [printer.py:reinit()] - # Temperature devices: 2
2024-04-08 14:17:38,374 [printer.py:reinit()] - # Fans: 4
2024-04-08 14:17:38,374 [printer.py:reinit()] - # Output pins: 0
2024-04-08 14:17:38,375 [printer.py:reinit()] - # Leds: 1
2024-04-08 14:17:38,381 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-08 14:17:38,425 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-08 14:17:38,434 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-08 14:17:38,676 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-08 14:17:38,677 [screen.py:init_klipper()] - Printer initialized
2024-04-08 14:17:38,679 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-08 14:17:38,679 [printer.py:change_state()] - Adding callback for state: startup
2024-04-08 14:17:39,825 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-08 14:17:39,825 [printer.py:change_state()] - Adding callback for state: ready
2024-04-08 14:17:39,827 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-08 14:17:39,832 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-08 14:17:39,982 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-08 14:17:39,998 [main_menu.py:add_device()] - Adding device: extruder
2024-04-08 14:17:40,010 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-08 14:17:40,022 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-08 14:17:40,075 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 14:17:40,078 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-08 14:17:40,099 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-08 14:17:40,178 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-08 14:17:40,178 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-08 14:17:40,207 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-08 14:17:45,801 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-08 14:17:45,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-08 14:17:45,842 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-08 14:17:45,863 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-08 14:17:45,864 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-08 14:17:45,900 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-08 14:17:45,902 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-08 14:17:45,922 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-08 16:13:58,148 [screen.py:_load_panel()] - Loading panel: move
2024-04-08 16:13:58,291 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-08 16:13:59,552 [screen.py:_load_panel()] - Loading panel: menu
2024-04-08 16:13:59,723 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-08 16:13:59,753 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-08 16:14:00,919 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-08 16:14:33,424 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-08 16:20:55,341 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 16:20:55,409 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-08 16:20:56,429 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 16:20:56,466 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 16:22:18,195 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-08 16:22:18,196 [printer.py:change_state()] - Adding callback for state: printing
2024-04-08 16:22:18,228 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-08 16:22:18,552 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-08 16:22:18,563 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-08 16:22:18,585 [job_status.py:update_file_metadata()] - Update Metadata. File: first_layer_octo_02.gcode Size: 105036
2024-04-08 16:22:18,601 [job_status.py:show_file_thumbnail()] - first_layer_octo_02.gcode
2024-04-08 16:31:33,799 [screen.py:show_popup_message()] - error: Retries aborting: Probed points range is increasing. Possibly Z motor numbering is wrong
2024-04-08 16:31:35,947 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2024-04-08 16:31:35,975 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-08 16:31:35,976 [printer.py:change_state()] - Adding callback for state: ready
2024-04-08 16:31:36,009 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'error'
2024-04-08 16:32:53,176 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SDCARD_RESET_FILE
2024-04-08 16:32:53,178 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-04-08 16:32:53,179 [job_status.py:restart()] - Starting print: first_layer_octo_02.gcode
2024-04-08 16:32:53,180 [job_status.py:new_print()] - reseting progress
2024-04-08 16:32:53,424 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-08 16:32:53,425 [printer.py:change_state()] - Adding callback for state: printing
2024-04-08 16:32:53,443 [job_status.py:set_state()] - Changing job_status state from 'error' to 'printing'
2024-04-08 16:32:53,498 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 16:32:53,655 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-08 16:32:53,664 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-08 16:32:53,686 [job_status.py:update_file_metadata()] - Update Metadata. File: first_layer_octo_02.gcode Size: 105036
2024-04-08 16:32:53,695 [job_status.py:show_file_thumbnail()] - first_layer_octo_02.gcode
2024-04-08 16:43:42,218 [screen.py:_load_panel()] - Loading panel: fine_tune
2024-04-08 16:43:42,324 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-04-08 16:43:43,147 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-04-08 16:44:15,044 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-08 16:44:41,252 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-08 16:44:59,891 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-08 16:45:31,398 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-08 16:45:59,039 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-04-08 16:45:59,356 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-04-08 16:45:59,802 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-04-08 16:48:43,732 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-04-08 16:49:16,541 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-04-08 16:50:01,156 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-04-08 16:51:11,467 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-08 16:51:12,332 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-08 16:51:16,828 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-08 16:51:22,508 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-08 16:51:26,772 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-08 16:51:40,528 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-08 16:51:55,732 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-04-08 16:51:56,027 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-04-08 16:51:56,762 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-04-08 16:51:57,195 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-04-08 16:52:18,477 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-04-08 16:52:20,304 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-04-08 16:52:22,550 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-04-08 16:52:23,466 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-04-08 16:52:26,590 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-04-08 16:52:28,878 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S125'}
2024-04-08 16:52:32,540 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S150'}
2024-04-08 16:52:56,860 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-04-08 16:53:17,317 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-04-08 16:56:40,442 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-08 16:56:40,533 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-08 16:56:40,554 [job_status.py:update_file_metadata()] - Update Metadata. File: first_layer_octo_02.gcode Size: 105036
2024-04-08 16:56:40,563 [job_status.py:show_file_thumbnail()] - first_layer_octo_02.gcode
2024-04-08 16:56:41,206 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-04-08 16:56:41,740 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-08 16:56:41,741 [job_status.py:cancel_confirm()] - Canceling print
2024-04-08 16:56:41,742 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-04-08 16:56:41,749 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-04-08 16:56:42,746 [printer.py:get_probe()] - Probe type: probe
2024-04-08 16:56:42,773 [KlippyGtk.py:Dialog()] - Showing dialog Save Z (width=800, height=480)
2024-04-08 16:56:43,287 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-08 16:56:43,287 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: Z_OFFSET_APPLY_PROBE
2024-04-08 16:56:43,289 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SAVE_CONFIG
2024-04-08 16:56:47,827 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-08 16:56:47,828 [printer.py:change_state()] - Adding callback for state: ready
2024-04-08 16:56:47,849 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-04-08 16:56:51,223 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-08 16:56:51,224 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-08 16:56:51,226 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-08 16:56:51,227 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-08 16:56:51,233 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 16:56:51,336 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-08 16:56:54,737 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-08 16:56:54,761 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-08 16:56:54,783 [printer.py:configure_cameras()] - Cameras: []
2024-04-08 16:56:54,784 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-08 16:56:54,785 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-08 16:56:54,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-08 16:56:54,852 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.865'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.03', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.012000, -0.024500, -0.012000, -0.012000\n-0.003500, 0.009000, 0.000500, -0.008000\n-0.027000, -0.031500, -0.029500, -0.040000\n-0.012000, -0.014000, 0.001000, -0.003000', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '100.0', 'max_x': '250.0', 'min_y': '100.0', 'max_y': '250.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.865, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.03, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.012, -0.0245, -0.012, -0.012], [-0.0035, 0.009, 0.0005, -0.008], [-0.027, -0.0315, -0.0295, -0.04], [-0.012, -0.014, 0.001, -0.003]], 'min_x': 100.0, 'max_x': 250.0, 'min_y': 100.0, 'max_y': 250.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-08 16:56:54,858 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-08 16:56:54,859 [printer.py:reinit()] - Klipper version: v0.12.0-143-g01c7befa
2024-04-08 16:56:54,860 [printer.py:reinit()] - # Extruders: 1
2024-04-08 16:56:54,860 [printer.py:reinit()] - # Temperature devices: 2
2024-04-08 16:56:54,860 [printer.py:reinit()] - # Fans: 4
2024-04-08 16:56:54,860 [printer.py:reinit()] - # Output pins: 0
2024-04-08 16:56:54,861 [printer.py:reinit()] - # Leds: 1
2024-04-08 16:56:54,861 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-08 16:56:54,889 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-08 16:56:54,892 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-08 16:56:55,221 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-08 16:56:55,221 [screen.py:init_klipper()] - Printer initialized
2024-04-08 16:56:55,222 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-08 16:56:55,222 [printer.py:change_state()] - Adding callback for state: startup
2024-04-08 16:56:56,588 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-08 16:56:56,588 [printer.py:change_state()] - Adding callback for state: ready
2024-04-08 16:56:56,591 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-08 16:56:56,596 [screen.py:show_panel()] - Reinitializing panel
2024-04-08 16:56:56,722 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-08 16:56:56,737 [main_menu.py:add_device()] - Adding device: extruder
2024-04-08 16:56:56,745 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-08 16:56:56,754 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-08 16:56:56,805 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-08 16:56:56,807 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-08 16:56:56,854 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-08 16:56:56,859 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-08 16:56:56,880 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-08 17:56:43,735 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-09 09:45:27,005 [screen.py:close_screensaver()] - Closing Screensaver
2024-04-09 09:45:27,052 [screen.py:wake_screen()] - Screen wake up
2024-04-09 09:47:38,195 [screen.py:_load_panel()] - Loading panel: shutdown
2024-04-09 09:47:38,241 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > shutdown
2024-04-09 09:47:39,024 [shutdown.py:reboot_poweroff()] - http://127.0.0.1:7125
2024-04-09 09:47:39,073 [KlippyGtk.py:Dialog()] - Showing dialog Restart (width=800, height=480)
2024-04-09 09:47:39,827 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-09 09:48:06,965 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-09 09:48:06,965 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-92-g11cebe8
2024-04-09 09:48:06,966 [functions.py:log_start()] - Python version: 3.9
2024-04-09 09:48:07,374 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-09 09:48:07,375 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-09 09:48:07,402 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-09 09:48:07,406 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-04-09 09:48:07,409 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-09 09:48:07,557 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-09 09:48:07,557 [config.py:install_language()] - Using lang en
2024-04-09 09:48:07,600 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-09 09:48:07,604 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-09 09:48:07,611 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-09 09:48:07,615 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-09 09:48:09,536 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-09 09:48:09,551 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-09 09:48:09,562 [screen.py:initial_connection()] - Default printer: None
2024-04-09 09:48:09,645 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-09 09:48:09,646 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-09 09:48:09,719 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-09 09:48:09,739 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-09 09:48:09,740 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-09 09:48:09,775 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-09 09:48:09,795 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-09 09:48:09,814 [_logging.py:info()] - Websocket connected
2024-04-09 09:48:09,815 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-09 09:48:10,112 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-09 09:48:10,133 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-09 09:48:10,155 [printer.py:configure_cameras()] - Cameras: []
2024-04-09 09:48:10,156 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-09 09:48:10,156 [screen.py:init_klipper()] - Klipper not connected
2024-04-09 09:48:13,105 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-09 09:48:13,127 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-09 09:48:13,128 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-09 09:48:13,155 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-09 09:48:16,101 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-09 09:48:16,119 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-09 09:48:16,136 [printer.py:configure_cameras()] - Cameras: []
2024-04-09 09:48:16,137 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-09 09:48:16,138 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-09 09:48:19,707 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-09 09:48:19,783 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.865'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.03', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.012000, -0.024500, -0.012000, -0.012000\n-0.003500, 0.009000, 0.000500, -0.008000\n-0.027000, -0.031500, -0.029500, -0.040000\n-0.012000, -0.014000, 0.001000, -0.003000', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '100.0', 'max_x': '250.0', 'min_y': '100.0', 'max_y': '250.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.865, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.03, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.012, -0.0245, -0.012, -0.012], [-0.0035, 0.009, 0.0005, -0.008], [-0.027, -0.0315, -0.0295, -0.04], [-0.012, -0.014, 0.001, -0.003]], 'min_x': 100.0, 'max_x': 250.0, 'min_y': 100.0, 'max_y': 250.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-09 09:48:19,788 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-09 09:48:19,790 [printer.py:reinit()] - Klipper version: v0.12.0-143-g01c7befa
2024-04-09 09:48:19,791 [printer.py:reinit()] - # Extruders: 1
2024-04-09 09:48:19,791 [printer.py:reinit()] - # Temperature devices: 2
2024-04-09 09:48:19,792 [printer.py:reinit()] - # Fans: 4
2024-04-09 09:48:19,792 [printer.py:reinit()] - # Output pins: 0
2024-04-09 09:48:19,793 [printer.py:reinit()] - # Leds: 1
2024-04-09 09:48:19,795 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-09 09:48:19,834 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-09 09:48:19,837 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-09 09:48:20,157 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-09 09:48:20,158 [screen.py:init_klipper()] - Printer initialized
2024-04-09 09:48:20,158 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-09 09:48:20,159 [printer.py:change_state()] - Adding callback for state: startup
2024-04-09 09:48:21,263 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-09 09:48:21,263 [printer.py:change_state()] - Adding callback for state: ready
2024-04-09 09:48:21,265 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-09 09:48:21,273 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-09 09:48:21,525 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-09 09:48:21,544 [main_menu.py:add_device()] - Adding device: extruder
2024-04-09 09:48:21,554 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-09 09:48:21,564 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-09 09:48:21,640 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-09 09:48:21,644 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-09 09:48:21,676 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-09 09:48:21,819 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-09 09:48:21,820 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-09 09:48:21,880 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-09 09:48:27,100 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-09 09:48:27,137 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-09 09:48:27,139 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-09 09:48:27,160 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-09 09:48:27,161 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-09 09:48:27,197 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-09 09:48:27,199 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-09 09:48:27,219 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-09 10:09:57,439 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-09 10:09:57,439 [printer.py:change_state()] - Adding callback for state: printing
2024-04-09 10:09:57,458 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-09 10:09:57,640 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-09 10:09:57,650 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-09 10:09:57,677 [job_status.py:update_file_metadata()] - Update Metadata. File: calibration-cube(1).gcode Size: 315784
2024-04-09 10:09:57,690 [job_status.py:show_file_thumbnail()] - calibration-cube(1).gcode
2024-04-09 10:19:18,368 [screen.py:_load_panel()] - Loading panel: fine_tune
2024-04-09 10:19:18,501 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-04-09 10:19:19,174 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-04-09 10:19:19,523 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-09 10:19:27,866 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-09 10:20:12,602 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-09 10:20:12,667 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-09 10:20:12,695 [job_status.py:update_file_metadata()] - Update Metadata. File: calibration-cube(1).gcode Size: 315784
2024-04-09 10:20:12,711 [job_status.py:show_file_thumbnail()] - calibration-cube(1).gcode
2024-04-09 10:21:54,110 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-04-09 10:21:54,632 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-09 10:21:54,633 [job_status.py:cancel_confirm()] - Canceling print
2024-04-09 10:21:54,634 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-04-09 10:21:54,641 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-04-09 10:22:00,684 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-09 10:22:00,685 [printer.py:change_state()] - Adding callback for state: ready
2024-04-09 10:22:00,706 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-04-09 10:23:03,453 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-09 10:23:03,454 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-09 10:23:03,456 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-09 10:23:03,457 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-09 10:23:03,464 [screen.py:show_panel()] - Reinitializing panel
2024-04-09 10:23:03,549 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-09 10:23:07,157 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-09 10:23:07,177 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-09 10:23:07,194 [printer.py:configure_cameras()] - Cameras: []
2024-04-09 10:23:07,195 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-09 10:23:07,196 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-09 10:23:07,217 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-09 10:23:07,261 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.865'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.012000, -0.024500, -0.012000, -0.012000\n-0.003500, 0.009000, 0.000500, -0.008000\n-0.027000, -0.031500, -0.029500, -0.040000\n-0.012000, -0.014000, 0.001000, -0.003000', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '100.0', 'max_x': '250.0', 'min_y': '100.0', 'max_y': '250.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.865, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.012, -0.0245, -0.012, -0.012], [-0.0035, 0.009, 0.0005, -0.008], [-0.027, -0.0315, -0.0295, -0.04], [-0.012, -0.014, 0.001, -0.003]], 'min_x': 100.0, 'max_x': 250.0, 'min_y': 100.0, 'max_y': 250.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-09 10:23:07,267 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-09 10:23:07,269 [printer.py:reinit()] - Klipper version: v0.12.0-143-g01c7befa
2024-04-09 10:23:07,269 [printer.py:reinit()] - # Extruders: 1
2024-04-09 10:23:07,269 [printer.py:reinit()] - # Temperature devices: 2
2024-04-09 10:23:07,269 [printer.py:reinit()] - # Fans: 4
2024-04-09 10:23:07,270 [printer.py:reinit()] - # Output pins: 0
2024-04-09 10:23:07,270 [printer.py:reinit()] - # Leds: 1
2024-04-09 10:23:07,270 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-09 10:23:07,297 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-09 10:23:07,300 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-09 10:23:07,630 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-09 10:23:07,631 [screen.py:init_klipper()] - Printer initialized
2024-04-09 10:23:07,632 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-09 10:23:07,632 [printer.py:change_state()] - Adding callback for state: startup
2024-04-09 10:23:08,991 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-09 10:23:08,991 [printer.py:change_state()] - Adding callback for state: ready
2024-04-09 10:23:08,993 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-09 10:23:08,998 [screen.py:show_panel()] - Reinitializing panel
2024-04-09 10:23:09,107 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-09 10:23:09,124 [main_menu.py:add_device()] - Adding device: extruder
2024-04-09 10:23:09,136 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-09 10:23:09,146 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-09 10:23:09,205 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-09 10:23:09,208 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-09 10:23:09,253 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-09 10:23:09,258 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-09 10:23:09,279 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-09 10:26:26,304 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-09 10:26:26,305 [printer.py:change_state()] - Adding callback for state: printing
2024-04-09 10:26:26,337 [screen.py:show_panel()] - Reinitializing panel
2024-04-09 10:26:26,531 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-09 10:26:26,543 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-09 10:26:26,563 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_First_Layer.gcode Size: 70896
2024-04-09 10:26:26,573 [job_status.py:show_file_thumbnail()] - Voron_First_Layer.gcode
2024-04-09 10:34:52,963 [screen.py:show_panel()] - Reinitializing panel
2024-04-09 10:34:53,071 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-04-09 10:34:54,621 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-04-09 10:38:07,980 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-04-09 10:40:26,706 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-09 10:40:26,707 [printer.py:change_state()] - Adding callback for state: ready
2024-04-09 10:40:54,133 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-09 10:40:54,212 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-09 10:40:54,237 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-04-09 10:40:54,251 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_First_Layer.gcode Size: 70896
2024-04-09 10:40:54,272 [job_status.py:show_file_thumbnail()] - Voron_First_Layer.gcode
2024-04-09 10:40:55,708 [job_status.py:close_panel()] - Closing job_status panel
2024-04-09 10:40:55,709 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-09 10:40:55,715 [screen.py:show_panel()] - Reinitializing panel
2024-04-09 10:40:55,834 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-09 10:40:55,848 [main_menu.py:add_device()] - Adding device: extruder
2024-04-09 10:40:55,857 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-09 10:40:55,866 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-09 10:40:55,923 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-09 10:40:56,649 [screen.py:_load_panel()] - Loading panel: print
2024-04-09 10:40:56,748 [print.py:__init__()] - Thumbsize: 114.20689655172413
2024-04-09 10:40:56,752 [print.py:__init__()] - list
2024-04-09 10:40:56,762 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-04-09 10:40:56,789 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-04-09 10:40:56,851 [print.py:load_files()] - Loaded in 0.051 seconds
2024-04-09 10:40:58,005 [KlippyGtk.py:Dialog()] - Showing dialog Print Voron_Design_Cube.gcode (width=800, height=480)
2024-04-09 10:40:59,427 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-09 10:40:59,428 [print.py:confirm_print_response()] - Starting print: Voron_Design_Cube.gcode
2024-04-09 10:40:59,429 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-04-09 10:40:59,564 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-09 10:40:59,564 [printer.py:change_state()] - Adding callback for state: printing
2024-04-09 10:40:59,580 [screen.py:show_panel()] - Reinitializing panel
2024-04-09 10:40:59,750 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-09 10:40:59,760 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-09 10:40:59,774 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube.gcode Size: 1517025
2024-04-09 10:40:59,783 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube.gcode
2024-04-09 10:44:54,261 [screen.py:show_popup_message()] - error: Retries aborting: Probed points range is increasing. Possibly Z motor numbering is wrong
2024-04-09 10:44:56,383 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2024-04-09 10:44:56,501 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-09 10:44:56,502 [printer.py:change_state()] - Adding callback for state: ready
2024-04-09 10:44:56,517 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'error'
2024-04-09 10:47:43,126 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SDCARD_RESET_FILE
2024-04-09 10:47:43,129 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-04-09 10:47:43,131 [job_status.py:restart()] - Starting print: Voron_Design_Cube.gcode
2024-04-09 10:47:43,131 [job_status.py:new_print()] - reseting progress
2024-04-09 10:47:43,267 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-09 10:47:43,268 [printer.py:change_state()] - Adding callback for state: printing
2024-04-09 10:47:43,284 [job_status.py:set_state()] - Changing job_status state from 'error' to 'printing'
2024-04-09 10:47:43,337 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffff90a96070>>
2024-04-09 10:47:43,338 [screen.py:show_panel()] - Reinitializing panel
2024-04-09 10:47:43,495 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-09 10:47:43,506 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-09 10:47:43,523 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube.gcode Size: 1517025
2024-04-09 10:47:43,532 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube.gcode
2024-04-09 10:53:55,359 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-04-09 10:53:55,982 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-09 10:53:55,982 [job_status.py:cancel_confirm()] - Canceling print
2024-04-09 10:53:55,983 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-04-09 10:53:55,990 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-04-09 10:53:58,589 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-09 10:53:58,590 [printer.py:change_state()] - Adding callback for state: ready
2024-04-09 10:53:58,609 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-04-09 10:53:59,630 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-04-09 10:53:59,699 [screen.py:attach_panel()] - Current panel hierarchy: job_status > gcode_macros
2024-04-09 10:54:02,807 [screen.py:show_popup_message()] - echo: PARK_HZ 
2024-04-09 10:54:02,824 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK_HZ'}
2024-04-09 10:54:16,432 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-09 10:54:16,533 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-09 10:54:18,341 [job_status.py:close_panel()] - Closing job_status panel
2024-04-09 10:54:18,341 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-09 10:54:18,347 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffff90a96070>>
2024-04-09 10:54:18,348 [screen.py:show_panel()] - Reinitializing panel
2024-04-09 10:54:18,461 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-09 10:54:18,475 [main_menu.py:add_device()] - Adding device: extruder
2024-04-09 10:54:18,484 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-09 10:54:18,493 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-09 10:54:18,546 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-09 10:54:19,533 [screen.py:_load_panel()] - Loading panel: extrude
2024-04-09 10:54:19,632 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-09 10:54:20,363 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2024-04-09 10:54:20,385 [screen.py:show_popup_message()] - error: // Unknown command:"G1 -"
2024-04-09 10:54:22,203 [extrude.py:change_distance()] - ### Distance 15
2024-04-09 10:54:22,611 [extrude.py:change_distance()] - ### Distance 25
2024-04-09 10:54:23,187 [extrude.py:change_speed()] - ### Speed 5
2024-04-09 10:54:23,699 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-09 10:54:23,701 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F300'}
2024-04-09 10:54:30,827 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-09 10:54:30,829 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F300'}
2024-04-09 10:54:36,107 [extrude.py:change_speed()] - ### Speed 25
2024-04-09 10:54:36,739 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-09 10:54:36,741 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2024-04-09 10:17:25,033 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-09 10:17:25,034 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-92-g11cebe8
2024-04-09 10:17:25,034 [functions.py:log_start()] - Python version: 3.9
2024-04-09 10:17:25,447 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-09 10:17:25,448 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-09 10:17:25,475 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-09 10:17:25,479 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-04-09 10:17:25,480 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-09 10:17:25,614 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-09 10:17:25,615 [config.py:install_language()] - Using lang en
2024-04-09 10:17:25,650 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-09 10:17:25,653 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-09 10:17:25,658 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-09 10:17:25,662 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-09 10:17:28,155 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-09 10:17:28,174 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-09 10:17:28,187 [screen.py:initial_connection()] - Default printer: None
2024-04-09 10:17:28,277 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-09 10:17:28,278 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-09 10:17:28,358 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-09 10:17:28,378 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-09 10:17:28,379 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-09 10:17:28,430 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-09 10:17:28,458 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-09 10:17:28,481 [_logging.py:info()] - Websocket connected
2024-04-09 10:17:28,482 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-09 10:17:28,779 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-09 10:17:28,798 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-09 10:17:28,818 [printer.py:configure_cameras()] - Cameras: []
2024-04-09 10:17:28,818 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-09 10:17:28,819 [screen.py:init_klipper()] - Klipper not connected
2024-04-09 10:17:31,864 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-09 10:17:31,887 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-09 10:17:31,887 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-09 10:17:31,933 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-09 10:17:34,867 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-09 10:17:34,904 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-09 10:17:34,936 [printer.py:configure_cameras()] - Cameras: []
2024-04-09 10:17:34,937 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-09 10:17:34,938 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-09 10:17:34,976 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-09 10:17:35,041 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.865'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.012000, -0.024500, -0.012000, -0.012000\n-0.003500, 0.009000, 0.000500, -0.008000\n-0.027000, -0.031500, -0.029500, -0.040000\n-0.012000, -0.014000, 0.001000, -0.003000', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '100.0', 'max_x': '250.0', 'min_y': '100.0', 'max_y': '250.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.865, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.012, -0.0245, -0.012, -0.012], [-0.0035, 0.009, 0.0005, -0.008], [-0.027, -0.0315, -0.0295, -0.04], [-0.012, -0.014, 0.001, -0.003]], 'min_x': 100.0, 'max_x': 250.0, 'min_y': 100.0, 'max_y': 250.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-09 10:17:35,047 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-09 10:17:35,049 [printer.py:reinit()] - Klipper version: v0.12.0-143-g01c7befa
2024-04-09 10:17:35,050 [printer.py:reinit()] - # Extruders: 1
2024-04-09 10:17:35,051 [printer.py:reinit()] - # Temperature devices: 2
2024-04-09 10:17:35,051 [printer.py:reinit()] - # Fans: 4
2024-04-09 10:17:35,052 [printer.py:reinit()] - # Output pins: 0
2024-04-09 10:17:35,071 [printer.py:reinit()] - # Leds: 1
2024-04-09 10:17:35,071 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-09 10:17:35,108 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-09 10:17:35,114 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-09 10:17:35,402 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-09 10:17:35,403 [screen.py:init_klipper()] - Printer initialized
2024-04-09 10:17:35,404 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-09 10:17:35,404 [printer.py:change_state()] - Adding callback for state: startup
2024-04-09 10:17:41,300 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-09 10:17:41,301 [printer.py:change_state()] - Adding callback for state: ready
2024-04-09 10:17:41,302 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-09 10:17:41,311 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-09 10:17:41,458 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-09 10:17:41,476 [main_menu.py:add_device()] - Adding device: extruder
2024-04-09 10:17:41,486 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-09 10:17:41,496 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-09 10:17:41,559 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-09 10:17:41,561 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-09 10:17:41,582 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-09 10:17:41,678 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-09 10:17:41,679 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-09 10:17:41,701 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-09 10:17:46,860 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-09 10:17:46,897 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-09 10:17:46,899 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-09 10:17:46,920 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-09 10:17:46,922 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-09 10:17:46,957 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-09 10:17:46,960 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-09 10:17:46,995 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-09 10:17:50,780 [screen.py:_load_panel()] - Loading panel: move
2024-04-09 10:17:50,896 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-09 10:17:51,548 [screen.py:_load_panel()] - Loading panel: menu
2024-04-09 10:17:51,780 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-09 10:17:51,809 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-09 10:17:52,284 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-09 10:17:22,226 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-09 10:17:22,227 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-92-g11cebe8
2024-04-09 10:17:22,227 [functions.py:log_start()] - Python version: 3.9
2024-04-09 10:17:22,506 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-09 10:17:22,507 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-09 10:17:22,530 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-09 10:17:22,534 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-04-09 10:17:22,535 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-09 10:17:22,674 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-09 10:17:22,675 [config.py:install_language()] - Using lang en
2024-04-09 10:17:22,703 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-09 10:17:22,706 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-09 10:17:22,712 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-09 10:17:22,715 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-09 10:17:23,821 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-09 10:17:23,836 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-09 10:17:23,847 [screen.py:initial_connection()] - Default printer: None
2024-04-09 10:17:23,935 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-09 10:17:23,936 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-09 10:17:24,008 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-09 10:17:24,026 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-09 10:17:24,026 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-09 10:17:24,062 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-09 10:17:24,085 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-09 10:17:24,105 [_logging.py:info()] - Websocket connected
2024-04-09 10:17:24,106 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-09 10:17:24,399 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-09 10:17:24,420 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-09 10:17:24,441 [printer.py:configure_cameras()] - Cameras: []
2024-04-09 10:17:24,442 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-09 10:17:24,442 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-09 10:17:24,467 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-09 10:17:24,688 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.865'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.012000, -0.024500, -0.012000, -0.012000\n-0.003500, 0.009000, 0.000500, -0.008000\n-0.027000, -0.031500, -0.029500, -0.040000\n-0.012000, -0.014000, 0.001000, -0.003000', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '100.0', 'max_x': '250.0', 'min_y': '100.0', 'max_y': '250.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.865, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.012, -0.0245, -0.012, -0.012], [-0.0035, 0.009, 0.0005, -0.008], [-0.027, -0.0315, -0.0295, -0.04], [-0.012, -0.014, 0.001, -0.003]], 'min_x': 100.0, 'max_x': 250.0, 'min_y': 100.0, 'max_y': 250.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-09 10:17:24,693 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-09 10:17:24,695 [printer.py:reinit()] - Klipper version: v0.12.0-143-g01c7befa
2024-04-09 10:17:24,696 [printer.py:reinit()] - # Extruders: 1
2024-04-09 10:17:24,696 [printer.py:reinit()] - # Temperature devices: 2
2024-04-09 10:17:24,696 [printer.py:reinit()] - # Fans: 4
2024-04-09 10:17:24,697 [printer.py:reinit()] - # Output pins: 0
2024-04-09 10:17:24,697 [printer.py:reinit()] - # Leds: 1
2024-04-09 10:17:24,697 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-09 10:17:24,728 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-09 10:17:24,732 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-09 10:17:25,070 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-09 10:17:25,070 [screen.py:init_klipper()] - Printer initialized
2024-04-09 10:17:25,071 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-09 10:17:25,071 [printer.py:change_state()] - Adding callback for state: ready
2024-04-09 10:17:25,083 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-09 10:17:25,088 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-09 10:17:25,315 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-09 10:17:25,332 [main_menu.py:add_device()] - Adding device: extruder
2024-04-09 10:17:25,342 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-09 10:17:25,352 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-09 10:17:25,410 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-09 10:17:25,414 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-09 10:17:25,456 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-09 10:17:25,459 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-09 10:17:25,483 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-09 10:17:46,509 [screen.py:_load_panel()] - Loading panel: move
2024-04-09 10:17:46,647 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-09 10:17:47,366 [screen.py:_load_panel()] - Loading panel: menu
2024-04-09 10:17:47,526 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-09 10:17:47,555 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-09 10:17:48,586 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-09 15:52:18,143 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-09 15:59:40,696 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-09 15:59:40,735 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-09 15:59:41,281 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-04-09 15:59:41,339 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2024-04-09 15:59:44,274 [screen.py:show_popup_message()] - echo: PARK_HZ 
2024-04-09 15:59:44,287 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK_HZ'}
2024-04-09 10:17:22,315 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-09 10:17:22,316 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-92-g11cebe8
2024-04-09 10:17:22,316 [functions.py:log_start()] - Python version: 3.9
2024-04-09 10:17:22,622 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-09 10:17:22,623 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-09 10:17:22,646 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-09 10:17:22,650 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-04-09 10:17:22,651 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-09 10:17:22,806 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-09 10:17:22,807 [config.py:install_language()] - Using lang en
2024-04-09 10:17:22,841 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-09 10:17:22,846 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-09 10:17:22,854 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-09 10:17:22,857 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-09 10:17:24,061 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-09 10:17:24,076 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-09 10:17:24,087 [screen.py:initial_connection()] - Default printer: None
2024-04-09 10:17:24,176 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-09 10:17:24,177 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-09 10:17:24,247 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-09 10:17:24,265 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-09 10:17:24,266 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-09 10:17:24,301 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-09 10:17:24,323 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-09 10:17:24,343 [_logging.py:info()] - Websocket connected
2024-04-09 10:17:24,344 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-09 10:17:24,669 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-09 10:17:24,690 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-09 10:17:24,710 [printer.py:configure_cameras()] - Cameras: []
2024-04-09 10:17:24,711 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-09 10:17:24,712 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-09 10:17:24,736 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-09 10:17:24,931 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': '!EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.865'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.012000, -0.024500, -0.012000, -0.012000\n-0.003500, 0.009000, 0.000500, -0.008000\n-0.027000, -0.031500, -0.029500, -0.040000\n-0.012000, -0.014000, 0.001000, -0.003000', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '100.0', 'max_x': '250.0', 'min_y': '100.0', 'max_y': '250.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.865, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '!EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.012, -0.0245, -0.012, -0.012], [-0.0035, 0.009, 0.0005, -0.008], [-0.027, -0.0315, -0.0295, -0.04], [-0.012, -0.014, 0.001, -0.003]], 'min_x': 100.0, 'max_x': 250.0, 'min_y': 100.0, 'max_y': 250.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-09 10:17:24,936 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-09 10:17:24,938 [printer.py:reinit()] - Klipper version: v0.12.0-143-g01c7befa
2024-04-09 10:17:24,938 [printer.py:reinit()] - # Extruders: 1
2024-04-09 10:17:24,939 [printer.py:reinit()] - # Temperature devices: 2
2024-04-09 10:17:24,939 [printer.py:reinit()] - # Fans: 4
2024-04-09 10:17:24,939 [printer.py:reinit()] - # Output pins: 0
2024-04-09 10:17:24,939 [printer.py:reinit()] - # Leds: 1
2024-04-09 10:17:24,940 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-09 10:17:24,969 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-09 10:17:24,973 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-09 10:17:25,312 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-09 10:17:25,312 [screen.py:init_klipper()] - Printer initialized
2024-04-09 10:17:25,313 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-09 10:17:25,313 [printer.py:change_state()] - Adding callback for state: ready
2024-04-09 10:17:25,330 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-09 10:17:25,335 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-09 10:17:25,473 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-09 10:17:25,489 [main_menu.py:add_device()] - Adding device: extruder
2024-04-09 10:17:25,497 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-09 10:17:25,507 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-09 10:17:25,556 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-09 10:17:25,558 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-09 10:17:25,594 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-09 10:17:25,597 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-09 10:17:25,617 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-09 10:17:59,329 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-09 10:17:59,330 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-09 10:17:59,338 [screen.py:_load_panel()] - Loading panel: menu
2024-04-09 10:17:59,743 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-09 10:17:59,757 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-09 10:17:59,800 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-09 10:17:59,805 [menu.py:arrangeMenuItems()] - X > more power
2024-04-09 10:17:59,812 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-09 10:17:59,828 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-09 10:17:59,850 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-09 10:18:04,018 [screen.py:_load_panel()] - Loading panel: network
2024-04-09 10:18:04,067 [network.py:__init__()] - Found wireless interfaces: ['wlan0']
2024-04-09 10:18:04,067 [network.py:__init__()] - Using NetworkManager
2024-04-09 10:18:04,662 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > network
2024-04-09 10:18:05,063 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'ZYIPTest'
  File "/home/biqu/KlipperScreen/panels/network.py", line 101, in load_networks
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 123, in add_network
    netinfo = self.wifi.get_network_info(ssid)

  File "/home/biqu/KlipperScreen/ks_includes/wifi_nm.py", line 224, in get_network_info
    path = self.path_by_ssid[ssid]
NoneType: None
2024-04-09 10:18:05,081 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'ZYIPTest'
  File "/home/biqu/KlipperScreen/panels/network.py", line 101, in load_networks
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 123, in add_network
    netinfo = self.wifi.get_network_info(ssid)

  File "/home/biqu/KlipperScreen/ks_includes/wifi_nm.py", line 224, in get_network_info
    path = self.path_by_ssid[ssid]
NoneType: None
2024-04-16 17:08:31,304 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-16 17:08:31,305 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-16 17:08:31,306 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-16 17:08:31,307 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-16 17:08:31,311 [screen.py:show_panel()] - Reinitializing panel
2024-04-16 17:08:31,368 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-16 17:08:35,120 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-16 17:08:35,138 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-16 17:08:35,156 [printer.py:configure_cameras()] - Cameras: []
2024-04-16 17:08:35,157 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-16 17:08:35,157 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-16 17:08:35,178 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-16 17:08:35,218 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.865'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.012000, -0.024500, -0.012000, -0.012000\n-0.003500, 0.009000, 0.000500, -0.008000\n-0.027000, -0.031500, -0.029500, -0.040000\n-0.012000, -0.014000, 0.001000, -0.003000', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '100.0', 'max_x': '250.0', 'min_y': '100.0', 'max_y': '250.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.865, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.012, -0.0245, -0.012, -0.012], [-0.0035, 0.009, 0.0005, -0.008], [-0.027, -0.0315, -0.0295, -0.04], [-0.012, -0.014, 0.001, -0.003]], 'min_x': 100.0, 'max_x': 250.0, 'min_y': 100.0, 'max_y': 250.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-16 17:08:35,224 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-16 17:08:35,225 [printer.py:reinit()] - Klipper version: v0.12.0-143-g01c7befa
2024-04-16 17:08:35,226 [printer.py:reinit()] - # Extruders: 1
2024-04-16 17:08:35,226 [printer.py:reinit()] - # Temperature devices: 2
2024-04-16 17:08:35,226 [printer.py:reinit()] - # Fans: 4
2024-04-16 17:08:35,226 [printer.py:reinit()] - # Output pins: 0
2024-04-16 17:08:35,227 [printer.py:reinit()] - # Leds: 1
2024-04-16 17:08:35,227 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-16 17:08:35,252 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-16 17:08:35,255 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-16 17:08:35,588 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-16 17:08:35,588 [screen.py:init_klipper()] - Printer initialized
2024-04-16 17:08:35,589 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-16 17:08:35,589 [printer.py:change_state()] - Adding callback for state: startup
2024-04-16 17:08:36,957 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-16 17:08:36,958 [printer.py:change_state()] - Adding callback for state: ready
2024-04-16 17:08:36,961 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-16 17:08:36,966 [screen.py:show_panel()] - Reinitializing panel
2024-04-16 17:08:37,077 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-16 17:08:37,091 [main_menu.py:add_device()] - Adding device: extruder
2024-04-16 17:08:37,099 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-16 17:08:37,107 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-16 17:08:37,157 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-16 17:08:37,159 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-16 17:08:37,196 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-16 17:08:37,199 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-16 17:08:37,223 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-16 17:10:55,504 [screen.py:_load_panel()] - Loading panel: move
2024-04-16 17:10:55,671 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-16 17:10:56,407 [screen.py:_load_panel()] - Loading panel: menu
2024-04-16 17:10:56,567 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-16 17:10:56,598 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-16 17:10:57,644 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-16 17:12:39,428 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=800, height=480)
2024-04-16 17:12:47,204 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-16 17:12:47,205 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-3-g31f88d2
2024-04-16 17:12:47,205 [functions.py:log_start()] - Python version: 3.9
2024-04-16 17:12:47,381 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-16 17:12:47,382 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-16 17:12:47,402 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-16 17:12:47,406 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-04-16 17:12:47,407 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-16 17:12:47,541 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-16 17:12:47,541 [config.py:install_language()] - Using lang en
2024-04-16 17:12:47,573 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-16 17:12:47,580 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-16 17:12:47,589 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-16 17:12:47,593 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-16 17:12:48,156 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-16 17:12:48,175 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-16 17:12:48,188 [screen.py:initial_connection()] - Default printer: None
2024-04-16 17:12:48,272 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-16 17:12:48,273 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-16 17:12:48,345 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-16 17:12:48,364 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-16 17:12:48,364 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-16 17:12:48,396 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-16 17:12:48,416 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-16 17:12:48,432 [_logging.py:info()] - Websocket connected
2024-04-16 17:12:48,433 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-16 17:12:48,737 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-16 17:12:48,757 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-16 17:12:48,777 [printer.py:configure_cameras()] - Cameras: []
2024-04-16 17:12:48,777 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-16 17:12:48,778 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-16 17:12:49,552 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-16 17:12:49,635 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.865'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.012000, -0.024500, -0.012000, -0.012000\n-0.003500, 0.009000, 0.000500, -0.008000\n-0.027000, -0.031500, -0.029500, -0.040000\n-0.012000, -0.014000, 0.001000, -0.003000', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '100.0', 'max_x': '250.0', 'min_y': '100.0', 'max_y': '250.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.865, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.012, -0.0245, -0.012, -0.012], [-0.0035, 0.009, 0.0005, -0.008], [-0.027, -0.0315, -0.0295, -0.04], [-0.012, -0.014, 0.001, -0.003]], 'min_x': 100.0, 'max_x': 250.0, 'min_y': 100.0, 'max_y': 250.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-16 17:12:49,640 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-16 17:12:49,642 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746
2024-04-16 17:12:49,642 [printer.py:reinit()] - # Extruders: 1
2024-04-16 17:12:49,642 [printer.py:reinit()] - # Temperature devices: 2
2024-04-16 17:12:49,642 [printer.py:reinit()] - # Fans: 4
2024-04-16 17:12:49,642 [printer.py:reinit()] - # Output pins: 0
2024-04-16 17:12:49,643 [printer.py:reinit()] - # Leds: 1
2024-04-16 17:12:49,643 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-16 17:12:49,669 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-16 17:12:49,672 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-16 17:12:50,014 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-16 17:12:50,014 [screen.py:init_klipper()] - Printer initialized
2024-04-16 17:12:50,015 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-16 17:12:50,015 [printer.py:change_state()] - Adding callback for state: startup
2024-04-16 17:12:50,059 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=800, height=480)
2024-04-16 17:12:50,061 [base_panel.py:process_update()] - Update complete
2024-04-16 17:12:52,431 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-16 17:12:52,432 [printer.py:change_state()] - Adding callback for state: ready
2024-04-16 17:12:52,434 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-16 17:12:52,439 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-16 17:12:52,611 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-16 17:12:52,629 [main_menu.py:add_device()] - Adding device: extruder
2024-04-16 17:12:52,637 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-16 17:12:52,646 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-16 17:12:52,698 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-16 17:12:52,700 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-16 17:12:52,740 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-16 17:12:52,743 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-16 17:12:52,763 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-16 17:13:03,636 [base_panel.py:finish_updating()] - Finishing update
2024-04-16 17:13:03,645 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-16 17:13:03,645 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-16 17:13:03,665 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-16 17:14:15,420 [screen.py:_load_panel()] - Loading panel: zcalibrate
2024-04-16 17:14:15,441 [printer.py:get_probe()] - Probe type: probe
2024-04-16 17:14:15,442 [zcalibrate.py:__init__()] - Offset X:0.0 Y:0.0 Z:-0.865
2024-04-16 17:14:15,475 [zcalibrate.py:set_functions()] - Mesh: {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}
2024-04-16 17:14:15,477 [zcalibrate.py:set_functions()] - Available functions for calibration: ['probe']
2024-04-16 17:14:15,510 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > zcalibrate
2024-04-16 17:29:11,535 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-16 17:29:11,604 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-16 17:29:12,625 [screen.py:_load_panel()] - Loading panel: move
2024-04-16 17:29:12,748 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-16 17:29:14,979 [screen.py:_load_panel()] - Loading panel: menu
2024-04-16 17:29:15,135 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-16 17:29:15,164 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-16 17:29:15,775 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-16 18:29:16,120 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-16 22:48:32,978 [screen.py:close_screensaver()] - Closing Screensaver
2024-04-16 22:48:33,002 [screen.py:wake_screen()] - Screen wake up
2024-04-16 22:48:34,650 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-16 22:48:34,686 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-16 22:48:35,826 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-16 22:48:35,899 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-16 22:48:36,860 [screen.py:_load_panel()] - Loading panel: extrude
2024-04-16 22:48:36,947 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-16 22:48:40,384 [screen.py:_load_panel()] - Loading panel: temperature
2024-04-16 22:48:40,448 [temperature.py:add_device()] - Adding device: extruder
2024-04-16 22:48:40,457 [temperature.py:add_device()] - Adding device: heater_bed
2024-04-16 22:48:40,468 [temperature.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-16 22:48:40,477 [temperature.py:select_heater()] - Selecting extruder
2024-04-16 22:48:40,479 [temperature.py:select_heater()] - Selecting heater_bed
2024-04-16 22:48:40,524 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2024-04-16 22:48:43,636 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2024-04-16 22:48:43,636 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2024-04-16 22:48:43,637 [temperature.py:set_temperature()] - name match extruder
2024-04-16 22:48:43,637 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S195.0
2024-04-16 22:48:43,639 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2024-04-16 22:48:43,639 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2024-04-16 22:48:43,639 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S40.0
2024-04-16 22:49:26,954 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-16 22:49:27,012 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-16 22:49:29,066 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=120'}
2024-04-16 22:50:09,947 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-16 22:50:10,018 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-16 22:50:11,278 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-16 22:50:12,103 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-16 22:50:12,134 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-16 22:50:13,178 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-16 22:50:45,170 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-16 22:50:45,226 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-16 22:50:46,714 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-16 22:50:46,749 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-16 22:50:47,635 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-16 22:50:48,330 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2024-04-16 22:50:48,874 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S0
2024-04-16 22:50:48,876 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S0
2024-04-16 22:50:49,603 [temperature.py:select_heater()] - Deselecting extruder
2024-04-16 22:50:50,027 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-16 22:50:50,101 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-16 22:50:51,474 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-16 22:50:51,512 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-16 22:50:52,822 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-16 22:50:53,625 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-16 22:50:53,656 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-16 22:50:54,234 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-16 22:54:11,010 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-16 22:54:11,080 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-16 22:54:12,730 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-16 22:54:12,765 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-16 22:54:15,278 [screen.py:_load_panel()] - Loading panel: print
2024-04-16 22:54:15,330 [print.py:__init__()] - Thumbsize: 114.20689655172413
2024-04-16 22:54:15,337 [print.py:__init__()] - list
2024-04-16 22:54:15,355 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-04-16 22:54:15,406 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-04-16 22:54:15,475 [print.py:load_files()] - Loaded in 0.054 seconds
2024-04-16 22:54:17,961 [KlippyGtk.py:Dialog()] - Showing dialog Print Voron_First_Layer.gcode (width=800, height=480)
2024-04-16 22:54:18,901 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-16 22:54:18,901 [print.py:confirm_print_response()] - Starting print: Voron_First_Layer.gcode
2024-04-16 22:54:18,902 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-04-16 22:54:19,146 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-16 22:54:19,146 [printer.py:change_state()] - Adding callback for state: printing
2024-04-16 22:54:19,160 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-16 22:54:19,403 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-16 22:54:19,413 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-16 22:54:19,436 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_First_Layer.gcode Size: 70896
2024-04-16 22:54:19,445 [job_status.py:show_file_thumbnail()] - Voron_First_Layer.gcode
2024-04-16 23:02:41,691 [screen.py:_load_panel()] - Loading panel: fine_tune
2024-04-16 23:02:41,781 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-04-16 23:03:11,225 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-04-16 23:03:11,663 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-16 23:03:26,786 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-04-16 23:03:27,127 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-04-16 23:03:27,505 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-04-16 23:03:27,916 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-04-16 23:04:53,109 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-16 23:06:48,613 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-16 23:08:20,876 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-16 23:08:20,877 [printer.py:change_state()] - Adding callback for state: ready
2024-04-16 23:08:57,217 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-16 23:08:57,262 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-16 23:08:57,279 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-04-16 23:08:57,291 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_First_Layer.gcode Size: 70896
2024-04-16 23:08:57,302 [job_status.py:show_file_thumbnail()] - Voron_First_Layer.gcode
2024-04-16 23:08:58,465 [printer.py:get_probe()] - Probe type: probe
2024-04-16 23:08:58,494 [KlippyGtk.py:Dialog()] - Showing dialog Save Z (width=800, height=480)
2024-04-16 23:08:59,459 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-16 23:09:00,176 [job_status.py:close_panel()] - Closing job_status panel
2024-04-16 23:09:00,177 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-16 23:09:00,183 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffff91946400>>
2024-04-16 23:09:00,184 [screen.py:show_panel()] - Reinitializing panel
2024-04-16 23:09:00,303 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-16 23:09:00,318 [main_menu.py:add_device()] - Adding device: extruder
2024-04-16 23:09:00,326 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-16 23:09:00,335 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-16 23:09:00,384 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-16 23:09:01,043 [screen.py:show_panel()] - Reinitializing panel
2024-04-16 23:09:01,078 [print.py:__init__()] - Thumbsize: 114.20689655172413
2024-04-16 23:09:01,084 [print.py:__init__()] - list
2024-04-16 23:09:01,094 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-04-16 23:09:01,120 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-04-16 23:09:01,180 [print.py:load_files()] - Loaded in 0.047 seconds
2024-04-16 23:09:02,298 [KlippyGtk.py:Dialog()] - Showing dialog Print Voron_Design_Cube.gcode (width=800, height=480)
2024-04-16 23:09:03,000 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-16 23:09:03,000 [print.py:confirm_print_response()] - Starting print: Voron_Design_Cube.gcode
2024-04-16 23:09:03,001 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-04-16 23:09:03,254 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-16 23:09:03,254 [printer.py:change_state()] - Adding callback for state: printing
2024-04-16 23:09:03,270 [screen.py:show_panel()] - Reinitializing panel
2024-04-16 23:09:03,527 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-16 23:09:03,541 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-16 23:09:03,564 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube.gcode Size: 1517025
2024-04-16 23:09:03,573 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube.gcode
2024-04-16 23:17:09,034 [screen.py:show_panel()] - Reinitializing panel
2024-04-16 23:17:09,123 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-04-16 23:17:09,704 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2024-04-16 23:17:10,561 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-04-16 23:17:10,834 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-16 23:17:11,666 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-16 23:17:12,598 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-16 23:18:10,769 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-16 23:18:11,867 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2024-04-16 23:27:53,377 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S125'}
2024-04-16 23:27:53,689 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S150'}
2024-04-16 23:27:54,769 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S175'}
2024-04-16 23:27:55,476 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S200'}
2024-04-16 23:28:21,796 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S175'}
2024-04-16 23:28:23,009 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S150'}
2024-04-16 23:28:23,927 [fine_tune.py:change_percent_delta()] - ### Delta 1
2024-04-16 23:28:24,273 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M221 S99'}
2024-04-16 23:33:31,231 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-16 23:33:31,270 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-16 23:33:31,290 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube.gcode Size: 1517025
2024-04-16 23:33:31,299 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube.gcode
2024-04-16 23:33:32,090 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-04-16 23:33:33,343 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-16 23:33:33,344 [job_status.py:cancel_confirm()] - Canceling print
2024-04-16 23:33:33,345 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-04-16 23:33:33,355 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-04-16 23:33:35,959 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-16 23:33:35,960 [printer.py:change_state()] - Adding callback for state: ready
2024-04-16 23:33:35,994 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-04-16 23:33:38,855 [printer.py:get_probe()] - Probe type: probe
2024-04-16 23:33:38,882 [KlippyGtk.py:Dialog()] - Showing dialog Save Z (width=800, height=480)
2024-04-16 23:33:39,649 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-16 23:33:39,650 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: Z_OFFSET_APPLY_PROBE
2024-04-16 23:33:39,651 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SAVE_CONFIG
2024-04-16 23:33:39,746 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-04-16 23:33:40,497 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-16 23:33:40,498 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SAVE_CONFIG'}
2024-04-16 23:33:41,108 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-16 23:33:41,109 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-16 23:33:41,110 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-16 23:33:41,111 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-16 23:33:41,117 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffff91946400>>
2024-04-16 23:33:41,119 [screen.py:show_panel()] - Reinitializing panel
2024-04-16 23:33:41,180 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-16 23:33:44,123 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-16 23:33:44,146 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-16 23:33:44,166 [printer.py:configure_cameras()] - Cameras: []
2024-04-16 23:33:44,166 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-16 23:33:44,167 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-16 23:33:44,413 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-16 23:33:44,464 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.985'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.013000, 0.017500\n-0.014500, 0.000500, 0.007000\n-0.025500, -0.008000, -0.011500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.985, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.013, 0.0175], [-0.0145, 0.0005, 0.007], [-0.0255, -0.008, -0.0115]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-16 23:33:44,471 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-16 23:33:44,472 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746
2024-04-16 23:33:44,473 [printer.py:reinit()] - # Extruders: 1
2024-04-16 23:33:44,473 [printer.py:reinit()] - # Temperature devices: 2
2024-04-16 23:33:44,473 [printer.py:reinit()] - # Fans: 4
2024-04-16 23:33:44,473 [printer.py:reinit()] - # Output pins: 0
2024-04-16 23:33:44,474 [printer.py:reinit()] - # Leds: 1
2024-04-16 23:33:44,475 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-16 23:33:44,504 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-16 23:33:44,507 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-16 23:33:44,830 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-16 23:33:44,831 [screen.py:init_klipper()] - Printer initialized
2024-04-16 23:33:44,831 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-16 23:33:44,832 [printer.py:change_state()] - Adding callback for state: startup
2024-04-16 23:33:46,694 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-16 23:33:46,695 [printer.py:change_state()] - Adding callback for state: ready
2024-04-16 23:33:46,697 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-16 23:33:46,702 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffff91946400>>
2024-04-16 23:33:46,703 [screen.py:show_panel()] - Reinitializing panel
2024-04-16 23:33:46,813 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-16 23:33:46,827 [main_menu.py:add_device()] - Adding device: extruder
2024-04-16 23:33:46,835 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-16 23:33:46,844 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-16 23:33:46,894 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-16 23:33:46,896 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-16 23:33:46,944 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-16 23:33:46,947 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-16 23:33:46,972 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-16 23:34:02,977 [screen.py:show_panel()] - Reinitializing panel
2024-04-16 23:34:03,003 [temperature.py:add_device()] - Adding device: extruder
2024-04-16 23:34:03,012 [temperature.py:add_device()] - Adding device: heater_bed
2024-04-16 23:34:03,022 [temperature.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-16 23:34:03,031 [temperature.py:select_heater()] - Selecting extruder
2024-04-16 23:34:03,033 [temperature.py:select_heater()] - Selecting heater_bed
2024-04-16 23:34:03,079 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-04-16 23:34:04,191 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-16 23:34:04,240 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-16 23:34:05,001 [screen.py:show_panel()] - Reinitializing panel
2024-04-16 23:34:05,085 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-16 23:34:06,063 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2024-04-16 23:34:06,085 [screen.py:show_popup_message()] - error: // Unknown command:"G1 -"
2024-04-16 23:34:07,455 [extrude.py:change_distance()] - ### Distance 25
2024-04-16 23:34:07,911 [extrude.py:change_speed()] - ### Speed 5
2024-04-16 23:34:08,303 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-16 23:34:08,304 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F300'}
2024-04-16 23:34:16,615 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-16 23:34:16,616 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F300'}
2024-04-16 23:34:23,191 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-16 23:34:23,192 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F300'}
2024-04-16 23:56:46,544 [screen.py:show_popup_message()] - error: Must home before probe
2024-04-17 00:34:24,120 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-17 00:51:49,075 [screen.py:close_screensaver()] - Closing Screensaver
2024-04-17 00:51:49,095 [screen.py:wake_screen()] - Screen wake up
2024-04-17 01:28:27,816 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-17 01:28:27,862 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-17 01:28:29,736 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-17 01:28:29,737 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-17 01:28:29,754 [screen.py:_load_panel()] - Loading panel: menu
2024-04-17 01:28:30,147 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-17 01:28:30,161 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-17 01:28:30,196 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-17 01:28:30,201 [menu.py:arrangeMenuItems()] - X > more power
2024-04-17 01:28:30,207 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-17 01:28:30,219 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-17 01:28:30,235 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-17 01:28:31,424 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-17 01:28:31,462 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-17 01:28:32,680 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-17 01:28:32,680 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-17 01:28:32,725 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-17 01:28:32,741 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-17 01:28:32,784 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-17 01:28:32,794 [menu.py:arrangeMenuItems()] - X > more power
2024-04-17 01:28:32,800 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-17 01:28:32,811 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-17 01:28:32,827 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-17 01:28:33,634 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-04-17 01:28:33,710 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > gcode_macros
2024-04-17 01:28:37,978 [screen.py:show_popup_message()] - echo: PARK_HZ 
2024-04-17 01:28:37,988 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK_HZ'}
2024-04-17 01:38:48,976 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-17 01:38:49,092 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-17 01:38:49,123 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-17 01:38:49,159 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-17 01:38:49,164 [menu.py:arrangeMenuItems()] - X > more power
2024-04-17 01:38:49,171 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-17 01:38:49,181 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-17 01:38:49,197 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-17 01:47:41,154 [screen.py:_load_panel()] - Loading panel: system
2024-04-17 01:47:41,198 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/system_info
2024-04-17 01:47:41,265 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > system
2024-04-17 01:47:41,294 [system.py:get_updates()] - {'jsonrpc': '2.0', 'result': {'github_rate_limit': 60, 'github_requests_remaining': 58, 'github_limit_reset_time': 1713308796.0, 'version_info': {'system': {'package_count': 0, 'package_list': []}, 'moonraker': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Arksine', 'repo_name': 'moonraker', 'remote_url': 'https://github.com/Arksine/moonraker.git', 'recovery_url': 'https://github.com/Arksine/moonraker.git', 'version': 'v0.8.0-325', 'remote_version': 'v0.8.0-325', 'rollback_version': 'v0.8.0-324', 'current_hash': '99b97afc7de1ed16ddc7db29ab6354bd6ea3dfb7', 'remote_hash': '99b97afc7de1ed16ddc7db29ab6354bd6ea3dfb7', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.8.0-325-g99b97afc', 'pristine': False, 'corrupt': False, 'warnings': [], 'anomalies': ["Repo has untracked source files: ['moonraker/components/timelapse.py']"]}, 'klipper': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Klipper3d', 'repo_name': 'klipper', 'remote_url': 'https://github.com/Klipper3d/klipper', 'recovery_url': 'https://github.com/Klipper3d/klipper', 'version': 'v0.12.0-159', 'remote_version': 'v0.12.0-159', 'rollback_version': 'v0.12.0-143', 'current_hash': '2425a74638baa87efef3ca02253804d126101c8a', 'remote_hash': '2425a74638baa87efef3ca02253804d126101c8a', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.12.0-159-g2425a746', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'Klipper-Adaptive-Meshing-Purging': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'kyleisah', 'repo_name': 'Klipper-Adaptive-Meshing-Purging', 'remote_url': 'https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git', 'recovery_url': 'https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git', 'version': 'v1.1.2-12', 'remote_version': 'v1.1.2-12', 'rollback_version': 'v1.1.2-12', 'current_hash': 'd657271f13fc429b5ca36a4f8956b67c9ddf0558', 'remote_hash': 'd657271f13fc429b5ca36a4f8956b67c9ddf0558', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.1.2-12-gd657271f', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail-config': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'mainsail-config', 'remote_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'recovery_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'version': 'v1.2.1-0', 'remote_version': 'v1.2.1-0', 'rollback_version': 'v1.1.0-1', 'current_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'remote_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-0-ge57810d5', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail': {'channel': 'stable', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'web', 'info_tags': [], 'name': 'mainsail', 'repo_name': 'mainsail', 'owner': 'mainsail-crew', 'version': 'v2.10.0', 'remote_version': 'v2.10.0', 'rollback_version': 'v2.9.1', 'last_error': '', 'warnings': [], 'anomalies': []}, 'sonar': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'mainsail-crew', 'repo_name': 'sonar', 'remote_url': 'https://github.com/mainsail-crew/sonar.git', 'recovery_url': 'https://github.com/mainsail-crew/sonar.git', 'version': 'v0.1.3-1', 'remote_version': 'v0.1.3-1', 'rollback_version': 'v0.1.3-1', 'current_hash': 'eacc498a52f79292063b6f9b0e0c191c34c5dc09', 'remote_hash': 'eacc498a52f79292063b6f9b0e0c191c34c5dc09', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.1.3-1-geacc498a', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'timelapse': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'mainsail-crew', 'repo_name': 'moonraker-timelapse', 'remote_url': 'https://github.com/mainsail-crew/moonraker-timelapse.git', 'recovery_url': 'https://github.com/mainsail-crew/moonraker-timelapse.git', 'version': 'v0.0.1-143', 'remote_version': 'v0.0.1-143', 'rollback_version': 'v0.0.1-143', 'current_hash': 'c7fff11e542b95e0e15b8bb1443cea8159ac0274', 'remote_hash': 'c7fff11e542b95e0e15b8bb1443cea8159ac0274', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.0.1-143-gc7fff11e', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'KlipperScreen': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'KlipperScreen', 'repo_name': 'KlipperScreen', 'remote_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'recovery_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'version': 'v0.4.0-3', 'remote_version': 'v0.4.0-3', 'rollback_version': 'v0.3.9-92', 'current_hash': '31f88d2ffd5169297261b010626d1bac815c71ac', 'remote_hash': '31f88d2ffd5169297261b010626d1bac815c71ac', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.4.0-3-g31f88d2f', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'print_area_bed_mesh': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Turge08', 'repo_name': 'print_area_bed_mesh', 'remote_url': 'https://github.com/Turge08/print_area_bed_mesh.git', 'recovery_url': 'https://github.com/Turge08/print_area_bed_mesh.git', 'version': 'v1.2.1-21', 'remote_version': 'v1.2.1-21', 'rollback_version': 'v1.2.1-21', 'current_hash': '53451c9dedd331c2ead0fbd0f55ee15c37d41b1f', 'remote_hash': '53451c9dedd331c2ead0fbd0f55ee15c37d41b1f', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-21-g53451c9d', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}}, 'busy': False}, 'id': 53}
2024-04-17 01:48:11,520 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-04-17 01:48:11,521 [printer.py:change_state()] - Adding callback for state: shutdown
2024-04-17 01:48:11,534 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-17 01:48:11,540 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffff91946400>>
2024-04-17 01:48:11,541 [screen.py:show_panel()] - Reinitializing panel
2024-04-17 01:48:11,627 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-17 01:48:20,758 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2024-04-17 01:48:20,832 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-04-17 01:48:20,834 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-17 01:48:20,838 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-17 01:48:20,839 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-17 01:48:20,844 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffff91946400>>
2024-04-17 01:48:20,845 [screen.py:show_panel()] - Reinitializing panel
2024-04-17 01:48:20,902 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-17 01:48:24,120 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-17 01:48:24,138 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-17 01:48:24,155 [printer.py:configure_cameras()] - Cameras: []
2024-04-17 01:48:24,156 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-17 01:48:24,156 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-17 01:48:24,178 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-17 01:48:24,220 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.985'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.013000, 0.017500\n-0.014500, 0.000500, 0.007000\n-0.025500, -0.008000, -0.011500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.985, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.013, 0.0175], [-0.0145, 0.0005, 0.007], [-0.0255, -0.008, -0.0115]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-17 01:48:24,226 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-17 01:48:24,228 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746
2024-04-17 01:48:24,228 [printer.py:reinit()] - # Extruders: 1
2024-04-17 01:48:24,228 [printer.py:reinit()] - # Temperature devices: 2
2024-04-17 01:48:24,229 [printer.py:reinit()] - # Fans: 4
2024-04-17 01:48:24,229 [printer.py:reinit()] - # Output pins: 0
2024-04-17 01:48:24,229 [printer.py:reinit()] - # Leds: 1
2024-04-17 01:48:24,229 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-17 01:48:24,257 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-17 01:48:24,260 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-17 01:48:24,588 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-17 01:48:24,588 [screen.py:init_klipper()] - Printer initialized
2024-04-17 01:48:24,589 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-17 01:48:24,589 [printer.py:change_state()] - Adding callback for state: startup
2024-04-17 01:48:42,816 [KlippyWebsocket.py:restart()] - Sending printer.restart
2024-04-17 01:48:42,837 [printer.py:change_state()] - Changing state from 'startup' to 'disconnected'
2024-04-17 01:48:42,838 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-17 01:48:42,839 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-17 01:48:42,840 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-17 01:48:42,842 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffff91946400>>
2024-04-17 01:48:42,843 [screen.py:show_panel()] - Reinitializing panel
2024-04-17 01:48:42,902 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-17 01:48:44,155 [KlippyGtk.py:Dialog()] - Showing dialog Restart (width=800, height=480)
2024-04-17 01:48:45,628 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-17 01:49:08,871 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-17 01:49:08,872 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-3-g31f88d2
2024-04-17 01:49:08,873 [functions.py:log_start()] - Python version: 3.9
2024-04-17 01:49:09,905 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-17 01:49:09,906 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-17 01:49:09,945 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-17 01:49:09,949 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-04-17 01:49:09,950 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-17 01:49:10,411 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-17 01:49:10,413 [config.py:install_language()] - Using lang en
2024-04-17 01:49:10,450 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-17 01:49:10,456 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-17 01:49:10,466 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-17 01:49:10,472 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-17 01:49:13,046 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-17 01:49:13,075 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-17 01:49:13,095 [screen.py:initial_connection()] - Default printer: None
2024-04-17 01:49:13,193 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-17 01:49:13,196 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-17 01:49:13,329 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-17 01:49:13,356 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-17 01:49:13,357 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-17 01:49:13,414 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-17 01:49:13,443 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-17 01:49:13,487 [_logging.py:info()] - Websocket connected
2024-04-17 01:49:13,488 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-17 01:49:13,861 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-17 01:49:13,888 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-17 01:49:13,921 [printer.py:configure_cameras()] - Cameras: []
2024-04-17 01:49:13,922 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-17 01:49:13,922 [screen.py:init_klipper()] - Klipper not connected
2024-04-17 01:49:17,272 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-17 01:49:17,292 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-17 01:49:17,293 [screen.py:init_klipper()] - Klipper not connected
2024-04-17 01:49:20,278 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-17 01:49:20,306 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-17 01:49:20,308 [screen.py:init_klipper()] - Klipper not connected
2024-04-17 01:49:23,277 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-17 01:49:23,302 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-17 01:49:23,303 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-17 01:49:23,350 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-17 01:49:26,274 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-17 01:49:26,296 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-17 01:49:26,315 [printer.py:configure_cameras()] - Cameras: []
2024-04-17 01:49:26,316 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-17 01:49:26,317 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-17 01:49:27,717 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-17 01:49:27,857 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.985'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.007', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.013000, 0.017500\n-0.014500, 0.000500, 0.007000\n-0.025500, -0.008000, -0.011500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.985, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.013, 0.0175], [-0.0145, 0.0005, 0.007], [-0.0255, -0.008, -0.0115]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.007, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-17 01:49:27,862 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-17 01:49:27,864 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746
2024-04-17 01:49:27,864 [printer.py:reinit()] - # Extruders: 1
2024-04-17 01:49:27,865 [printer.py:reinit()] - # Temperature devices: 2
2024-04-17 01:49:27,865 [printer.py:reinit()] - # Fans: 4
2024-04-17 01:49:27,866 [printer.py:reinit()] - # Output pins: 0
2024-04-17 01:49:27,866 [printer.py:reinit()] - # Leds: 1
2024-04-17 01:49:27,869 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-17 01:49:27,905 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-17 01:49:27,908 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-17 01:49:28,223 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-17 01:49:28,223 [screen.py:init_klipper()] - Printer initialized
2024-04-17 01:49:28,224 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-17 01:49:28,225 [printer.py:change_state()] - Adding callback for state: startup
2024-04-17 01:50:07,193 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-17 01:50:07,193 [printer.py:change_state()] - Adding callback for state: ready
2024-04-17 01:50:07,195 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-17 01:50:07,199 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-17 01:50:07,339 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-17 01:50:07,354 [main_menu.py:add_device()] - Adding device: extruder
2024-04-17 01:50:07,366 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-17 01:50:07,378 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-17 01:50:07,428 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-17 01:50:07,430 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-17 01:50:07,454 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-17 01:50:07,513 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-17 01:50:07,513 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-17 01:50:07,531 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-17 01:50:26,056 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-17 01:50:26,149 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-17 01:50:26,153 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-17 01:50:26,195 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-17 01:50:27,053 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-17 01:50:27,089 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-17 01:50:27,092 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-17 01:50:27,112 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-17 01:54:08,990 [screen.py:_load_panel()] - Loading panel: move
2024-04-17 01:54:09,195 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-17 01:54:09,878 [screen.py:_load_panel()] - Loading panel: menu
2024-04-17 01:54:10,052 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-17 01:54:10,081 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-17 01:54:11,250 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-17 01:54:56,095 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-17 01:54:56,167 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-17 02:06:12,114 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-17 02:06:12,115 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-17 02:06:12,118 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-17 02:06:12,118 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-17 02:06:12,124 [screen.py:show_panel()] - Reinitializing panel
2024-04-17 02:06:12,204 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-17 02:06:15,058 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-17 02:06:15,080 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-17 02:06:15,099 [printer.py:configure_cameras()] - Cameras: []
2024-04-17 02:06:15,100 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-17 02:06:15,100 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-17 02:06:15,377 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-17 02:06:15,424 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.025', 'samples_tolerance_retries': '10', 'z_offset': '-0.985'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.013000, 0.017500\n-0.014500, 0.000500, 0.007000\n-0.025500, -0.008000, -0.011500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.985, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.025, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.013, 0.0175], [-0.0145, 0.0005, 0.007], [-0.0255, -0.008, -0.0115]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-17 02:06:15,430 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-17 02:06:15,432 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746
2024-04-17 02:06:15,432 [printer.py:reinit()] - # Extruders: 1
2024-04-17 02:06:15,432 [printer.py:reinit()] - # Temperature devices: 2
2024-04-17 02:06:15,432 [printer.py:reinit()] - # Fans: 4
2024-04-17 02:06:15,432 [printer.py:reinit()] - # Output pins: 0
2024-04-17 02:06:15,433 [printer.py:reinit()] - # Leds: 1
2024-04-17 02:06:15,433 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-17 02:06:15,458 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-17 02:06:15,461 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-17 02:06:15,793 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-17 02:06:15,794 [screen.py:init_klipper()] - Printer initialized
2024-04-17 02:06:15,794 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-17 02:06:15,795 [printer.py:change_state()] - Adding callback for state: startup
2024-04-17 02:06:17,665 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-17 02:06:17,665 [printer.py:change_state()] - Adding callback for state: ready
2024-04-17 02:06:17,668 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-17 02:06:17,673 [screen.py:show_panel()] - Reinitializing panel
2024-04-17 02:06:17,783 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-17 02:06:17,797 [main_menu.py:add_device()] - Adding device: extruder
2024-04-17 02:06:17,805 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-17 02:06:17,814 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-17 02:06:17,863 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-17 02:06:17,865 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-17 02:06:17,909 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-17 02:06:17,911 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-17 02:06:17,936 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-17 02:54:57,054 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-17 11:24:39,833 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-17 11:24:39,834 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-17 11:24:39,838 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-17 11:24:39,839 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-17 11:24:39,840 [screen.py:close_screensaver()] - Closing Screensaver
2024-04-17 11:24:39,861 [screen.py:wake_screen()] - Screen wake up
2024-04-17 11:24:39,929 [screen.py:show_panel()] - Reinitializing panel
2024-04-17 11:24:39,986 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-17 11:24:43,055 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-17 11:24:43,078 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-17 11:24:43,097 [printer.py:configure_cameras()] - Cameras: []
2024-04-17 11:24:43,097 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-17 11:24:43,098 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-17 11:24:43,138 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-17 11:24:43,179 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.005', 'samples_tolerance_retries': '10', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.985'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.013000, 0.017500\n-0.014500, 0.000500, 0.007000\n-0.025500, -0.008000, -0.011500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.985, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.005, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.013, 0.0175], [-0.0145, 0.0005, 0.007], [-0.0255, -0.008, -0.0115]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-17 11:24:43,185 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-17 11:24:43,187 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746
2024-04-17 11:24:43,187 [printer.py:reinit()] - # Extruders: 1
2024-04-17 11:24:43,187 [printer.py:reinit()] - # Temperature devices: 2
2024-04-17 11:24:43,187 [printer.py:reinit()] - # Fans: 4
2024-04-17 11:24:43,188 [printer.py:reinit()] - # Output pins: 0
2024-04-17 11:24:43,188 [printer.py:reinit()] - # Leds: 1
2024-04-17 11:24:43,188 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-17 11:24:43,216 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-17 11:24:43,219 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-17 11:24:43,550 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-17 11:24:43,551 [screen.py:init_klipper()] - Printer initialized
2024-04-17 11:24:43,552 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-17 11:24:43,552 [printer.py:change_state()] - Adding callback for state: startup
2024-04-17 11:24:45,411 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-17 11:24:45,412 [printer.py:change_state()] - Adding callback for state: ready
2024-04-17 11:24:45,414 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-17 11:24:45,419 [screen.py:show_panel()] - Reinitializing panel
2024-04-17 11:24:45,530 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-17 11:24:45,544 [main_menu.py:add_device()] - Adding device: extruder
2024-04-17 11:24:45,552 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-17 11:24:45,561 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-17 11:24:45,610 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-17 11:24:45,612 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-17 11:24:45,658 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-17 11:24:45,661 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-17 11:24:45,687 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-17 12:24:40,055 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-17 16:17:26,537 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-17 16:17:26,538 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-3-g31f88d2
2024-04-17 16:17:26,538 [functions.py:log_start()] - Python version: 3.9
2024-04-17 16:17:26,945 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-17 16:17:26,946 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-17 16:17:26,971 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-17 16:17:26,974 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-04-17 16:17:26,975 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-17 16:17:27,108 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-17 16:17:27,109 [config.py:install_language()] - Using lang en
2024-04-17 16:17:27,140 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-17 16:17:27,143 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-17 16:17:27,148 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-17 16:17:27,151 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-17 16:17:29,602 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-17 16:17:29,615 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-17 16:17:29,625 [screen.py:initial_connection()] - Default printer: None
2024-04-17 16:17:29,703 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-17 16:17:29,704 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-17 16:17:29,780 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-17 16:17:29,795 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-17 16:17:29,796 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-17 16:17:29,836 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-17 16:17:29,856 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-17 16:17:29,874 [_logging.py:info()] - Websocket connected
2024-04-17 16:17:29,874 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-17 16:17:29,881 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-17 16:17:29,900 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-17 16:17:29,918 [printer.py:configure_cameras()] - Cameras: []
2024-04-17 16:17:29,919 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-17 16:17:29,919 [screen.py:init_klipper()] - Klipper not connected
2024-04-17 16:17:33,572 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-17 16:17:33,597 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-17 16:17:33,598 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-17 16:17:33,640 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-17 16:17:36,572 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-17 16:17:36,594 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-17 16:17:36,634 [printer.py:configure_cameras()] - Cameras: []
2024-04-17 16:17:36,635 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-17 16:17:36,636 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-17 16:17:36,668 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-17 16:17:39,571 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-17 16:17:39,594 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-17 16:17:39,611 [printer.py:configure_cameras()] - Cameras: []
2024-04-17 16:17:39,612 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-17 16:17:39,613 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-17 16:17:39,633 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-17 16:17:39,674 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.005', 'samples_tolerance_retries': '10', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.985'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.013000, 0.017500\n-0.014500, 0.000500, 0.007000\n-0.025500, -0.008000, -0.011500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.985, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.005, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.013, 0.0175], [-0.0145, 0.0005, 0.007], [-0.0255, -0.008, -0.0115]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-17 16:17:39,679 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-17 16:17:39,681 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746
2024-04-17 16:17:39,681 [printer.py:reinit()] - # Extruders: 1
2024-04-17 16:17:39,681 [printer.py:reinit()] - # Temperature devices: 2
2024-04-17 16:17:39,681 [printer.py:reinit()] - # Fans: 4
2024-04-17 16:17:39,682 [printer.py:reinit()] - # Output pins: 0
2024-04-17 16:17:39,682 [printer.py:reinit()] - # Leds: 1
2024-04-17 16:17:39,682 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-17 16:17:39,709 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-17 16:17:39,712 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-17 16:17:40,056 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-17 16:17:40,057 [screen.py:init_klipper()] - Printer initialized
2024-04-17 16:17:40,057 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-17 16:17:40,058 [printer.py:change_state()] - Adding callback for state: startup
2024-04-17 16:17:40,663 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-17 16:17:40,663 [printer.py:change_state()] - Adding callback for state: ready
2024-04-17 16:17:40,665 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-17 16:17:40,670 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-17 16:17:40,797 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-17 16:17:40,812 [main_menu.py:add_device()] - Adding device: extruder
2024-04-17 16:17:40,821 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-17 16:17:40,829 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-17 16:17:40,879 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-17 16:17:40,882 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-17 16:17:40,899 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-17 16:17:40,959 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-17 16:17:40,959 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-17 16:17:40,977 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-17 16:17:45,030 [screen.py:_load_panel()] - Loading panel: move
2024-04-17 16:17:45,213 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-17 16:17:45,970 [screen.py:_load_panel()] - Loading panel: menu
2024-04-17 16:17:46,133 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-17 16:17:46,162 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-17 16:17:46,568 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-17 16:17:46,605 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-17 16:17:46,606 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-17 16:17:46,628 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-17 16:17:46,629 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-17 16:17:46,664 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-17 16:17:46,665 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-17 16:17:46,687 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-17 16:17:47,278 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-18 13:18:31,990 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-18 13:18:36,826 [screen.py:show_popup_message()] - error: No trigger on probe after full movement
2024-04-18 13:18:45,178 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-18 13:18:45,214 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-18 13:18:46,179 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-04-18 13:18:47,089 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-18 13:18:47,090 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M18'}
2024-04-18 13:18:55,568 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-18 13:18:55,599 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-18 13:18:56,194 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-18 13:19:41,826 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-18 13:25:40,411 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-18 14:25:41,022 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-18 23:24:56,393 [screen.py:close_screensaver()] - Closing Screensaver
2024-04-18 23:24:56,409 [screen.py:wake_screen()] - Screen wake up
2024-04-18 23:24:56,498 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-18 23:25:04,099 [screen.py:_load_panel()] - Loading panel: shutdown
2024-04-18 23:25:04,144 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu > shutdown
2024-04-18 23:25:05,242 [KlippyWebsocket.py:emergency_stop()] - Sending printer.emergency_stop
2024-04-18 23:25:05,243 [KlippyWebsocket.py:emergency_stop()] - Sending printer.emergency_stop
2024-04-18 23:25:05,347 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-04-18 23:25:05,348 [printer.py:change_state()] - Adding callback for state: shutdown
2024-04-18 23:25:05,363 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-18 23:25:05,366 [screen.py:show_panel()] - Reinitializing panel
2024-04-18 23:25:05,424 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-18 23:26:49,634 [screen.py:show_panel()] - Reinitializing panel
2024-04-18 23:26:49,658 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > shutdown
2024-04-18 23:28:26,573 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-18 23:28:26,593 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-18 23:28:28,033 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2024-04-18 23:28:28,094 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-04-18 23:28:28,094 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-18 23:28:28,103 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-18 23:28:28,104 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-18 23:28:28,106 [screen.py:show_panel()] - Reinitializing panel
2024-04-18 23:28:28,163 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-18 23:28:31,024 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-18 23:28:31,049 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-18 23:28:31,068 [printer.py:configure_cameras()] - Cameras: []
2024-04-18 23:28:31,069 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-18 23:28:31,070 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-18 23:28:31,414 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-18 23:28:31,468 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.005', 'samples_tolerance_retries': '10', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.985'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.013000, 0.017500\n-0.014500, 0.000500, 0.007000\n-0.025500, -0.008000, -0.011500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.985, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.005, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.013, 0.0175], [-0.0145, 0.0005, 0.007], [-0.0255, -0.008, -0.0115]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-18 23:28:31,474 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-18 23:28:31,477 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746
2024-04-18 23:28:31,477 [printer.py:reinit()] - # Extruders: 1
2024-04-18 23:28:31,478 [printer.py:reinit()] - # Temperature devices: 2
2024-04-18 23:28:31,479 [printer.py:reinit()] - # Fans: 4
2024-04-18 23:28:31,480 [printer.py:reinit()] - # Output pins: 0
2024-04-18 23:28:31,480 [printer.py:reinit()] - # Leds: 1
2024-04-18 23:28:31,481 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-18 23:28:31,507 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-18 23:28:31,510 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-18 23:28:31,839 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-18 23:28:31,839 [screen.py:init_klipper()] - Printer initialized
2024-04-18 23:28:31,840 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-18 23:28:31,840 [printer.py:change_state()] - Adding callback for state: startup
2024-04-18 23:28:33,695 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-18 23:28:33,695 [printer.py:change_state()] - Adding callback for state: ready
2024-04-18 23:28:33,698 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-18 23:28:33,703 [screen.py:show_panel()] - Reinitializing panel
2024-04-18 23:28:33,822 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-18 23:28:33,836 [main_menu.py:add_device()] - Adding device: extruder
2024-04-18 23:28:33,844 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-18 23:28:33,853 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-18 23:28:33,902 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-18 23:28:33,904 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-18 23:28:33,947 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-18 23:28:33,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-18 23:28:33,975 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-18 23:28:46,011 [screen.py:show_panel()] - Reinitializing panel
2024-04-18 23:28:46,121 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-18 23:28:46,646 [screen.py:show_panel()] - Reinitializing panel
2024-04-18 23:28:46,812 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-18 23:28:46,841 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-18 23:28:47,468 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-18 23:29:31,425 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-18 23:29:36,253 [screen.py:show_popup_message()] - error: No trigger on probe after full movement
2024-04-18 23:29:40,955 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-18 23:29:40,991 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-18 23:29:42,260 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffb82a24c0 (GtkDialog at 0xd6bab10)>
2024-04-18 23:29:42,308 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-04-18 23:29:43,524 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-18 23:29:43,524 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M18'}
2024-04-18 23:29:54,110 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-18 23:29:54,140 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-18 23:29:54,561 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-18 23:30:46,138 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-18 23:36:31,936 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2024-04-18 23:37:11,771 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-18 23:37:11,846 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-18 23:37:13,231 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-18 23:37:13,263 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-18 23:37:14,569 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-18 23:37:34,313 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2024-04-18 23:37:42,648 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-18 23:38:10,414 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-18 23:39:27,967 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2024-04-18 23:39:42,197 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-18 23:39:42,247 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-18 23:39:43,131 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffb8278400 (GtkDialog at 0xda6ff80)>
2024-04-18 23:39:43,158 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-04-18 23:39:44,231 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-18 23:39:44,232 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M18'}
2024-04-18 23:40:14,411 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-18 23:40:14,470 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-18 23:40:15,011 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-18 23:40:40,990 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-18 23:49:42,299 [screen.py:show_popup_message()] - error: Retries aborting: Probed points range is increasing. Possibly Z motor numbering is wrong
2024-04-18 23:50:55,592 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-18 23:54:25,598 [screen.py:show_popup_message()] - error: Retries aborting: Probed points range is increasing. Possibly Z motor numbering is wrong
2024-04-18 23:56:10,726 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-18 23:56:10,763 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-18 23:56:11,519 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-18 23:56:11,560 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-19 00:17:26,454 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-19 00:17:26,455 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-3-g31f88d2
2024-04-19 00:17:26,456 [functions.py:log_start()] - Python version: 3.9
2024-04-19 00:17:26,884 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-19 00:17:26,885 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-19 00:17:26,918 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-19 00:17:26,922 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

=======================
2024-04-19 00:17:26,924 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-19 00:17:27,071 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-19 00:17:27,072 [config.py:install_language()] - Using lang en
2024-04-19 00:17:27,116 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-19 00:17:27,120 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-19 00:17:27,124 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-19 00:17:27,129 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-19 00:17:30,113 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-19 00:17:30,127 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-19 00:17:30,137 [screen.py:initial_connection()] - Default printer: None
2024-04-19 00:17:30,217 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-19 00:17:30,218 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-19 00:17:30,292 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-19 00:17:30,312 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-19 00:17:30,313 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-19 00:17:30,350 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-19 00:17:30,373 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-19 00:17:30,395 [_logging.py:info()] - Websocket connected
2024-04-19 00:17:30,396 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-19 00:17:30,685 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-19 00:17:30,703 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-19 00:17:30,721 [printer.py:configure_cameras()] - Cameras: []
2024-04-19 00:17:30,721 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-19 00:17:30,722 [screen.py:init_klipper()] - Klipper not connected
2024-04-19 00:17:34,002 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-19 00:17:34,030 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-19 00:17:34,031 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-19 00:17:34,075 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-19 00:17:37,001 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-19 00:17:37,019 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-19 00:17:37,036 [printer.py:configure_cameras()] - Cameras: []
2024-04-19 00:17:37,037 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-19 00:17:37,037 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-19 00:17:38,515 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-19 00:17:38,659 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.005', 'samples_tolerance_retries': '10', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.985'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.013000, 0.017500\n-0.014500, 0.000500, 0.007000\n-0.025500, -0.008000, -0.011500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.985, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.005, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.013, 0.0175], [-0.0145, 0.0005, 0.007], [-0.0255, -0.008, -0.0115]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-19 00:17:38,664 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-19 00:17:38,666 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746
2024-04-19 00:17:38,666 [printer.py:reinit()] - # Extruders: 1
2024-04-19 00:17:38,667 [printer.py:reinit()] - # Temperature devices: 2
2024-04-19 00:17:38,667 [printer.py:reinit()] - # Fans: 4
2024-04-19 00:17:38,668 [printer.py:reinit()] - # Output pins: 0
2024-04-19 00:17:38,668 [printer.py:reinit()] - # Leds: 1
2024-04-19 00:17:38,671 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-19 00:17:38,714 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-19 00:17:38,719 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-19 00:17:38,970 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-19 00:17:38,971 [screen.py:init_klipper()] - Printer initialized
2024-04-19 00:17:38,971 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-19 00:17:38,972 [printer.py:change_state()] - Adding callback for state: startup
2024-04-19 00:17:40,138 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-19 00:17:40,139 [printer.py:change_state()] - Adding callback for state: ready
2024-04-19 00:17:40,140 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-19 00:17:40,146 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-19 00:17:40,313 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-19 00:17:40,330 [main_menu.py:add_device()] - Adding device: extruder
2024-04-19 00:17:40,340 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-19 00:17:40,350 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-19 00:17:40,416 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-19 00:17:40,419 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-19 00:17:40,440 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-19 00:17:40,516 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-19 00:17:40,517 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-19 00:17:40,538 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-19 00:17:46,001 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-19 00:17:46,078 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-19 00:17:46,082 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-19 00:17:46,119 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-19 00:17:46,122 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-19 00:17:46,199 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-19 00:17:46,203 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-19 00:17:46,223 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-19 12:55:59,001 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-19 14:02:57,776 [screen.py:close_screensaver()] - Closing Screensaver
2024-04-19 14:02:57,803 [screen.py:wake_screen()] - Screen wake up
2024-04-19 14:02:57,859 [screen.py:show_popup_message()] - error: Retries aborting: Probed points range is increasing. Possibly Z motor numbering is wrong
2024-04-19 14:20:17,569 [main_menu.py:toggle_visibility()] - Graph show False: extruder
2024-04-19 14:20:18,938 [main_menu.py:toggle_visibility()] - Graph show True: extruder
2024-04-19 14:20:19,153 [main_menu.py:toggle_visibility()] - Graph show False: heater_bed
2024-04-19 14:20:19,906 [screen.py:_load_panel()] - Loading panel: temperature
2024-04-19 14:20:19,938 [temperature.py:add_device()] - Adding device: extruder
2024-04-19 14:20:19,948 [temperature.py:add_device()] - Adding device: heater_bed
2024-04-19 14:20:19,958 [temperature.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-19 14:20:19,967 [temperature.py:select_heater()] - Selecting extruder
2024-04-19 14:20:19,969 [temperature.py:select_heater()] - Selecting heater_bed
2024-04-19 14:20:20,016 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-04-19 14:20:21,035 [temperature.py:select_heater()] - Deselecting extruder
2024-04-19 14:20:21,442 [temperature.py:select_heater()] - Deselecting heater_bed
2024-04-19 14:20:21,666 [temperature.py:select_heater()] - Selecting extruder
2024-04-19 14:20:22,225 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S0
2024-04-19 14:20:23,466 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-19 14:20:23,539 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-19 14:21:09,282 [screen.py:show_popup_message()] - error: Retries aborting: Probed points range is increasing. Possibly Z motor numbering is wrong
2024-04-19 14:21:14,515 [screen.py:_load_panel()] - Loading panel: move
2024-04-19 14:21:14,633 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-19 14:21:16,210 [screen.py:_load_panel()] - Loading panel: menu
2024-04-19 14:21:16,438 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-19 14:21:16,468 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-19 14:21:16,945 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-19 15:21:16,997 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-19 18:17:26,511 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-19 18:17:26,512 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-3-g31f88d2
2024-04-19 18:17:26,513 [functions.py:log_start()] - Python version: 3.9
2024-04-19 18:17:26,805 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-19 18:17:26,807 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-19 18:17:26,840 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-19 18:17:26,844 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

[graph Printer]
heater_bed = False

=======================
2024-04-19 18:17:26,846 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-19 18:17:26,991 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-19 18:17:26,992 [config.py:install_language()] - Using lang en
2024-04-19 18:17:27,021 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-19 18:17:27,025 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-19 18:17:27,030 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-19 18:17:27,034 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-19 18:17:28,560 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-19 18:17:28,574 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-19 18:17:28,584 [screen.py:initial_connection()] - Default printer: None
2024-04-19 18:17:28,663 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-19 18:17:28,663 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-19 18:17:28,735 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-19 18:17:28,750 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-19 18:17:28,750 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-19 18:17:28,793 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-19 18:17:28,813 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-19 18:17:28,831 [_logging.py:info()] - Websocket connected
2024-04-19 18:17:28,831 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-19 18:17:28,840 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-19 18:17:28,859 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-19 18:17:28,877 [printer.py:configure_cameras()] - Cameras: []
2024-04-19 18:17:28,878 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-19 18:17:28,878 [screen.py:init_klipper()] - Klipper not connected
2024-04-19 18:17:32,143 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-19 18:17:32,179 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-19 18:17:32,179 [screen.py:init_klipper()] - Klipper not connected
2024-04-19 18:17:35,142 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-19 18:17:35,168 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-19 18:17:35,168 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-19 18:17:35,211 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-19 18:17:38,139 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-19 18:17:38,161 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-19 18:17:38,185 [printer.py:configure_cameras()] - Cameras: []
2024-04-19 18:17:38,187 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-19 18:17:38,188 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-19 18:17:38,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-19 18:17:38,589 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.005', 'samples_tolerance_retries': '10', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.985'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.013000, 0.017500\n-0.014500, 0.000500, 0.007000\n-0.025500, -0.008000, -0.011500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.985, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.005, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.013, 0.0175], [-0.0145, 0.0005, 0.007], [-0.0255, -0.008, -0.0115]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-19 18:17:38,599 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-19 18:17:38,601 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746
2024-04-19 18:17:38,601 [printer.py:reinit()] - # Extruders: 1
2024-04-19 18:17:38,602 [printer.py:reinit()] - # Temperature devices: 2
2024-04-19 18:17:38,602 [printer.py:reinit()] - # Fans: 4
2024-04-19 18:17:38,603 [printer.py:reinit()] - # Output pins: 0
2024-04-19 18:17:38,603 [printer.py:reinit()] - # Leds: 1
2024-04-19 18:17:38,607 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-19 18:17:38,660 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-19 18:17:38,664 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-19 18:17:38,886 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-19 18:17:38,887 [screen.py:init_klipper()] - Printer initialized
2024-04-19 18:17:38,888 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-19 18:17:38,888 [printer.py:change_state()] - Adding callback for state: startup
2024-04-19 18:17:40,281 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-19 18:17:40,282 [printer.py:change_state()] - Adding callback for state: ready
2024-04-19 18:17:40,285 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-19 18:17:40,290 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-19 18:17:40,415 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-19 18:17:40,429 [main_menu.py:add_device()] - Adding device: extruder
2024-04-19 18:17:40,438 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-19 18:17:40,446 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-19 18:17:40,496 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-19 18:17:40,498 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-19 18:17:40,515 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-19 18:17:40,575 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-19 18:17:40,575 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-19 18:17:40,593 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-19 18:17:46,137 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-19 18:17:46,174 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-19 18:17:46,176 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-19 18:17:46,197 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-19 18:17:46,199 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-19 18:17:46,234 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-19 18:17:46,236 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-19 18:17:46,256 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-19 18:18:04,577 [screen.py:_load_panel()] - Loading panel: temperature
2024-04-19 18:18:04,609 [temperature.py:add_device()] - Adding device: extruder
2024-04-19 18:18:04,620 [temperature.py:add_device()] - Adding device: heater_bed
2024-04-19 18:18:04,632 [temperature.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-19 18:18:04,643 [temperature.py:select_heater()] - Selecting extruder
2024-04-19 18:18:04,647 [temperature.py:select_heater()] - Selecting heater_bed
2024-04-19 18:18:04,712 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-04-19 18:18:05,895 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2024-04-19 18:18:05,895 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2024-04-19 18:18:05,896 [temperature.py:set_temperature()] - name match extruder
2024-04-19 18:18:05,896 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S195.0
2024-04-19 18:18:05,898 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2024-04-19 18:18:05,898 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2024-04-19 18:18:05,899 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S40.0
2024-04-20 10:35:35,376 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 10:35:35,412 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 10:35:36,058 [screen.py:_load_panel()] - Loading panel: extrude
2024-04-20 10:35:36,144 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-20 10:35:37,125 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=120'}
2024-04-20 10:36:08,073 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 10:36:08,144 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 10:44:00,288 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-20 10:44:00,288 [printer.py:change_state()] - Adding callback for state: printing
2024-04-20 10:44:00,308 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-20 10:44:00,576 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-20 10:44:00,586 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-20 10:44:00,609 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_First_Layer.gcode Size: 70896
2024-04-20 10:44:00,625 [job_status.py:show_file_thumbnail()] - Voron_First_Layer.gcode
2024-04-20 10:49:33,090 [screen.py:show_popup_message()] - error: Retries aborting: Probed points range is increasing. Possibly Z motor numbering is wrong
2024-04-20 10:49:35,247 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2024-04-20 10:49:35,449 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-20 10:49:35,450 [printer.py:change_state()] - Adding callback for state: ready
2024-04-20 10:49:35,463 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'error'
2024-04-20 10:49:37,694 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-20 10:49:37,694 [printer.py:change_state()] - Adding callback for state: printing
2024-04-20 10:49:37,712 [job_status.py:set_state()] - Changing job_status state from 'error' to 'printing'
2024-04-20 10:49:37,768 [screen.py:show_panel()] - Reinitializing panel
2024-04-20 10:49:37,921 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-20 10:49:37,931 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-20 10:49:37,950 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_First_Layer.gcode Size: 70896
2024-04-20 10:49:37,960 [job_status.py:show_file_thumbnail()] - Voron_First_Layer.gcode
2024-04-20 10:56:30,413 [screen.py:show_popup_message()] - error: Retries aborting: Probed points range is increasing. Possibly Z motor numbering is wrong
2024-04-20 10:56:32,527 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2024-04-20 10:56:32,648 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-20 10:56:32,649 [printer.py:change_state()] - Adding callback for state: ready
2024-04-20 10:56:32,659 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'error'
2024-04-20 10:57:03,396 [job_status.py:close_panel()] - Closing job_status panel
2024-04-20 10:57:03,396 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-20 10:57:03,403 [screen.py:show_panel()] - Reinitializing panel
2024-04-20 10:57:03,516 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-20 10:57:03,531 [main_menu.py:add_device()] - Adding device: extruder
2024-04-20 10:57:03,539 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-20 10:57:03,548 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-20 10:57:03,599 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 10:57:05,226 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-04-20 10:57:05,283 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2024-04-20 10:57:08,504 [screen.py:show_popup_message()] - echo: PARK_HZ 
2024-04-20 10:57:08,517 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK_HZ'}
2024-04-20 11:57:09,220 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-20 14:26:53,436 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-20 14:26:53,437 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-20 14:26:53,440 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-20 14:26:53,440 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-20 14:26:53,441 [screen.py:close_screensaver()] - Closing Screensaver
2024-04-20 14:26:53,544 [screen.py:wake_screen()] - Screen wake up
2024-04-20 14:26:53,633 [screen.py:show_panel()] - Reinitializing panel
2024-04-20 14:26:53,689 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-20 14:26:57,221 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 14:26:57,241 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-20 14:26:57,259 [printer.py:configure_cameras()] - Cameras: []
2024-04-20 14:26:57,260 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 14:26:57,260 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-20 14:26:57,282 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-20 14:26:57,323 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.005', 'samples_tolerance_retries': '10', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.985'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.013000, 0.017500\n-0.014500, 0.000500, 0.007000\n-0.025500, -0.008000, -0.011500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.985, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.005, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.013, 0.0175], [-0.0145, 0.0005, 0.007], [-0.0255, -0.008, -0.0115]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-20 14:26:57,329 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-20 14:26:57,331 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746
2024-04-20 14:26:57,331 [printer.py:reinit()] - # Extruders: 1
2024-04-20 14:26:57,331 [printer.py:reinit()] - # Temperature devices: 2
2024-04-20 14:26:57,331 [printer.py:reinit()] - # Fans: 4
2024-04-20 14:26:57,331 [printer.py:reinit()] - # Output pins: 0
2024-04-20 14:26:57,332 [printer.py:reinit()] - # Leds: 1
2024-04-20 14:26:57,332 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-20 14:26:57,360 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-20 14:26:57,363 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-20 14:26:57,697 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-20 14:26:57,698 [screen.py:init_klipper()] - Printer initialized
2024-04-20 14:26:57,699 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-20 14:26:57,699 [printer.py:change_state()] - Adding callback for state: startup
2024-04-20 14:26:58,310 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2024-04-20 14:26:58,310 [printer.py:change_state()] - Adding callback for state: error
2024-04-20 14:26:58,315 [screen.py:show_panel()] - Reinitializing panel
2024-04-20 14:26:58,383 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-20 14:27:05,348 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-04-20 14:27:05,349 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-20 14:27:05,351 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-20 14:27:05,353 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-20 14:27:05,357 [screen.py:show_panel()] - Reinitializing panel
2024-04-20 14:27:05,445 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-20 14:27:08,223 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 14:27:08,262 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-20 14:27:08,281 [printer.py:configure_cameras()] - Cameras: []
2024-04-20 14:27:08,281 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 14:27:08,282 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-20 14:27:08,611 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-20 14:27:08,658 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.005', 'samples_tolerance_retries': '10', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.985'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.013000, 0.017500\n-0.014500, 0.000500, 0.007000\n-0.025500, -0.008000, -0.011500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.985, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.005, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.013, 0.0175], [-0.0145, 0.0005, 0.007], [-0.0255, -0.008, -0.0115]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-20 14:27:08,663 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-20 14:27:08,665 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746
2024-04-20 14:27:08,665 [printer.py:reinit()] - # Extruders: 1
2024-04-20 14:27:08,665 [printer.py:reinit()] - # Temperature devices: 2
2024-04-20 14:27:08,665 [printer.py:reinit()] - # Fans: 4
2024-04-20 14:27:08,666 [printer.py:reinit()] - # Output pins: 0
2024-04-20 14:27:08,666 [printer.py:reinit()] - # Leds: 1
2024-04-20 14:27:08,666 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-20 14:27:08,691 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-20 14:27:08,694 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-20 14:27:09,029 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-20 14:27:09,030 [screen.py:init_klipper()] - Printer initialized
2024-04-20 14:27:09,030 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-20 14:27:09,031 [printer.py:change_state()] - Adding callback for state: startup
2024-04-20 14:27:10,898 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-20 14:27:10,898 [printer.py:change_state()] - Adding callback for state: ready
2024-04-20 14:27:10,901 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-20 14:27:10,907 [screen.py:show_panel()] - Reinitializing panel
2024-04-20 14:27:11,043 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-20 14:27:11,059 [main_menu.py:add_device()] - Adding device: extruder
2024-04-20 14:27:11,068 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-20 14:27:11,076 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-20 14:27:11,126 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 14:27:11,128 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 14:27:11,174 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-20 14:27:11,179 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-20 14:27:11,200 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-20 14:17:28,633 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-20 14:17:28,634 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-3-g31f88d2
2024-04-20 14:17:28,634 [functions.py:log_start()] - Python version: 3.9
2024-04-20 14:17:29,040 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-20 14:17:29,041 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-20 14:17:29,068 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-20 14:17:29,071 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

[graph Printer]
heater_bed = False

=======================
2024-04-20 14:17:29,072 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-20 14:17:29,206 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-20 14:17:29,207 [config.py:install_language()] - Using lang en
2024-04-20 14:17:29,238 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-20 14:17:29,242 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-20 14:17:29,248 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-20 14:17:29,251 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-20 14:17:31,083 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-20 14:17:31,104 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-20 14:17:31,121 [screen.py:initial_connection()] - Default printer: None
2024-04-20 14:17:31,214 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-20 14:17:31,216 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-20 14:17:31,305 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-20 14:17:31,334 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-20 14:17:31,334 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 14:17:31,376 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-20 14:17:31,402 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-20 14:17:31,436 [_logging.py:info()] - Websocket connected
2024-04-20 14:17:31,437 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-20 14:17:31,807 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 14:17:31,833 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-20 14:17:31,859 [printer.py:configure_cameras()] - Cameras: []
2024-04-20 14:17:31,860 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 14:17:31,860 [screen.py:init_klipper()] - Klipper not connected
2024-04-20 14:17:35,097 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 14:17:35,117 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 14:17:35,118 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-20 14:17:35,228 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-20 14:17:38,102 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 14:17:38,128 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-20 14:17:38,151 [printer.py:configure_cameras()] - Cameras: []
2024-04-20 14:17:38,152 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 14:17:38,152 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-20 14:17:38,885 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-20 14:17:38,997 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.005', 'samples_tolerance_retries': '10', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.985'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.013000, 0.017500\n-0.014500, 0.000500, 0.007000\n-0.025500, -0.008000, -0.011500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.985, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.005, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.013, 0.0175], [-0.0145, 0.0005, 0.007], [-0.0255, -0.008, -0.0115]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-20 14:17:39,003 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-20 14:17:39,005 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746
2024-04-20 14:17:39,006 [printer.py:reinit()] - # Extruders: 1
2024-04-20 14:17:39,007 [printer.py:reinit()] - # Temperature devices: 2
2024-04-20 14:17:39,007 [printer.py:reinit()] - # Fans: 4
2024-04-20 14:17:39,015 [printer.py:reinit()] - # Output pins: 0
2024-04-20 14:17:39,016 [printer.py:reinit()] - # Leds: 1
2024-04-20 14:17:39,017 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-20 14:17:39,069 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-20 14:17:39,076 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-20 14:17:39,292 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-20 14:17:39,292 [screen.py:init_klipper()] - Printer initialized
2024-04-20 14:17:39,293 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-20 14:17:39,294 [printer.py:change_state()] - Adding callback for state: startup
2024-04-20 14:17:40,703 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-20 14:17:40,704 [printer.py:change_state()] - Adding callback for state: ready
2024-04-20 14:17:40,706 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-20 14:17:40,711 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-20 14:17:40,845 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-20 14:17:40,860 [main_menu.py:add_device()] - Adding device: extruder
2024-04-20 14:17:40,870 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-20 14:17:40,881 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-20 14:17:40,931 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 14:17:40,933 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 14:17:40,951 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-20 14:17:41,010 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-20 14:17:41,011 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 14:17:41,028 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-20 14:17:46,097 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 14:17:46,134 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-20 14:17:46,137 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-20 14:17:46,157 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-20 14:17:46,159 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 14:17:46,195 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-20 14:17:46,198 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-20 14:17:46,219 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-20 14:38:53,033 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-20 14:38:53,034 [printer.py:change_state()] - Adding callback for state: printing
2024-04-20 14:38:53,067 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-20 14:38:53,246 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-20 14:38:53,255 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-20 14:38:53,286 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_First_Layer.gcode Size: 70896
2024-04-20 14:38:53,305 [job_status.py:show_file_thumbnail()] - Voron_First_Layer.gcode
2024-04-20 14:48:37,671 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-04-20 14:48:38,747 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-20 14:48:38,747 [job_status.py:cancel_confirm()] - Canceling print
2024-04-20 14:48:38,748 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-04-20 14:48:38,754 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-04-20 14:48:43,693 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-20 14:48:43,694 [printer.py:change_state()] - Adding callback for state: ready
2024-04-20 14:48:43,711 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-04-20 14:49:02,050 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-04-20 14:49:02,052 [job_status.py:restart()] - Starting print: Voron_First_Layer.gcode
2024-04-20 14:49:02,052 [job_status.py:new_print()] - reseting progress
2024-04-20 14:49:02,257 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-20 14:49:02,258 [printer.py:change_state()] - Adding callback for state: printing
2024-04-20 14:49:02,281 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-20 14:49:02,296 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_First_Layer.gcode Size: 70896
2024-04-20 14:49:02,319 [job_status.py:show_file_thumbnail()] - Voron_First_Layer.gcode
2024-04-20 14:49:02,486 [screen.py:show_panel()] - Reinitializing panel
2024-04-20 14:49:02,644 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-20 14:49:02,654 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-20 14:49:02,668 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_First_Layer.gcode Size: 70896
2024-04-20 14:49:02,677 [job_status.py:show_file_thumbnail()] - Voron_First_Layer.gcode
2024-04-20 14:54:25,010 [screen.py:_load_panel()] - Loading panel: fine_tune
2024-04-20 14:54:25,098 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-04-20 14:54:25,824 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-04-20 14:54:42,795 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 14:54:42,875 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-20 14:54:42,924 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_First_Layer.gcode Size: 70896
2024-04-20 14:54:42,946 [job_status.py:show_file_thumbnail()] - Voron_First_Layer.gcode
2024-04-20 14:54:45,531 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-04-20 14:54:46,602 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-20 14:54:46,603 [job_status.py:cancel_confirm()] - Canceling print
2024-04-20 14:54:46,604 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-04-20 14:54:46,610 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-04-20 14:56:21,563 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-04-20 14:56:21,644 [screen.py:attach_panel()] - Current panel hierarchy: job_status > gcode_macros
2024-04-20 14:56:24,000 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-20 14:56:24,051 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-20 14:56:24,063 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'printing'
2024-04-20 14:56:24,072 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_First_Layer.gcode Size: 70896
2024-04-20 14:56:24,082 [job_status.py:show_file_thumbnail()] - Voron_First_Layer.gcode
2024-04-20 14:56:26,873 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-04-20 14:56:27,554 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-20 14:56:27,555 [job_status.py:cancel_confirm()] - Canceling print
2024-04-20 14:56:27,556 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-04-20 14:56:27,561 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-04-20 14:56:32,036 [screen.py:attach_panel()] - Current panel hierarchy: job_status > gcode_macros
2024-04-20 14:56:34,592 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-20 14:56:34,705 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-20 14:56:34,720 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'printing'
2024-04-20 14:56:34,735 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_First_Layer.gcode Size: 70896
2024-04-20 14:56:34,745 [job_status.py:show_file_thumbnail()] - Voron_First_Layer.gcode
2024-04-20 14:17:28,446 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-20 14:17:28,447 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-3-g31f88d2
2024-04-20 14:17:28,447 [functions.py:log_start()] - Python version: 3.9
2024-04-20 14:17:28,749 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-20 14:17:28,750 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-20 14:17:28,778 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-20 14:17:28,783 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

[graph Printer]
heater_bed = False

=======================
2024-04-20 14:17:28,785 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-20 14:17:28,934 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-20 14:17:28,935 [config.py:install_language()] - Using lang en
2024-04-20 14:17:28,969 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-20 14:17:28,972 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-20 14:17:28,978 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-20 14:17:28,982 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-20 14:17:31,531 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-20 14:17:31,544 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-20 14:17:31,554 [screen.py:initial_connection()] - Default printer: None
2024-04-20 14:17:31,633 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-20 14:17:31,634 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-20 14:17:31,703 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-20 14:17:31,718 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-20 14:17:31,718 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 14:17:31,761 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-20 14:17:31,781 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-20 14:17:31,799 [_logging.py:info()] - Websocket connected
2024-04-20 14:17:31,799 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-20 14:17:31,808 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 14:17:31,826 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-20 14:17:31,845 [printer.py:configure_cameras()] - Cameras: []
2024-04-20 14:17:31,845 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 14:17:31,846 [screen.py:init_klipper()] - Klipper not connected
2024-04-20 14:17:34,905 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 14:17:34,935 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 14:17:34,936 [screen.py:init_klipper()] - Klipper not connected
2024-04-20 14:17:37,901 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 14:17:37,921 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 14:17:37,921 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-20 14:17:39,017 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-20 14:17:41,902 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 14:17:41,932 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-20 14:17:41,971 [printer.py:configure_cameras()] - Cameras: []
2024-04-20 14:17:41,972 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 14:17:41,973 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-20 14:17:42,002 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-20 14:17:42,065 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.005', 'samples_tolerance_retries': '10', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.985'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.013000, 0.017500\n-0.014500, 0.000500, 0.007000\n-0.025500, -0.008000, -0.011500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.985, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.005, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.013, 0.0175], [-0.0145, 0.0005, 0.007], [-0.0255, -0.008, -0.0115]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-20 14:17:42,070 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-20 14:17:42,072 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746
2024-04-20 14:17:42,072 [printer.py:reinit()] - # Extruders: 1
2024-04-20 14:17:42,073 [printer.py:reinit()] - # Temperature devices: 2
2024-04-20 14:17:42,073 [printer.py:reinit()] - # Fans: 4
2024-04-20 14:17:42,073 [printer.py:reinit()] - # Output pins: 0
2024-04-20 14:17:42,074 [printer.py:reinit()] - # Leds: 1
2024-04-20 14:17:42,074 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-20 14:17:42,109 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-20 14:17:42,112 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-20 14:17:42,445 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-20 14:17:42,446 [screen.py:init_klipper()] - Printer initialized
2024-04-20 14:17:42,447 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-20 14:17:42,447 [printer.py:change_state()] - Adding callback for state: startup
2024-04-20 14:17:43,316 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-20 14:17:43,317 [printer.py:change_state()] - Adding callback for state: ready
2024-04-20 14:17:43,319 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-20 14:17:43,330 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-20 14:17:43,505 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-20 14:17:43,524 [main_menu.py:add_device()] - Adding device: extruder
2024-04-20 14:17:43,535 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-20 14:17:43,545 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-20 14:17:43,612 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 14:17:43,614 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 14:17:43,640 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-20 14:17:43,734 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-20 14:17:43,735 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 14:17:43,764 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-20 14:17:48,898 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 14:17:48,939 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-20 14:17:48,943 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-20 14:17:48,970 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-20 14:17:48,972 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 14:17:49,011 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-20 14:17:49,014 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-20 14:17:49,046 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-20 14:17:54,075 [screen.py:_load_panel()] - Loading panel: extrude
2024-04-20 14:17:54,162 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-20 14:17:55,329 [screen.py:_load_panel()] - Loading panel: temperature
2024-04-20 14:17:55,362 [temperature.py:add_device()] - Adding device: extruder
2024-04-20 14:17:55,373 [temperature.py:add_device()] - Adding device: heater_bed
2024-04-20 14:17:55,385 [temperature.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-20 14:17:55,395 [temperature.py:select_heater()] - Selecting extruder
2024-04-20 14:17:55,398 [temperature.py:select_heater()] - Selecting heater_bed
2024-04-20 14:17:55,449 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2024-04-20 14:17:56,231 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2024-04-20 14:17:56,232 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2024-04-20 14:17:56,232 [temperature.py:set_temperature()] - name match extruder
2024-04-20 14:17:56,233 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S195.0
2024-04-20 14:17:56,235 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2024-04-20 14:17:56,235 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2024-04-20 14:17:56,236 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S40.0
2024-04-20 14:17:57,543 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 14:17:57,577 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-20 14:17:58,876 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2024-04-20 14:18:00,186 [temperature.py:set_temperature()] - {'bed': 90.0, 'extruder': 220.0}
2024-04-20 14:18:00,187 [temperature.py:set_temperature()] - {'bed': 90.0, 'extruder': 220.0}
2024-04-20 14:18:00,187 [temperature.py:set_temperature()] - name match extruder
2024-04-20 14:18:00,187 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S220.0
2024-04-20 14:18:00,189 [temperature.py:set_temperature()] - {'bed': 90.0, 'extruder': 220.0}
2024-04-20 14:18:00,189 [temperature.py:set_temperature()] - {'bed': 90.0, 'extruder': 220.0}
2024-04-20 14:18:00,190 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S90.0
2024-04-20 14:18:01,536 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 14:18:01,640 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-20 14:18:09,175 [extrude.py:change_distance()] - ### Distance 25
2024-04-20 14:18:09,863 [extrude.py:change_speed()] - ### Speed 5
2024-04-20 14:18:15,599 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-20 14:18:15,601 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F300'}
2024-04-20 14:18:21,783 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-20 14:18:21,784 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F300'}
2024-04-20 14:58:27,699 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-20 14:58:27,701 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F300'}
2024-04-20 14:58:35,852 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2024-04-20 14:58:39,482 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2024-04-20 14:58:39,483 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2024-04-20 14:58:39,484 [temperature.py:set_temperature()] - name match extruder
2024-04-20 14:58:39,484 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S195.0
2024-04-20 14:58:39,487 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2024-04-20 14:58:39,488 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2024-04-20 14:58:39,489 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S40.0
2024-04-20 14:58:55,914 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 14:58:55,998 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-20 14:58:56,963 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=300'}
2024-04-20 14:59:20,149 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 14:59:20,217 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 14:59:21,587 [screen.py:_load_panel()] - Loading panel: print
2024-04-20 14:59:21,621 [print.py:__init__()] - Thumbsize: 114.20689655172413
2024-04-20 14:59:21,625 [print.py:__init__()] - list
2024-04-20 14:59:21,636 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-04-20 14:59:21,666 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-04-20 14:59:21,755 [print.py:load_files()] - Loaded in 0.080 seconds
2024-04-20 14:59:23,793 [KlippyGtk.py:Dialog()] - Showing dialog Print Voron_First_Layer.gcode (width=800, height=480)
2024-04-20 14:59:24,645 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-20 14:59:24,646 [print.py:confirm_print_response()] - Starting print: Voron_First_Layer.gcode
2024-04-20 14:59:24,646 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-04-20 14:59:24,902 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-20 14:59:24,903 [printer.py:change_state()] - Adding callback for state: printing
2024-04-20 14:59:24,920 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-20 14:59:25,210 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-20 14:59:25,220 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-20 14:59:25,244 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_First_Layer.gcode Size: 70896
2024-04-20 14:59:25,254 [job_status.py:show_file_thumbnail()] - Voron_First_Layer.gcode
2024-04-20 15:14:47,304 [screen.py:_load_panel()] - Loading panel: fine_tune
2024-04-20 15:14:47,395 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-04-20 15:14:48,243 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2024-04-20 15:14:56,489 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-04-20 15:15:00,360 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2024-04-20 15:15:10,190 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 15:15:10,265 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-20 15:15:10,300 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_First_Layer.gcode Size: 70896
2024-04-20 15:15:10,322 [job_status.py:show_file_thumbnail()] - Voron_First_Layer.gcode
2024-04-20 15:15:11,383 [KlippyWebsocket.py:print_pause()] - Sending printer.print.pause
2024-04-20 15:15:12,342 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2024-04-20 15:15:12,343 [printer.py:change_state()] - Adding callback for state: paused
2024-04-20 15:15:12,358 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2024-04-20 15:15:12,489 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffff954898e0>>
2024-04-20 15:15:12,491 [screen.py:show_panel()] - Reinitializing panel
2024-04-20 15:15:12,692 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-20 15:15:12,703 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2024-04-20 15:15:12,724 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_First_Layer.gcode Size: 70896
2024-04-20 15:15:12,733 [job_status.py:show_file_thumbnail()] - Voron_First_Layer.gcode
2024-04-20 15:15:12,743 [screen.py:show_panel()] - Reinitializing panel
2024-04-20 15:15:12,827 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2024-04-20 15:15:18,606 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 15:15:18,646 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-20 15:15:18,665 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_First_Layer.gcode Size: 70896
2024-04-20 15:15:18,674 [job_status.py:show_file_thumbnail()] - Voron_First_Layer.gcode
2024-04-20 15:15:19,324 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-04-20 15:15:20,193 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-20 15:15:20,193 [job_status.py:cancel_confirm()] - Canceling print
2024-04-20 15:15:20,194 [job_status.py:set_state()] - Changing job_status state from 'paused' to 'cancelling'
2024-04-20 15:15:20,202 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-04-20 15:15:20,870 [printer.py:change_state()] - Changing state from 'paused' to 'ready'
2024-04-20 15:15:20,871 [printer.py:change_state()] - Adding callback for state: ready
2024-04-20 15:15:20,889 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'standby'
2024-04-20 15:15:26,510 [job_status.py:close_panel()] - Closing job_status panel
2024-04-20 15:15:26,511 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-20 15:15:26,521 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0xffff954898e0>>
2024-04-20 15:15:26,523 [screen.py:show_panel()] - Reinitializing panel
2024-04-20 15:15:26,652 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-20 15:15:26,667 [main_menu.py:add_device()] - Adding device: extruder
2024-04-20 15:15:26,675 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-20 15:15:26,683 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-20 15:15:26,734 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 15:15:28,170 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-20 15:15:28,171 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-20 15:15:28,179 [screen.py:_load_panel()] - Loading panel: menu
2024-04-20 15:15:28,561 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-20 15:15:28,584 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-20 15:15:28,637 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-20 15:15:28,647 [menu.py:arrangeMenuItems()] - X > more power
2024-04-20 15:15:28,658 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-20 15:15:28,676 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-20 15:15:28,699 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-20 15:15:29,206 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 15:15:29,243 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 15:15:29,771 [screen.py:show_panel()] - Reinitializing panel
2024-04-20 15:15:29,853 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-20 15:15:31,495 [extrude.py:change_distance()] - ### Distance 25
2024-04-20 15:15:31,934 [extrude.py:change_speed()] - ### Speed 5
2024-04-20 15:15:32,320 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-20 15:15:32,322 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F300'}
2024-04-20 15:15:34,254 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-20 15:15:34,256 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F300'}
2024-04-20 15:15:36,398 [extrude.py:change_speed()] - ### Speed 25
2024-04-20 15:15:36,800 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-20 15:15:36,801 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2024-04-20 14:17:26,712 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-20 14:17:26,713 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-3-g31f88d2
2024-04-20 14:17:26,713 [functions.py:log_start()] - Python version: 3.9
2024-04-20 14:17:27,136 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-20 14:17:27,138 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-20 14:17:27,169 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-20 14:17:27,174 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

[graph Printer]
heater_bed = False

=======================
2024-04-20 14:17:27,176 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-20 14:17:27,323 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-20 14:17:27,324 [config.py:install_language()] - Using lang en
2024-04-20 14:17:27,361 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-20 14:17:27,364 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-20 14:17:27,370 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-20 14:17:27,372 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-20 14:17:29,824 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-20 14:17:29,839 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-20 14:17:29,851 [screen.py:initial_connection()] - Default printer: None
2024-04-20 14:17:29,937 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-20 14:17:29,937 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-20 14:17:30,016 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-20 14:17:30,037 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-20 14:17:30,037 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 14:17:30,076 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-20 14:17:30,106 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-20 14:17:30,128 [_logging.py:info()] - Websocket connected
2024-04-20 14:17:30,129 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-20 14:17:30,433 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 14:17:30,453 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-20 14:17:30,472 [printer.py:configure_cameras()] - Cameras: []
2024-04-20 14:17:30,473 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 14:17:30,473 [screen.py:init_klipper()] - Klipper not connected
2024-04-20 14:17:33,765 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 14:17:33,791 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 14:17:33,792 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-20 14:17:33,842 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-20 14:17:36,764 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 14:17:36,782 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-20 14:17:36,798 [printer.py:configure_cameras()] - Cameras: []
2024-04-20 14:17:36,799 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 14:17:36,800 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-20 14:17:38,390 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-20 14:17:38,488 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.005', 'samples_tolerance_retries': '10', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.985'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.013000, 0.017500\n-0.014500, 0.000500, 0.007000\n-0.025500, -0.008000, -0.011500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.985, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.005, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.013, 0.0175], [-0.0145, 0.0005, 0.007], [-0.0255, -0.008, -0.0115]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-20 14:17:38,493 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-20 14:17:38,495 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746
2024-04-20 14:17:38,496 [printer.py:reinit()] - # Extruders: 1
2024-04-20 14:17:38,496 [printer.py:reinit()] - # Temperature devices: 2
2024-04-20 14:17:38,497 [printer.py:reinit()] - # Fans: 4
2024-04-20 14:17:38,497 [printer.py:reinit()] - # Output pins: 0
2024-04-20 14:17:38,498 [printer.py:reinit()] - # Leds: 1
2024-04-20 14:17:38,501 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-20 14:17:38,548 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-20 14:17:38,553 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-20 14:17:38,811 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-20 14:17:38,812 [screen.py:init_klipper()] - Printer initialized
2024-04-20 14:17:38,813 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-20 14:17:38,813 [printer.py:change_state()] - Adding callback for state: startup
2024-04-20 14:17:39,968 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-20 14:17:39,969 [printer.py:change_state()] - Adding callback for state: ready
2024-04-20 14:17:39,970 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-20 14:17:39,976 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-20 14:17:40,101 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-20 14:17:40,116 [main_menu.py:add_device()] - Adding device: extruder
2024-04-20 14:17:40,124 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-20 14:17:40,134 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-20 14:17:40,183 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 14:17:40,185 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 14:17:40,203 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-20 14:17:40,264 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-20 14:17:40,264 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 14:17:40,283 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-20 14:17:45,763 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 14:17:45,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-20 14:17:45,854 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-20 14:17:45,890 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-20 14:17:45,892 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 14:17:45,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-20 14:17:45,971 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-20 14:17:45,993 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-20 21:52:36,408 [screen.py:show_popup_message()] - error: // Unknown command:"ET_IDLE_TIMEOUT"
2024-04-20 22:50:54,563 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-20 22:52:02,717 [screen.py:close_screensaver()] - Closing Screensaver
2024-04-20 22:52:02,766 [screen.py:wake_screen()] - Screen wake up
2024-04-20 22:52:03,982 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-20 22:52:03,983 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-20 22:52:03,990 [screen.py:_load_panel()] - Loading panel: menu
2024-04-20 22:52:04,338 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-20 22:52:04,353 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-20 22:52:04,390 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-20 22:52:04,395 [menu.py:arrangeMenuItems()] - X > more power
2024-04-20 22:52:04,401 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-20 22:52:04,412 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-20 22:52:04,428 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-20 22:52:05,304 [screen.py:_load_panel()] - Loading panel: fan
2024-04-20 22:52:05,316 [fan.py:add_fan()] - Adding fan: fan
2024-04-20 22:52:05,334 [fan.py:add_fan()] - Adding fan: controller_fan controller_fan
2024-04-20 22:52:05,349 [fan.py:add_fan()] - Adding fan: heater_fan hotend_fan
2024-04-20 22:52:05,364 [fan.py:add_fan()] - Adding fan: heater_fan exhaust_fan
2024-04-20 22:52:05,406 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > fan
2024-04-20 22:52:08,543 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M106 S255
2024-04-20 22:52:13,233 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M106 S0
2024-04-20 22:53:25,998 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 22:53:26,063 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-20 22:53:26,079 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-20 22:53:26,119 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-20 22:53:26,125 [menu.py:arrangeMenuItems()] - X > more power
2024-04-20 22:53:26,131 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-20 22:53:26,141 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-20 22:53:26,157 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-20 22:53:27,574 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 22:53:27,615 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 22:53:28,813 [screen.py:_load_panel()] - Loading panel: move
2024-04-20 22:53:28,943 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-20 22:53:29,562 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 22:53:29,599 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 22:53:30,168 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-04-20 22:53:30,223 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2024-04-20 22:53:32,800 [screen.py:show_popup_message()] - echo: PARK_HZ 
2024-04-20 22:53:32,810 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK_HZ'}
2024-04-20 22:53:37,872 [screen.py:show_popup_message()] - echo: PARK_HZ 
2024-04-20 22:53:37,884 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK_HZ'}
2024-04-20 22:53:41,406 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 22:53:41,457 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 22:53:42,443 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-20 22:53:43,210 [screen.py:_load_panel()] - Loading panel: menu
2024-04-20 22:53:43,366 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-20 22:53:43,397 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-20 22:53:44,038 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-20 22:54:49,799 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-20 22:54:55,278 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-20 22:54:55,315 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 22:54:56,748 [KlippyGtk.py:Dialog()] - Showing dialog Temperature (width=800, height=480)
2024-04-20 22:54:56,748 [heatergraph.py:event_cb()] - Entering Fullscreen
2024-04-20 22:54:56,847 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-20 22:54:57,830 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-20 22:54:57,831 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-20 22:54:57,886 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-20 22:54:57,904 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-20 22:54:57,939 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-20 22:54:57,944 [menu.py:arrangeMenuItems()] - X > more power
2024-04-20 22:54:57,950 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-20 22:54:57,961 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-20 22:54:57,977 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-20 22:54:59,210 [screen.py:_load_panel()] - Loading panel: console
2024-04-20 22:54:59,319 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console
2024-04-20 23:01:44,568 [screen.py:show_popup_message()] - error: Retries aborting: Probed points range is increasing. Possibly Z motor numbering is wrong
2024-04-20 23:01:52,166 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 23:01:52,221 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-20 23:01:52,237 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-20 23:01:52,272 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-20 23:01:52,278 [menu.py:arrangeMenuItems()] - X > more power
2024-04-20 23:01:52,283 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-20 23:01:52,294 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-20 23:01:52,310 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-20 23:01:52,718 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > gcode_macros
2024-04-20 23:01:54,448 [screen.py:show_popup_message()] - echo: PARK_HZ 
2024-04-20 23:01:54,458 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK_HZ'}
2024-04-20 23:03:45,910 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 23:03:46,040 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-20 23:03:46,056 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-20 23:03:46,091 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-20 23:03:46,096 [menu.py:arrangeMenuItems()] - X > more power
2024-04-20 23:03:46,102 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-20 23:03:46,114 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-20 23:03:46,131 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-20 23:03:46,217 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 23:03:46,253 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 23:03:47,457 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-20 23:03:48,092 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-20 23:03:48,140 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-20 23:03:48,648 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-20 23:04:08,564 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu > gcode_macros
2024-04-20 23:04:10,438 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-20 23:04:10,517 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 23:04:11,742 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-20 23:04:11,742 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-20 23:04:11,796 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-20 23:04:11,816 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-20 23:04:11,864 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-20 23:04:11,871 [menu.py:arrangeMenuItems()] - X > more power
2024-04-20 23:04:11,877 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-20 23:04:11,888 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-20 23:04:11,906 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-20 23:04:13,259 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console
2024-04-20 23:10:25,971 [screen.py:show_popup_message()] - error: Probe samples exceed samples_tolerance
2024-04-20 23:10:44,821 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 23:10:44,898 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-20 23:10:44,931 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-20 23:10:44,979 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-20 23:10:44,986 [menu.py:arrangeMenuItems()] - X > more power
2024-04-20 23:10:44,993 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-20 23:10:45,003 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-20 23:10:45,018 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-20 23:10:46,149 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 23:10:46,192 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 23:10:47,009 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-20 23:10:47,662 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-20 23:10:47,693 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-20 23:10:48,413 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-20 23:10:53,053 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-20 23:10:53,092 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 23:10:54,502 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-20 23:10:54,503 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-20 23:10:54,586 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-20 23:10:54,609 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-20 23:10:54,647 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-20 23:10:54,654 [menu.py:arrangeMenuItems()] - X > more power
2024-04-20 23:10:54,660 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-20 23:10:54,671 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-20 23:10:54,686 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-20 23:10:57,505 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console
2024-04-20 23:17:18,023 [screen.py:show_popup_message()] - error: Probe samples exceed samples_tolerance
2024-04-20 23:17:28,789 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console > gcode_macros
2024-04-20 23:17:30,727 [screen.py:show_popup_message()] - echo: PARK_HZ 
2024-04-20 23:17:30,737 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK_HZ'}
2024-04-20 23:19:13,608 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 23:19:13,703 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console
2024-04-20 23:19:14,449 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 23:19:14,488 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-20 23:19:14,504 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-20 23:19:14,539 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-20 23:19:14,544 [menu.py:arrangeMenuItems()] - X > more power
2024-04-20 23:19:14,551 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-20 23:19:14,563 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-20 23:19:14,578 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-20 23:19:14,892 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 23:19:14,929 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 23:19:15,972 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-20 23:19:17,754 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-20 23:19:17,814 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-20 23:19:18,389 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-20 23:19:41,709 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 23:19:41,746 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-20 23:19:43,005 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > gcode_macros
2024-04-20 23:19:44,532 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-20 23:19:44,584 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 23:19:45,396 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-20 23:19:45,397 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-20 23:19:45,443 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-20 23:19:45,459 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-20 23:19:45,494 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-20 23:19:45,499 [menu.py:arrangeMenuItems()] - X > more power
2024-04-20 23:19:45,505 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-20 23:19:45,516 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-20 23:19:45,531 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-20 23:19:47,922 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console
2024-04-20 23:22:27,036 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 23:22:27,111 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-20 23:22:27,129 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-20 23:22:27,164 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-20 23:22:27,169 [menu.py:arrangeMenuItems()] - X > more power
2024-04-20 23:22:27,175 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-20 23:22:27,186 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-20 23:22:27,202 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-20 23:22:28,804 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 23:22:28,841 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 23:22:30,171 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2024-04-20 23:22:31,908 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-20 23:22:31,960 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 23:22:33,673 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-20 23:22:34,716 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-20 23:22:34,783 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 23:22:35,366 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2024-04-20 23:22:38,199 [screen.py:show_popup_message()] - echo: PARK 
2024-04-20 23:22:38,210 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK'}
2024-04-20 23:22:41,700 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-20 23:22:41,762 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 23:22:42,516 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-20 23:22:42,517 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-20 23:22:42,561 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-20 23:22:42,577 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-20 23:22:42,612 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-20 23:22:42,617 [menu.py:arrangeMenuItems()] - X > more power
2024-04-20 23:22:42,622 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-20 23:22:42,632 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-20 23:22:42,652 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-20 23:22:44,492 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console
2024-04-20 23:22:47,746 [keyboard.py:__init__()] - Keyboard en
2024-04-20 23:22:48,055 [screen.py:update_size()] - Size changed: 800x480
2024-04-20 23:23:19,177 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: probe_accuracy samples=500
2024-04-20 23:17:24,523 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-20 23:17:24,524 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-3-g31f88d2
2024-04-20 23:17:24,524 [functions.py:log_start()] - Python version: 3.9
2024-04-20 23:17:24,810 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-20 23:17:24,811 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-20 23:17:24,833 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-20 23:17:24,837 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

[graph Printer]
heater_bed = False

=======================
2024-04-20 23:17:24,838 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-20 23:17:24,975 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-20 23:17:24,976 [config.py:install_language()] - Using lang en
2024-04-20 23:17:25,012 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-20 23:17:25,015 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-20 23:17:25,020 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-20 23:17:25,023 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-20 23:17:27,321 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-20 23:17:27,338 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-20 23:17:27,357 [screen.py:initial_connection()] - Default printer: None
2024-04-20 23:17:27,453 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-20 23:17:27,454 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-20 23:17:27,542 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-20 23:17:27,565 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-20 23:17:27,566 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 23:17:27,610 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-20 23:17:27,638 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-20 23:17:27,674 [_logging.py:info()] - Websocket connected
2024-04-20 23:17:27,674 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-20 23:17:27,933 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 23:17:27,952 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-20 23:17:27,973 [printer.py:configure_cameras()] - Cameras: []
2024-04-20 23:17:27,974 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 23:17:27,975 [screen.py:init_klipper()] - Klipper not connected
2024-04-20 23:17:31,143 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 23:17:31,169 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 23:17:31,170 [screen.py:init_klipper()] - Klipper not connected
2024-04-20 23:17:34,145 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 23:17:34,171 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 23:17:34,171 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-20 23:17:34,223 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-20 23:17:37,143 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 23:17:37,161 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-20 23:17:37,178 [printer.py:configure_cameras()] - Cameras: []
2024-04-20 23:17:37,179 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 23:17:37,179 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-20 23:17:38,081 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-20 23:17:38,166 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.005', 'samples_tolerance_retries': '10', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.985'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.013000, 0.017500\n-0.014500, 0.000500, 0.007000\n-0.025500, -0.008000, -0.011500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.985, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.005, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.013, 0.0175], [-0.0145, 0.0005, 0.007], [-0.0255, -0.008, -0.0115]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-20 23:17:38,171 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-20 23:17:38,173 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746
2024-04-20 23:17:38,173 [printer.py:reinit()] - # Extruders: 1
2024-04-20 23:17:38,174 [printer.py:reinit()] - # Temperature devices: 2
2024-04-20 23:17:38,174 [printer.py:reinit()] - # Fans: 4
2024-04-20 23:17:38,175 [printer.py:reinit()] - # Output pins: 0
2024-04-20 23:17:38,175 [printer.py:reinit()] - # Leds: 1
2024-04-20 23:17:38,178 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-20 23:17:38,219 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-20 23:17:38,226 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-20 23:17:38,451 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-20 23:17:38,452 [screen.py:init_klipper()] - Printer initialized
2024-04-20 23:17:38,453 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-20 23:17:38,453 [printer.py:change_state()] - Adding callback for state: startup
2024-04-20 23:17:39,646 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-20 23:17:39,647 [printer.py:change_state()] - Adding callback for state: ready
2024-04-20 23:17:39,648 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-20 23:17:39,654 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-20 23:17:39,783 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-20 23:17:39,797 [main_menu.py:add_device()] - Adding device: extruder
2024-04-20 23:17:39,806 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-20 23:17:39,814 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-20 23:17:39,875 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 23:17:39,878 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 23:17:39,932 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-20 23:17:40,016 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-20 23:17:40,016 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 23:17:40,039 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-20 23:17:41,467 [screen.py:_load_panel()] - Loading panel: move
2024-04-20 23:17:41,581 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-20 23:17:42,284 [screen.py:_load_panel()] - Loading panel: menu
2024-04-20 23:17:42,444 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-20 23:17:42,473 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-20 23:17:42,967 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-20 23:17:45,142 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 23:17:45,181 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-20 23:17:45,183 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-20 23:17:45,203 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-20 23:17:45,205 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 23:17:45,240 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-20 23:17:45,241 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-20 23:17:45,262 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-20 23:18:15,239 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-20 23:18:16,215 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-20 23:18:16,288 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 23:18:17,297 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-20 23:18:17,298 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-20 23:18:17,307 [screen.py:_load_panel()] - Loading panel: menu
2024-04-20 23:18:17,683 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-20 23:18:17,698 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-20 23:18:17,739 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-21 07:22:17,710 [menu.py:arrangeMenuItems()] - X > more power
2024-04-21 07:22:17,727 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-21 07:22:17,744 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-21 07:22:17,762 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-21 07:22:19,180 [screen.py:_load_panel()] - Loading panel: console
2024-04-21 07:22:19,287 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console
2024-04-21 07:27:44,483 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-21 07:27:44,560 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-21 07:27:44,595 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-21 07:27:44,661 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-21 07:27:44,672 [menu.py:arrangeMenuItems()] - X > more power
2024-04-21 07:27:44,687 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-21 07:27:44,697 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-21 07:27:44,713 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-21 07:27:45,739 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-21 07:27:45,777 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-21 07:27:47,011 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-21 07:27:51,799 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-04-21 07:27:51,906 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > gcode_macros
2024-04-21 07:27:53,566 [screen.py:show_popup_message()] - echo: PARK 
2024-04-21 07:27:53,580 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK'}
2024-04-21 07:27:56,328 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-21 07:27:56,425 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-21 07:27:57,459 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-21 07:27:57,459 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-21 07:27:57,503 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-21 07:27:57,519 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-21 07:27:57,555 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-21 07:27:57,560 [menu.py:arrangeMenuItems()] - X > more power
2024-04-21 07:27:57,568 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-21 07:27:57,580 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-21 07:27:57,596 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-21 07:27:58,884 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console
2024-04-21 07:28:02,531 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-21 07:28:02,570 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-21 07:28:02,587 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-21 07:28:02,624 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-21 07:28:02,629 [menu.py:arrangeMenuItems()] - X > more power
2024-04-21 07:28:02,635 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-21 07:28:02,646 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-21 07:28:02,661 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-21 07:59:13,550 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-04-21 07:59:13,550 [printer.py:change_state()] - Adding callback for state: shutdown
2024-04-21 07:59:13,562 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-21 07:59:13,566 [screen.py:show_panel()] - Reinitializing panel
2024-04-21 07:59:13,631 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-20 23:17:23,782 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-20 23:17:23,783 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-3-g31f88d2
2024-04-20 23:17:23,783 [functions.py:log_start()] - Python version: 3.9
2024-04-20 23:17:24,082 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-20 23:17:24,083 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-20 23:17:24,144 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-20 23:17:24,152 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

[graph Printer]
heater_bed = False

=======================
2024-04-20 23:17:24,154 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-20 23:17:24,328 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-20 23:17:24,328 [config.py:install_language()] - Using lang en
2024-04-20 23:17:24,376 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-20 23:17:24,381 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-20 23:17:24,390 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-20 23:17:24,394 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-20 23:17:25,721 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-20 23:17:25,747 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-20 23:17:25,765 [screen.py:initial_connection()] - Default printer: None
2024-04-20 23:17:25,882 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-20 23:17:25,883 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-20 23:17:25,978 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-20 23:17:26,007 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-20 23:17:26,008 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 23:17:26,051 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-20 23:17:26,074 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-20 23:17:26,097 [_logging.py:info()] - Websocket connected
2024-04-20 23:17:26,098 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-20 23:17:26,423 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 23:17:26,444 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-20 23:17:26,464 [printer.py:configure_cameras()] - Cameras: []
2024-04-20 23:17:26,465 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 23:17:26,466 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-20 23:17:26,490 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-20 23:17:26,649 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.005', 'samples_tolerance_retries': '10', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.985'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.013000, 0.017500\n-0.014500, 0.000500, 0.007000\n-0.025500, -0.008000, -0.011500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.985, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.005, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.013, 0.0175], [-0.0145, 0.0005, 0.007], [-0.0255, -0.008, -0.0115]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-20 23:17:26,654 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-20 23:17:26,656 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746
2024-04-20 23:17:26,656 [printer.py:reinit()] - # Extruders: 1
2024-04-20 23:17:26,657 [printer.py:reinit()] - # Temperature devices: 2
2024-04-20 23:17:26,657 [printer.py:reinit()] - # Fans: 4
2024-04-20 23:17:26,658 [printer.py:reinit()] - # Output pins: 0
2024-04-20 23:17:26,658 [printer.py:reinit()] - # Leds: 1
2024-04-20 23:17:26,658 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-20 23:17:26,691 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-20 23:17:26,694 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-20 23:17:26,994 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-20 23:17:26,995 [screen.py:init_klipper()] - Printer initialized
2024-04-20 23:17:26,995 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-20 23:17:26,996 [printer.py:change_state()] - Adding callback for state: ready
2024-04-20 23:17:27,069 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-20 23:17:27,086 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-20 23:17:27,239 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-20 23:17:27,256 [main_menu.py:add_device()] - Adding device: extruder
2024-04-20 23:17:27,265 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-20 23:17:27,275 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-20 23:17:27,332 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 23:17:27,334 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 23:17:27,350 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-20 23:17:27,409 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-20 23:17:27,410 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 23:17:27,444 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-20 23:17:27,445 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-20 23:17:27,466 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-20 23:17:32,794 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 23:17:32,852 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-20 23:17:32,856 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-20 23:17:32,884 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-20 23:17:42,238 [screen.py:_load_panel()] - Loading panel: move
2024-04-20 23:17:42,412 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-20 23:17:43,033 [screen.py:_load_panel()] - Loading panel: menu
2024-04-20 23:17:43,193 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-20 23:17:43,229 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-20 23:17:43,662 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-21 15:53:16,293 [screen.py:show_popup_message()] - error: Probe samples exceed samples_tolerance
2024-04-20 23:17:24,710 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-20 23:17:24,711 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-3-g31f88d2
2024-04-20 23:17:24,712 [functions.py:log_start()] - Python version: 3.9
2024-04-20 23:17:25,023 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-20 23:17:25,025 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-20 23:17:25,060 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-20 23:17:25,069 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

[graph Printer]
heater_bed = False

=======================
2024-04-20 23:17:25,071 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-20 23:17:25,258 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-20 23:17:25,259 [config.py:install_language()] - Using lang en
2024-04-20 23:17:25,304 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-20 23:17:25,310 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-20 23:17:25,316 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-20 23:17:25,318 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-20 23:17:26,614 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-20 23:17:26,633 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-20 23:17:26,646 [screen.py:initial_connection()] - Default printer: None
2024-04-20 23:17:26,734 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-20 23:17:26,735 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-20 23:17:26,817 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-20 23:17:26,840 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-20 23:17:26,841 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 23:17:26,878 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-20 23:17:26,901 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-20 23:17:26,924 [_logging.py:info()] - Websocket connected
2024-04-20 23:17:26,926 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-20 23:17:27,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 23:17:27,292 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-20 23:17:27,315 [printer.py:configure_cameras()] - Cameras: []
2024-04-20 23:17:27,316 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 23:17:27,317 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-20 23:17:27,355 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-20 23:17:30,166 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 23:17:30,190 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-20 23:17:30,213 [printer.py:configure_cameras()] - Cameras: []
2024-04-20 23:17:30,214 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 23:17:30,215 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-20 23:17:30,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-20 23:17:30,452 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.005', 'samples_tolerance_retries': '10', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.985'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.013000, 0.017500\n-0.014500, 0.000500, 0.007000\n-0.025500, -0.008000, -0.011500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.985, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.005, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.013, 0.0175], [-0.0145, 0.0005, 0.007], [-0.0255, -0.008, -0.0115]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-20 23:17:30,458 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-20 23:17:30,461 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746
2024-04-20 23:17:30,461 [printer.py:reinit()] - # Extruders: 1
2024-04-20 23:17:30,461 [printer.py:reinit()] - # Temperature devices: 2
2024-04-20 23:17:30,462 [printer.py:reinit()] - # Fans: 4
2024-04-20 23:17:30,463 [printer.py:reinit()] - # Output pins: 0
2024-04-20 23:17:30,465 [printer.py:reinit()] - # Leds: 1
2024-04-20 23:17:30,466 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-20 23:17:30,501 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-20 23:17:30,506 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-20 23:17:30,816 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-20 23:17:30,817 [screen.py:init_klipper()] - Printer initialized
2024-04-20 23:17:30,818 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-20 23:17:30,818 [printer.py:change_state()] - Adding callback for state: startup
2024-04-20 23:17:32,175 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-20 23:17:32,176 [printer.py:change_state()] - Adding callback for state: ready
2024-04-20 23:17:32,177 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-20 23:17:32,184 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-20 23:17:32,625 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-20 23:17:32,644 [main_menu.py:add_device()] - Adding device: extruder
2024-04-20 23:17:32,653 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-20 23:17:32,664 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-20 23:17:32,736 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 23:17:32,740 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 23:17:32,762 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-20 23:17:32,823 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-20 23:17:32,824 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 23:17:32,841 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-20 23:17:38,164 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 23:17:38,205 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-20 23:17:38,210 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-20 23:17:38,235 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-20 23:17:38,237 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 23:17:38,276 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-20 23:17:38,279 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-20 23:17:38,304 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-20 23:17:23,944 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-20 23:17:23,945 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-3-g31f88d2
2024-04-20 23:17:23,945 [functions.py:log_start()] - Python version: 3.9
2024-04-20 23:17:24,312 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-20 23:17:24,313 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-04-20 23:17:24,341 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-20 23:17:24,346 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-darker
show_scroll_steppers = True
print_sort_dir = date_desc
print_view = list

[graph Printer]
heater_bed = False

=======================
2024-04-20 23:17:24,350 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-20 23:17:24,515 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-04-20 23:17:24,516 [config.py:install_language()] - Using lang en
2024-04-20 23:17:24,552 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-20 23:17:24,556 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-20 23:17:24,563 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-20 23:17:24,566 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-20 23:17:25,834 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-20 23:17:25,855 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-20 23:17:25,870 [screen.py:initial_connection()] - Default printer: None
2024-04-20 23:17:25,960 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-20 23:17:25,961 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-20 23:17:26,044 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-20 23:17:26,069 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-20 23:17:26,069 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 23:17:26,106 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-20 23:17:26,129 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-20 23:17:26,153 [_logging.py:info()] - Websocket connected
2024-04-20 23:17:26,154 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-20 23:17:26,514 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 23:17:26,537 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-20 23:17:26,560 [printer.py:configure_cameras()] - Cameras: []
2024-04-20 23:17:26,561 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 23:17:26,562 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-20 23:17:26,607 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-04-20 23:17:29,617 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-20 23:17:29,635 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-20 23:17:29,652 [printer.py:configure_cameras()] - Cameras: []
2024-04-20 23:17:29,653 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-20 23:17:29,654 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-20 23:17:33,207 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-20 23:17:33,288 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50.'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu EBBCan': {'canbus_uuid': '50f013556523'}, 'temperature_sensor EBB_NTC': {'sensor_type': 'Generic 3950', 'sensor_pin': 'EBBCan: PA2'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'probe': {'pin': 'EBBCan: PB5', 'x_offset': '0', 'y_offset': '0', 'speed': '5', 'samples': '5', 'samples_result': 'average', 'sample_retract_dist': '1.0', 'samples_tolerance': '0.005', 'samples_tolerance_retries': '10', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.985'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA0', 'heater': 'extruder', 'heater_temp': '50.0'}, 'gcode_macro _Sensorless_Homing_Variables': {'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175', 'gcode': ''}, 'gcode_macro _HOME_X': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'gcode_macro _HOME_Y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82'}, 'gcode_macro PARK': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK'}, 'gcode_macro PARK_HZ': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ'}, 'gcode_macro STANDBY': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro TEST_PROBE_ACCURACY': {'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'", 'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1'}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}'}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\''}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': 'PG6', 'driver_sgthrs': '65'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '20', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0', 'diag_pin': '^PG9', 'driver_sgthrs': '65'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': 'PG3', 'enable_pin': '!PG5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': 'PF10', 'enable_pin': '!PG2', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z3': {'step_pin': 'PC13', 'dir_pin': '!PF0', 'enable_pin': '!PF1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBBCan: PB13', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'min_extrude_temp': '170', 'max_extrude_only_distance': '500', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'sensor_type': 'EPCOS 100K B57560G104F', 'max_extrude_cross_section': '5', 'control': 'pid', 'pid_kp': '13.645', 'pid_ki': '0.395', 'pid_kd': '117.699'}, 'heater_bed': {'heater_pin': 'PA3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PF3', 'max_power': '0.6', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '38.725', 'pid_ki': '1.241', 'pid_kd': '302.054'}, 'firmware_retraction': {'retract_length': '1', 'retract_speed': '45', 'unretract_extra_length': '0', 'unretract_speed': '45'}, 'exclude_object': {}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,300\n300,300\n300,25', 'speed': '150', 'horizontal_move_z': '10', 'retries': '20', 'retry_tolerance': '0.005', 'max_adjust': '10'}, 'idle_timeout': {'gcode': '', 'timeout': '3600'}, 'gcode_macro G32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.013000, 0.017500\n-0.014500, 0.000500, 0.007000\n-0.025500, -0.008000, -0.011500', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '160.0', 'max_x': '190.0', 'min_y': '160.0', 'max_y': '190.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h723xx_14002C001751313434373135-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '50f013556523', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\nCLEAR_PAUSE\nSDCARD_RESET_FILE\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'temperature_sensor ebb_ntc': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA2', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'probe': {'z_offset': -0.985, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB5', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 1.0, 'samples_result': 'average', 'samples_tolerance': 0.005, 'samples_tolerance_retries': 10}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 13.645, 'pid_ki': 0.395, 'pid_kd': 117.699, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA1'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA0', 'fan_speed': 1.0}, 'gcode_macro _sensorless_homing_variables': {'gcode': '', 'description': 'Variables for sensorless homing X and Y', 'variable_homing_current': '0.0', 'variable_clear_time': '1', 'variable_x_backoff_distance': '5', 'variable_y_backoff_distance': '5', 'variable_z_hop_distance': '10', 'variable_first_homed_axis': "'X'", 'variable_safe_z_enable': 'True', 'variable_safe_x': '175', 'variable_safe_y': '175'}, 'gcode_macro _home_x': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.x_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_x\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'y\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'x\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 X\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 X-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 X{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}\n{% else %}\nG0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'y\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': '\n\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set homing_current = sensorless_variables.homing_current | float %}\n{% set backoff_distance = sensorless_variables.y_backoff_distance | float %}\n{% set clear_time = (sensorless_variables.clear_time * 1000) | float %}\n\n{% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}\n{% set homing_speed = (printer.configfile.settings[\'stepper_y\'].homing_speed * 60) | float %}\n\n{% if homing_current != 0.0 %}\n{% if \'x\' not in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% elif \'y\' in printer.toolhead.homed_axes %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}\n\nG28 Y\n\n{% if backoff_distance > 0 %}\n{% if positive_dir == True %}\nG91\nG0 Y-{backoff_distance} F{homing_speed}\nG90\n{% else %}\nG91\nG0 Y{backoff_distance} F{homing_speed}\nG90\n{% endif %}\n{% endif %}\n\n{% if positive_dir == True %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}\n{% else %}\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}\n{% endif %}\n\n{% if homing_current != 0.0 %}\n\n{% if \'tmc2209 stepper_x\' in printer %}\n{% set driver_x = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_x\' in printer %}\n{% set driver_x = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_x\' in printer %}\n{% set driver_x = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_x\' in printer %}\n{% set driver_x = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_x\' in printer %}\n{% set driver_x = \'tmc2240\' %}\n{% endif %}\n\n{% if \'tmc2209 stepper_y\' in printer %}\n{% set driver_y = \'tmc2209\' %}\n{% elif \'tmc5160 stepper_y\' in printer %}\n{% set driver_y = \'tmc5160\' %}\n{% elif \'tmc2130 stepper_y\' in printer %}\n{% set driver_y = \'tmc2130\' %}\n{% elif \'tmc2660 stepper_y\' in printer %}\n{% set driver_y = \'tmc2660\' %}\n{% elif \'tmc2240 stepper_y\' in printer %}\n{% set driver_y = \'tmc2240\' %}\n{% endif %}\n\n{% if \'x\' in printer.toolhead.homed_axes %}\n{% set default_current_x = printer.configfile.settings[driver_x +\' stepper_x\'].run_current %}\n{% set default_current_y = printer.configfile.settings[driver_y +\' stepper_y\'].run_current %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}\n{% endif %}\n{% endif %}\n\nG4 P{clear_time}', 'description': 'G-Code macro'}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': '\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n{% set z_hop_speed = (printer.configfile.settings[\'stepper_z\'].homing_speed * 60) | float %}\n{% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}\n{% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}\n{% set z_hop_distance = sensorless_variables.z_hop_distance | float %}\n{% set first_homed_axis = sensorless_variables.first_homed_axis | string %}\n{% set safe_x = sensorless_variables.safe_x | float %}\n{% set safe_y = sensorless_variables.safe_y | float %}\n{% set safe_z = sensorless_variables.safe_z_enable | abs %}\n\n{% if printer.configfile.settings.beacon is defined %}\n{% set probe_name = printer.configfile.settings.beacon %}\n{% elif printer.configfile.settings.probe is defined %}\n{% set probe_name = printer.configfile.settings.probe %}\n{% elif printer.configfile.settings.dockable_probe is defined %}\n{% set probe_name = printer.configfile.settings.dockable_probe %}\n{% elif printer.configfile.settings.bltouch is defined %}\n{% set probe_name = printer.configfile.settings.bltouch %}\n{% endif %}\n\n{% if \'probe\' in printer.configfile.settings.stepper_z.endstop_pin %}\n{% set probe_x_offset = probe_name.x_offset | float %}\n{% set probe_y_offset = probe_name.y_offset | float %}\n{% else %}\n{% set probe_x_offset = 0 | float %}\n{% set probe_y_offset = 0 | float %}\n{% endif %}\n\n{% if safe_x == -128 %}\n{% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}\n{% endif %}\n\n{% if probe_x_offset < 0 %}\n{% set safe_x = safe_x + probe_x_offset %}\n{% elif probe_x_offset > 0 %}\n{% set safe_x = safe_x - probe_x_offset %}\n{% endif %}\n\n{% if safe_y == -128 %}\n{% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}\n{% endif %}\n\n{% if probe_y_offset < 0 %}\n{% set safe_y = safe_y + probe_y_offset %}\n{% elif probe_y_offset > 0 %}\n{% set safe_y = safe_y - probe_y_offset %}\n{% endif %}\n\n{% if z_hop_distance > 0 %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes %}\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'X\' %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% endif %}\n\n{% if first_homed_axis == \'Y\' %}\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n{% endif %}\n\n{% if safe_z == True and (home_all or \'Z\' in params) %}\nG0 X{safe_x} Y{safe_y} F{travel_speed}\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG28 Z\nG0 Z{z_hop_distance} F{z_hop_speed}\n{% endif %}'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.013, 0.0175], [-0.0145, 0.0005, 0.007], [-0.0255, -0.008, -0.0115]], 'min_x': 160.0, 'max_x': 190.0, 'min_y': 160.0, 'max_y': 190.0, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG92 E0.0\nG1 -E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG92 E0.0\nG1 E120 F350\nG92 E0.0\nM82', 'description': 'G-Code macro'}, 'gcode_macro park': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK\nG90\nG0 X175 Y175 Z20 F6000\nRESTORE_GCODE_STATE NAME=PARK', 'description': 'G-Code macro'}, 'gcode_macro park_hz': {'gcode': '\nSAVE_GCODE_STATE NAME=PARK_HZ\nG90\nG0 X175 Y110 Z221 F6000\nRESTORE_GCODE_STATE NAME=PARK_HZ', 'description': 'G-Code macro'}, 'gcode_macro standby': {'gcode': '\nTURN_OFF_HEATERS\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '25', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro test_probe_accuracy': {'gcode': '\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }\n\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"none"\'\n\n\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1', 'description': 'G-Code macro', 'variable_start_idle_minutes': '0', 'variable_bed_temp': '0', 'variable_extruder_temp': '0', 'variable_bed_soak_minutes': '0', 'variable_extruder_soak_minutes': '0', 'variable_dwell_seconds': '0', 'variable_dwell_lift_z': '0', 'variable_end_idle_minutes': '0', 'variable_state': "'start'", 'variable_next_state': "'none'"}, 'delayed_gcode probe_accuracy_loop': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\n\n{% if tmacro.state == \'start\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: START\') }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"start_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"start_idle_done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'start_idle_done\' %}\n{% if tmacro.bed_temp >= 0 %}\nM140 S{ tmacro.bed_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATING TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'bed_heating\' %}\n{% if printer.heater_bed.temperature >= tmacro.bed_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED HEATED TO %s\' % tmacro.bed_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"bed_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"bed_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'bed_soaked\' %}\n{% if tmacro.bed_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: BED SOAKED\') }\n{% endif %}\n{% if tmacro.extruder_temp >= 0 %}\nM104 S{ tmacro.extruder_temp }\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_heating"\'\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaked"\'\n{% endif %}\n\n{% elif tmacro.state == \'extruder_heating\' %}\n{% if printer.extruder.temperature >= tmacro.extruder_temp %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s\' % tmacro.extruder_temp) }\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"extruder_soaking"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"extruder_soaked"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }\n{% endif %}\n\n{% elif tmacro.state == \'extruder_soaked\' %}\n{% if tmacro.extruder_temp >= 0 %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: EXTRUDER SOAKED\') }\n{% endif %}\nTURN_OFF_HEATERS\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"end_idle"\'\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE=\'"done"\'\nUPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }\n\n{% elif tmacro.state == \'done\' %}\n{ action_respond_info(\'TEST_PROBE_ACCURACY: DONE\') }\nG90\nG1 Z30\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0\n\n{% endif %}\n\n{% if tmacro.state != \'done\' %}\nM105\nPROBE_ACCURACY\n{% if tmacro.dwell_lift_z >= 0 %}\nG1 Z{ tmacro.dwell_lift_z }\n{% endif %}\nM400\nUPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }\n{% endif %}', 'initial_duration': 0.0}, 'delayed_gcode probe_accuracy_set_next_state': {'gcode': '\n{% set tmacro = printer[\'gcode_macro TEST_PROBE_ACCURACY\'] %}\nSET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE=\'"{ tmacro.next_state }"\'', 'initial_duration': 0.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'diag_pin': 'PG6', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'diag_pin': '^PG9', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 65}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 20.0, 'second_homing_speed': 10.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PF11', 'dir_pin': 'PG3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PA2'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PF9', 'dir_pin': 'PF10', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PG2'}, 'tmc2209 stepper_z3': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 16, 'step_pin': 'PC13', 'dir_pin': '!PF0', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.6, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 38.725, 'pid_ki': 1.241, 'pid_kd': 302.054, 'heater_pin': 'PA3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'firmware_retraction': {'retract_length': 1.0, 'retract_speed': 45.0, 'unretract_extra_length': 0.0, 'unretract_speed': 45.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'quad_gantry_level': {'retries': 20, 'retry_tolerance': 0.005, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': [[50.0, 25.0], [50.0, 300.0], [300.0, 300.0], [300.0, 25.0]], 'speed': 150.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'idle_timeout': {'timeout': 3600.0, 'gcode': ''}, 'gcode_macro g32': {'gcode': '\nSAVE_GCODE_STATE NAME=STATE_G32\nG90\nG28\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\nG28\nPARK\nRESTORE_GCODE_STATE NAME=STATE_G32', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED_TEMP|default("60")|int %}\n{% set target_extruder = params.HOTEND_TEMP|default("200")|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG32\n{% endif %}\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if target_bed|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nquad_gantry_level\nG28 Z\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nBED_MESH_CALIBRATE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-5.0 F1800\n\nSTANDBY\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\n\n\n\n\n\n\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-20 23:17:33,293 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-20 23:17:33,294 [printer.py:reinit()] - Klipper version: v0.12.0-159-g2425a746
2024-04-20 23:17:33,295 [printer.py:reinit()] - # Extruders: 1
2024-04-20 23:17:33,295 [printer.py:reinit()] - # Temperature devices: 2
2024-04-20 23:17:33,296 [printer.py:reinit()] - # Fans: 4
2024-04-20 23:17:33,296 [printer.py:reinit()] - # Output pins: 0
2024-04-20 23:17:33,296 [printer.py:reinit()] - # Leds: 1
2024-04-20 23:17:33,296 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-20 23:17:33,336 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-20 23:17:33,340 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor EBB_NTC&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&neopixel sb_leds
2024-04-20 23:17:33,649 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-04-20 23:17:33,649 [screen.py:init_klipper()] - Printer initialized
2024-04-20 23:17:33,650 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-20 23:17:33,650 [printer.py:change_state()] - Adding callback for state: startup
2024-04-20 23:17:34,777 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-20 23:17:34,778 [printer.py:change_state()] - Adding callback for state: ready
2024-04-20 23:17:34,779 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-20 23:17:34,784 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-20 23:17:35,174 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-20 23:17:35,189 [main_menu.py:add_device()] - Adding device: extruder
2024-04-20 23:17:35,197 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-20 23:17:35,206 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-20 23:17:35,255 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-20 23:17:35,257 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 23:17:35,282 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-20 23:17:35,345 [heatergraph.py:draw_graph()] - Tempstore not initialized!
2024-04-20 23:17:35,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 23:17:35,366 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-04-20 23:17:36,404 [screen.py:_load_panel()] - Loading panel: move
2024-04-20 23:17:36,671 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-20 23:17:37,500 [screen.py:_load_panel()] - Loading panel: menu
2024-04-20 23:17:37,752 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-20 23:17:37,786 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-20 23:17:38,376 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-20 23:17:40,622 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 23:17:40,698 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-20 23:17:40,700 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-20 23:17:40,736 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-20 23:17:40,738 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-20 23:17:40,796 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor EBB_NTC', 'heater_bed', 'extruder']
2024-04-20 23:17:40,796 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-20 23:17:40,819 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-22 12:42:56,485 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-22 12:42:57,306 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-22 12:42:57,341 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 12:42:58,433 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-22 12:42:58,433 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-22 12:42:58,442 [screen.py:_load_panel()] - Loading panel: menu
2024-04-22 12:42:58,923 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-22 12:42:58,938 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-22 12:42:58,976 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-22 12:42:58,982 [menu.py:arrangeMenuItems()] - X > more power
2024-04-22 12:42:58,990 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-22 12:42:59,002 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-22 12:42:59,019 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-22 12:43:00,087 [screen.py:_load_panel()] - Loading panel: console
2024-04-22 12:43:00,197 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console
2024-04-22 12:45:36,093 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 12:45:36,172 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-22 12:45:36,206 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-22 12:45:36,279 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-22 12:45:36,292 [menu.py:arrangeMenuItems()] - X > more power
2024-04-22 12:45:36,307 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-22 12:45:36,324 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-22 12:45:36,340 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-22 12:45:39,004 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-04-22 12:45:39,104 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > gcode_macros
2024-04-22 12:45:41,612 [screen.py:show_popup_message()] - echo: PARK_HZ 
2024-04-22 12:45:41,627 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK_HZ'}
2024-04-22 12:50:17,613 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 12:50:17,666 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-22 12:50:17,683 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-22 12:50:17,721 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-22 12:50:17,727 [menu.py:arrangeMenuItems()] - X > more power
2024-04-22 12:50:17,734 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-22 12:50:17,744 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-22 12:50:17,760 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-22 12:50:18,736 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 12:50:18,777 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 12:50:20,096 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-22 12:50:20,909 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-22 12:50:20,941 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-22 12:50:21,546 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-22 12:51:03,283 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2024-04-22 13:03:40,986 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:03:41,025 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-22 13:03:42,173 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-04-22 13:03:42,919 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-22 13:03:42,920 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M18'}
2024-04-22 13:04:07,493 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:04:07,562 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 13:04:08,729 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-22 13:04:09,837 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:04:09,901 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 13:04:10,829 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2024-04-22 13:04:12,507 [screen.py:show_popup_message()] - echo: PARK_HZ 
2024-04-22 13:04:12,518 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK_HZ'}
2024-04-22 13:04:16,489 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:04:16,540 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 13:04:17,385 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-22 13:04:17,963 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-22 13:04:17,993 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-22 13:04:18,478 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-22 13:04:56,755 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:04:56,822 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-22 13:05:02,389 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > gcode_macros
2024-04-22 13:05:04,051 [screen.py:show_popup_message()] - echo: PARK_HZ 
2024-04-22 13:05:04,063 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK_HZ'}
2024-04-22 13:05:46,746 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:05:46,832 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-22 13:05:47,558 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffff6bfca440 (GtkDialog at 0x22a22bd0)>
2024-04-22 13:05:47,584 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-04-22 13:05:48,253 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-22 13:05:48,253 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M18'}
2024-04-22 13:05:58,223 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-22 13:05:58,269 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-22 13:05:58,742 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-22 13:07:08,842 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:07:08,930 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-22 13:07:09,761 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffff6bfcaa80 (GtkDialog at 0x22c4e320)>
2024-04-22 13:07:09,788 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-04-22 13:07:10,741 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-22 13:07:10,741 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M18'}
2024-04-22 13:07:23,850 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-22 13:07:23,895 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-22 13:07:24,645 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-22 13:07:24,671 [screen.py:show_popup_message()] - error: Must home axis first: 50.000 25.000 10.000 [0.000]
2024-04-22 13:07:26,372 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-22 13:10:32,791 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-22 13:10:38,327 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu > gcode_macros
2024-04-22 13:10:38,914 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-22 13:10:38,978 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 13:10:40,413 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2024-04-22 13:10:42,258 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-22 13:10:42,314 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 13:10:42,930 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-22 13:10:42,931 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-22 13:10:42,977 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-22 13:10:42,993 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-22 13:10:43,029 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-22 13:10:43,035 [menu.py:arrangeMenuItems()] - X > more power
2024-04-22 13:10:43,041 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-22 13:10:43,053 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-22 13:10:43,068 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-22 13:10:43,740 [screen.py:_load_panel()] - Loading panel: network
2024-04-22 13:10:43,780 [network.py:__init__()] - Found wireless interfaces: ['wlan0']
2024-04-22 13:10:43,780 [network.py:__init__()] - Using NetworkManager
2024-04-22 13:10:44,204 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > network
2024-04-22 13:10:44,329 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'ZYIPTest'
  File "/home/biqu/KlipperScreen/panels/network.py", line 101, in load_networks
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 123, in add_network
    netinfo = self.wifi.get_network_info(ssid)

  File "/home/biqu/KlipperScreen/ks_includes/wifi_nm.py", line 224, in get_network_info
    path = self.path_by_ssid[ssid]
NoneType: None
2024-04-22 13:10:44,347 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'ZYIPTest'
  File "/home/biqu/KlipperScreen/panels/network.py", line 101, in load_networks
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 123, in add_network
    netinfo = self.wifi.get_network_info(ssid)

  File "/home/biqu/KlipperScreen/ks_includes/wifi_nm.py", line 224, in get_network_info
    path = self.path_by_ssid[ssid]
NoneType: None
2024-04-22 13:10:44,874 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:10:44,912 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-22 13:10:44,932 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-22 13:10:44,970 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-22 13:10:44,975 [menu.py:arrangeMenuItems()] - X > more power
2024-04-22 13:10:44,981 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-22 13:10:44,993 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-22 13:10:45,008 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-22 13:10:45,906 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console
2024-04-22 13:15:28,413 [screen.py:show_popup_message()] - error: Probe samples exceed samples_tolerance
2024-04-22 13:16:09,338 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:16:09,402 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-22 13:16:09,420 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-22 13:16:09,459 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-22 13:16:09,464 [menu.py:arrangeMenuItems()] - X > more power
2024-04-22 13:16:09,470 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-22 13:16:09,482 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-22 13:16:09,497 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-22 13:16:10,301 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > gcode_macros
2024-04-22 13:16:11,756 [screen.py:show_popup_message()] - echo: PARK_HZ 
2024-04-22 13:16:11,766 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK_HZ'}
2024-04-22 13:20:03,121 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:20:03,207 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-22 13:20:03,225 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-22 13:20:03,260 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-22 13:20:03,266 [menu.py:arrangeMenuItems()] - X > more power
2024-04-22 13:20:03,272 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-22 13:20:03,283 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-22 13:20:03,298 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-22 13:20:03,657 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:20:03,693 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 13:20:04,790 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-22 13:20:05,569 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-22 13:20:05,611 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-22 13:20:06,193 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-22 13:23:16,491 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu > gcode_macros
2024-04-22 13:23:18,065 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-22 13:23:18,116 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 13:23:18,969 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-22 13:23:18,969 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-22 13:23:19,015 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-22 13:23:19,031 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-22 13:23:19,069 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-22 13:23:19,075 [menu.py:arrangeMenuItems()] - X > more power
2024-04-22 13:23:19,081 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-22 13:23:19,093 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-22 13:23:19,110 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-22 13:23:20,533 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console
2024-04-22 13:23:36,369 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:23:36,409 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-22 13:23:36,425 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-22 13:23:36,460 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-22 13:23:36,466 [menu.py:arrangeMenuItems()] - X > more power
2024-04-22 13:23:36,472 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-22 13:23:36,484 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-22 13:23:36,502 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-22 13:23:38,329 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:23:38,393 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 13:23:39,609 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2024-04-22 13:23:43,139 [screen.py:show_popup_message()] - echo: PARK 
2024-04-22 13:23:43,150 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK'}
2024-04-22 13:27:39,848 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:27:39,901 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 13:44:01,491 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-22 13:44:05,116 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:44:05,193 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 13:44:06,247 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-22 13:44:06,803 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-22 13:44:06,834 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-22 13:44:08,046 [screen.py:_send_action()] - printer.gcode.script: {'script': 'QUAD_GANTRY_LEVEL'}
2024-04-22 13:44:08,948 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu > gcode_macros
2024-04-22 13:44:12,707 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-22 13:44:12,821 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 13:44:13,618 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-22 13:44:13,619 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-22 13:44:13,667 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-22 13:44:13,685 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-22 13:44:13,721 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-22 13:44:13,726 [menu.py:arrangeMenuItems()] - X > more power
2024-04-22 13:44:13,732 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-22 13:44:13,743 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-22 13:44:13,758 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-22 13:44:15,078 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console
2024-04-22 13:45:46,574 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:45:46,614 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-22 13:45:46,630 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-22 13:45:46,670 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-22 13:45:46,675 [menu.py:arrangeMenuItems()] - X > more power
2024-04-22 13:45:46,681 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-22 13:45:46,692 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-22 13:45:46,710 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-22 13:45:51,513 [screen.py:_load_panel()] - Loading panel: system
2024-04-22 13:45:51,525 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/system_info
2024-04-22 13:45:51,606 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > system
2024-04-22 13:45:51,662 [system.py:get_updates()] - {'jsonrpc': '2.0', 'result': {'github_rate_limit': None, 'github_requests_remaining': None, 'github_limit_reset_time': None, 'version_info': {'system': {'package_count': 0, 'package_list': []}, 'moonraker': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Arksine', 'repo_name': 'moonraker', 'remote_url': 'https://github.com/Arksine/moonraker.git', 'recovery_url': 'https://github.com/Arksine/moonraker.git', 'version': 'v0.8.0-325', 'remote_version': 'v0.8.0-325', 'rollback_version': 'v0.8.0-324', 'current_hash': '99b97afc7de1ed16ddc7db29ab6354bd6ea3dfb7', 'remote_hash': '99b97afc7de1ed16ddc7db29ab6354bd6ea3dfb7', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.8.0-325-g99b97afc', 'pristine': False, 'corrupt': False, 'warnings': [], 'anomalies': ["Repo has untracked source files: ['moonraker/components/timelapse.py']"]}, 'klipper': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Klipper3d', 'repo_name': 'klipper', 'remote_url': 'https://github.com/Klipper3d/klipper', 'recovery_url': 'https://github.com/Klipper3d/klipper', 'version': 'v0.12.0-159', 'remote_version': 'v0.12.0-159', 'rollback_version': 'v0.12.0-143', 'current_hash': '2425a74638baa87efef3ca02253804d126101c8a', 'remote_hash': '2425a74638baa87efef3ca02253804d126101c8a', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.12.0-159-g2425a746', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'Klipper-Adaptive-Meshing-Purging': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'kyleisah', 'repo_name': 'Klipper-Adaptive-Meshing-Purging', 'remote_url': 'https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git', 'recovery_url': 'https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git', 'version': 'v1.1.2-12', 'remote_version': 'v1.1.2-12', 'rollback_version': 'v1.1.2-12', 'current_hash': 'd657271f13fc429b5ca36a4f8956b67c9ddf0558', 'remote_hash': 'd657271f13fc429b5ca36a4f8956b67c9ddf0558', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.1.2-12-gd657271f', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail-config': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'mainsail-config', 'remote_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'recovery_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'version': 'v1.2.1-0', 'remote_version': 'v1.2.1-0', 'rollback_version': 'v1.1.0-1', 'current_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'remote_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-0-ge57810d5', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail': {'channel': 'stable', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'web', 'info_tags': [], 'name': 'mainsail', 'repo_name': 'mainsail', 'owner': 'mainsail-crew', 'version': 'v2.10.0', 'remote_version': 'v2.10.0', 'rollback_version': 'v2.9.1', 'last_error': '', 'warnings': [], 'anomalies': []}, 'sonar': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'mainsail-crew', 'repo_name': 'sonar', 'remote_url': 'https://github.com/mainsail-crew/sonar.git', 'recovery_url': 'https://github.com/mainsail-crew/sonar.git', 'version': 'v0.1.3-1', 'remote_version': 'v0.1.3-1', 'rollback_version': 'v0.1.3-1', 'current_hash': 'eacc498a52f79292063b6f9b0e0c191c34c5dc09', 'remote_hash': 'eacc498a52f79292063b6f9b0e0c191c34c5dc09', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.1.3-1-geacc498a', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'timelapse': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'mainsail-crew', 'repo_name': 'moonraker-timelapse', 'remote_url': 'https://github.com/mainsail-crew/moonraker-timelapse.git', 'recovery_url': 'https://github.com/mainsail-crew/moonraker-timelapse.git', 'version': 'v0.0.1-143', 'remote_version': 'v0.0.1-143', 'rollback_version': 'v0.0.1-143', 'current_hash': 'c7fff11e542b95e0e15b8bb1443cea8159ac0274', 'remote_hash': 'c7fff11e542b95e0e15b8bb1443cea8159ac0274', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.0.1-143-gc7fff11e', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'KlipperScreen': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'KlipperScreen', 'repo_name': 'KlipperScreen', 'remote_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'recovery_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'version': 'v0.4.0-3', 'remote_version': 'v0.4.0-3', 'rollback_version': 'v0.3.9-92', 'current_hash': '31f88d2ffd5169297261b010626d1bac815c71ac', 'remote_hash': '31f88d2ffd5169297261b010626d1bac815c71ac', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.4.0-3-g31f88d2f', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'print_area_bed_mesh': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Turge08', 'repo_name': 'print_area_bed_mesh', 'remote_url': 'https://github.com/Turge08/print_area_bed_mesh.git', 'recovery_url': 'https://github.com/Turge08/print_area_bed_mesh.git', 'version': 'v1.2.1-21', 'remote_version': 'v1.2.1-21', 'rollback_version': 'v1.2.1-21', 'current_hash': '53451c9dedd331c2ead0fbd0f55ee15c37d41b1f', 'remote_hash': '53451c9dedd331c2ead0fbd0f55ee15c37d41b1f', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-21-g53451c9d', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}}, 'busy': False}, 'id': 28}
2024-04-22 13:45:56,377 [system.py:refresh_updates()] - Sending machine.update.refresh
2024-04-22 13:46:29,734 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:46:29,774 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-22 13:46:29,791 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-22 13:46:29,828 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-22 13:46:29,835 [menu.py:arrangeMenuItems()] - X > more power
2024-04-22 13:46:29,843 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-22 13:46:29,855 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-22 13:46:29,872 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-22 13:46:33,099 [system.py:get_updates()] - {'jsonrpc': '2.0', 'result': {'github_rate_limit': 60, 'github_requests_remaining': 59, 'github_limit_reset_time': 1713815183.0, 'version_info': {'system': {'package_count': 16, 'package_list': ['bsdutils', 'fdisk', 'libblkid-dev', 'libblkid1', 'libfdisk1', 'libmount-dev', 'libmount1', 'libsmartcols1', 'libuuid1', 'mount', 'rfkill', 'util-linux', 'uuid-dev', 'xserver-common', 'xserver-xorg-core', 'xserver-xorg-legacy']}, 'moonraker': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Arksine', 'repo_name': 'moonraker', 'remote_url': 'https://github.com/Arksine/moonraker.git', 'recovery_url': 'https://github.com/Arksine/moonraker.git', 'version': 'v0.8.0-325', 'remote_version': 'v0.8.0-327', 'rollback_version': 'v0.8.0-324', 'current_hash': '99b97afc7de1ed16ddc7db29ab6354bd6ea3dfb7', 'remote_hash': '9447494bd50dcc254525a8edc2eb2c90a9528b2c', 'is_dirty': False, 'detached': False, 'commits_behind': [{'sha': '9447494bd50dcc254525a8edc2eb2c90a9528b2c', 'author': 'Eric Callahan', 'date': '1713540481', 'subject': 'file_manager: static type checking fixes', 'message': '', 'tag': None}, {'sha': '44a560003802fea1488118172fedd700cbe0734c', 'author': 'Eric Callahan', 'date': '1712276133', 'subject': 'job_state; check stored state on disconnect', 'message': 'If Klipper disconnects while printing manually set the state\nto "error".\n\nSigned-off-by:  Eric Callahan <arksine.code@gmail.com>', 'tag': None}], 'commits_behind_count': 2, 'git_messages': [], 'full_version_string': 'v0.8.0-325-g99b97afc', 'pristine': False, 'corrupt': False, 'warnings': [], 'anomalies': ["Repo has untracked source files: ['moonraker/components/timelapse.py']"]}, 'klipper': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Klipper3d', 'repo_name': 'klipper', 'remote_url': 'https://github.com/Klipper3d/klipper', 'recovery_url': 'https://github.com/Klipper3d/klipper', 'version': 'v0.12.0-159', 'remote_version': 'v0.12.0-171', 'rollback_version': 'v0.12.0-143', 'current_hash': '2425a74638baa87efef3ca02253804d126101c8a', 'remote_hash': '2f6e94c94cae036b70b02df996dc12e2e61e5dcb', 'is_dirty': False, 'detached': False, 'commits_behind': [{'sha': '2f6e94c94cae036b70b02df996dc12e2e61e5dcb', 'author': 'Alessandro Maggi', 'date': '1713653878', 'subject': 'docs: Fix typo in Bed_Mesh.md (#6572)', 'message': 'Signed-off-by: Maggi Alessandro <maggialessandro360@gmail.com>', 'tag': None}, {'sha': '713b50969848910d52c7d91dce695140bb59df9d', 'author': 'Timofey Titovets', 'date': '1713652951', 'subject': 'sht3x: Add sht31 support (#6560)', 'message': 'Signed-off-by: Timofey Titovets <nefelim4ag@gmail.com>', 'tag': None}, {'sha': '28faf814143a22534f2afa5b292ffd97b8acf886', 'author': "Kevin O'Connor", 'date': '1713633822', 'subject': 'docs: Update CANBUS_Troubleshooting.md to avoid formatting error', 'message': 'Avoid starting a line with "128." as that confused markdown.\n\nSigned-off-by: Kevin O\'Connor <kevin@koconnor.net>', 'tag': None}, {'sha': '819599362cad73316759e003b048545d09258a54', 'author': "Kevin O'Connor", 'date': '1713631967', 'subject': 'bulk_sensor: Rename BulkDataQueue methods', 'message': "Rename pull_samples() to pull_queue() and rename clear_sample() to\nclear_queue().  This avoids confusion between the queue of response\nmessages and the larger list of samples stored within those messages.\n\nSigned-off-by: Kevin O'Connor <kevin@koconnor.net>", 'tag': None}, {'sha': 'abb79103162af2b7437c7a82f1c88d7fb1abfb68', 'author': "Kevin O'Connor", 'date': '1713631967', 'subject': 'bulk_sensor: Rework ChipClockUpdater class into FixedFreqReader', 'message': "Move the sensor_bulk_data message queuing into the class, and then\nrename that class.  This simplifies the users of the code.\n\nSigned-off-by: Kevin O'Connor <kevin@koconnor.net>", 'tag': None}, {'sha': '9ceaae3847b4bb87f0e894d6133995f7a07b21bf', 'author': "Kevin O'Connor", 'date': '1713631967', 'subject': 'bulk_sensor: Refactor ChipClockUpdater constructor', 'message': "Build the clock_sync and struct.Struct() in the ChipClockUpdater\nconstructor.\n\nSigned-off-by: Kevin O'Connor <kevin@koconnor.net>", 'tag': None}, {'sha': '56829b07d2428abf199bac55cec499286eab5c6e', 'author': "Kevin O'Connor", 'date': '1713631967', 'subject': 'ldc1612: Use extract_samples() for sample timestamp calculation', 'message': "Signed-off-by: Kevin O'Connor <kevin@koconnor.net>", 'tag': None}, {'sha': 'f73e6dcd12217ce09c8f612aaa076c2d6622c2cb', 'author': "Kevin O'Connor", 'date': '1713631967', 'subject': 'mpu9250: Use extract_samples() for sample timestamp calculation', 'message': "Signed-off-by: Kevin O'Connor <kevin@koconnor.net>", 'tag': None}, {'sha': '144af05270f8862eada2881776d57eaa7ac454dc', 'author': "Kevin O'Connor", 'date': '1713631967', 'subject': 'lis2dw: Use extract_samples() for sample timestamp calculation', 'message': "Signed-off-by: Kevin O'Connor <kevin@koconnor.net>", 'tag': None}, {'sha': '95fdb68587520e5a36449f58e2d9cf5459924d1c', 'author': "Kevin O'Connor", 'date': '1713631967', 'subject': 'adxl345: Move sample timestamp calculation to reusable code', 'message': "Add a new extract_samples() method to the ChipClockUpdater class that\ncalculates the sample timestamp for each sample in a list of bulk\nsensor reports.\n\nUpdate the adxl345 code to use that extract_samples() code.\n\nSigned-off-by: Kevin O'Connor <kevin@koconnor.net>", 'tag': None}, {'sha': 'c106955850fde78f1eb1c68eb7c01a8aba67441f', 'author': "Kevin O'Connor", 'date': '1713631753', 'subject': 'docs: Add information on txqueuelen to CANBUS_Troubleshooting.md', 'message': "Provide some background information on the Linux can interface\ntxqueuelen parameter, errors that it can cause, and considerations\nwhen configuring it.\n\nSigned-off-by: Kevin O'Connor <kevin@koconnor.net>", 'tag': None}, {'sha': '12e9b633d89bf9bf6ad7c8b6198191159bcf27eb', 'author': "Kevin O'Connor", 'date': '1713631626', 'subject': 'docs: Recommend using "ip" instead of "ifconfig" in CANBUS.md', 'message': "Some Linux systems do not install ifconfig, while ip should always be\navailable.  So, update the canbus documentation to recommend that.\n\nSigned-off-by: Kevin O'Connor <kevin@koconnor.net>", 'tag': None}], 'commits_behind_count': 12, 'git_messages': [], 'full_version_string': 'v0.12.0-159-g2425a746', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'Klipper-Adaptive-Meshing-Purging': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'kyleisah', 'repo_name': 'Klipper-Adaptive-Meshing-Purging', 'remote_url': 'https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git', 'recovery_url': 'https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git', 'version': 'v1.1.2-12', 'remote_version': 'v1.1.2-12', 'rollback_version': 'v1.1.2-12', 'current_hash': 'd657271f13fc429b5ca36a4f8956b67c9ddf0558', 'remote_hash': 'd657271f13fc429b5ca36a4f8956b67c9ddf0558', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.1.2-12-gd657271f', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail-config': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'mainsail-config', 'remote_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'recovery_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'version': 'v1.2.1-0', 'remote_version': 'v1.2.1-0', 'rollback_version': 'v1.1.0-1', 'current_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'remote_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-0-ge57810d5', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail': {'channel': 'stable', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'web', 'info_tags': [], 'name': 'mainsail', 'repo_name': 'mainsail', 'owner': 'mainsail-crew', 'version': 'v2.10.0', 'remote_version': 'v2.10.0', 'rollback_version': 'v2.9.1', 'last_error': '', 'warnings': [], 'anomalies': []}, 'sonar': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'mainsail-crew', 'repo_name': 'sonar', 'remote_url': 'https://github.com/mainsail-crew/sonar.git', 'recovery_url': 'https://github.com/mainsail-crew/sonar.git', 'version': 'v0.1.3-1', 'remote_version': 'v0.1.3-1', 'rollback_version': 'v0.1.3-1', 'current_hash': 'eacc498a52f79292063b6f9b0e0c191c34c5dc09', 'remote_hash': 'eacc498a52f79292063b6f9b0e0c191c34c5dc09', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.1.3-1-geacc498a', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'timelapse': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'mainsail-crew', 'repo_name': 'moonraker-timelapse', 'remote_url': 'https://github.com/mainsail-crew/moonraker-timelapse.git', 'recovery_url': 'https://github.com/mainsail-crew/moonraker-timelapse.git', 'version': 'v0.0.1-143', 'remote_version': 'v0.0.1-143', 'rollback_version': 'v0.0.1-143', 'current_hash': 'c7fff11e542b95e0e15b8bb1443cea8159ac0274', 'remote_hash': 'c7fff11e542b95e0e15b8bb1443cea8159ac0274', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.0.1-143-gc7fff11e', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'KlipperScreen': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'KlipperScreen', 'repo_name': 'KlipperScreen', 'remote_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'recovery_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'version': 'v0.4.0-3', 'remote_version': 'v0.4.0-15', 'rollback_version': 'v0.3.9-92', 'current_hash': '31f88d2ffd5169297261b010626d1bac815c71ac', 'remote_hash': '7e5886427d2cc56b6e528d2a7f9411632fdbce23', 'is_dirty': False, 'detached': False, 'commits_behind': [{'sha': '7e5886427d2cc56b6e528d2a7f9411632fdbce23', 'author': 'alfrix', 'date': '1713739655', 'subject': 'bed_mesh: fix round bed not loading fixes #1343', 'message': '', 'tag': None}, {'sha': '17c65f7916df1432a7e786cd46c5de709639dcc5', 'author': 'alfrix', 'date': '1713722133', 'subject': 'job_status: overscrolling fix #1339', 'message': '', 'tag': None}, {'sha': '1debee7b58be75e27cf6b0a5304cea5b09e59db0', 'author': 'alfrix', 'date': '1713721368', 'subject': 'bed_mesh: show round bed without padded values', 'message': '', 'tag': None}, {'sha': 'c75ba990c810624b174a35d274e7f36ea2c9490a', 'author': 'alfrix', 'date': '1713573139', 'subject': 'macros: send gcode style (G/M) macros without =', 'message': '', 'tag': None}, {'sha': '574066d95c24df97b9fb696d8d31b56b10f567a2', 'author': 'alfrix', 'date': '1713481556', 'subject': 'bed_mesh: deduplicate some code', 'message': '', 'tag': None}, {'sha': '102b500166a981ea2991ee174b6b22aefcbb553b', 'author': 'alfrix', 'date': '1713479731', 'subject': 'bed_mesh: draw axis on round beds too', 'message': '', 'tag': None}, {'sha': '11631a2f5886cd6af4031f3b7642944963c50475', 'author': 'alfrix', 'date': '1713453184', 'subject': 'move: also reinit bed_mesh when inverting', 'message': '', 'tag': None}, {'sha': 'f22f7574b372b86413c36c1b4fb6dfe1d0f3a469', 'author': 'Alfredo Monclus', 'date': '1713453058', 'subject': 'bed_level: support inversion and fix screws_rotation of 3/6 screws (#1335)', 'message': '* bed_level: major rework\r\n\r\ndeprecate screw positions, we will be auto-detecting from now on\r\n\r\nsupport rotating the layout (previously only rotated the button actions)\r\n\r\ninvert support, inverting axis in KS will invert the layout\r\n\r\n* move: mark bed_level to reinit after invert\r\n\r\n* bed_level: rotate with a shift function\r\n\r\n* bed_level: rotation show popup if misconfigured\r\n\r\n* bed_level: message for screw configurations not supportted in a more informative way\r\n\r\n* docs: update bed_level docs', 'tag': None}, {'sha': '6f28f39f0ecd9ed250d0b70994accc779c37a025', 'author': 'Weblate (bot)', 'date': '1713453031', 'subject': 'Translated using Weblate (Polish) (#1338)', 'message': 'Currently translated at 99.2% (270 of 272 strings)\r\n\r\n\r\nTranslate-URL: https://hosted.weblate.org/projects/klipperscreen/klipperscreen/pl/\r\nTranslation: KlipperScreen/KlipperScreen\r\n\r\nCo-authored-by: F1CU <ficu1234@gmail.com>', 'tag': None}, {'sha': '6a1e444f3830aeb3b132853d851bcac25efcea37', 'author': 'alfrix', 'date': '1713395780', 'subject': 'bed_mesh: bedmap draw axis', 'message': '', 'tag': None}, {'sha': 'd23ca4557a00680ac02bb1890617a1640f0d90da', 'author': 'alfrix', 'date': '1713286923', 'subject': 'zcalibrate: add support for axis twist compensation', 'message': '', 'tag': None}, {'sha': '761548f96ea3f7ff1372e353974c99fe7309747c', 'author': 'alfrix', 'date': '1713286490', 'subject': 'zcalibrate: add confirmation for abort close #1326', 'message': '', 'tag': None}], 'commits_behind_count': 12, 'git_messages': [], 'full_version_string': 'v0.4.0-3-g31f88d2f', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'print_area_bed_mesh': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Turge08', 'repo_name': 'print_area_bed_mesh', 'remote_url': 'https://github.com/Turge08/print_area_bed_mesh.git', 'recovery_url': 'https://github.com/Turge08/print_area_bed_mesh.git', 'version': 'v1.2.1-21', 'remote_version': 'v1.2.1-21', 'rollback_version': 'v1.2.1-21', 'current_hash': '53451c9dedd331c2ead0fbd0f55ee15c37d41b1f', 'remote_hash': '53451c9dedd331c2ead0fbd0f55ee15c37d41b1f', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-21-g53451c9d', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}}, 'busy': False}, 'id': 29}
2024-04-22 13:46:33,112 [system.py:_needs_update()] - KlipperScreen v0.4.0-3 -> v0.4.0-15
2024-04-22 13:46:33,121 [system.py:_needs_update()] - klipper v0.12.0-159 -> v0.12.0-171
2024-04-22 13:46:33,134 [system.py:_needs_update()] - moonraker v0.8.0-325 -> v0.8.0-327
2024-04-22 13:46:33,148 [system.py:_needs_update()] - system  -> 16
2024-04-22 13:50:52,132 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > gcode_macros
2024-04-22 13:50:53,895 [screen.py:show_popup_message()] - echo: PARK 
2024-04-22 13:50:53,906 [screen.py:_send_action()] - printer.gcode.script: {'script': 'PARK'}
2024-04-22 13:53:31,645 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:53:31,701 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-22 13:53:31,716 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-22 13:53:31,752 [menu.py:arrangeMenuItems()] - X > more pins
2024-04-22 13:53:31,757 [menu.py:arrangeMenuItems()] - X > more power
2024-04-22 13:53:31,764 [menu.py:arrangeMenuItems()] - X > more camera
2024-04-22 13:53:31,774 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-04-22 13:53:31,790 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-22 13:53:33,045 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:53:33,092 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 13:53:34,017 [screen.py:_load_panel()] - Loading panel: temperature
2024-04-22 13:53:34,057 [temperature.py:add_device()] - Adding device: extruder
2024-04-22 13:53:34,074 [temperature.py:add_device()] - Adding device: heater_bed
2024-04-22 13:53:34,088 [temperature.py:add_device()] - Adding device: temperature_sensor EBB_NTC
2024-04-22 13:53:34,101 [temperature.py:select_heater()] - Selecting extruder
2024-04-22 13:53:34,103 [temperature.py:select_heater()] - Selecting heater_bed
2024-04-22 13:53:34,184 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-04-22 13:53:35,088 [temperature.py:select_heater()] - Deselecting extruder
2024-04-22 13:53:36,549 [temperature.py:set_temperature()] - {'bed': 90.0, 'extruder': 220.0}
2024-04-22 13:53:36,550 [temperature.py:set_temperature()] - {'bed': 90.0, 'extruder': 220.0}
2024-04-22 13:53:36,551 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S90.0
2024-04-22 13:53:37,024 [temperature.py:set_temperature()] - {'bed': 80.0, 'extruder': 240.0}
2024-04-22 13:53:37,025 [temperature.py:set_temperature()] - {'bed': 80.0, 'extruder': 240.0}
2024-04-22 13:53:37,025 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S80.0
2024-04-22 13:53:37,481 [temperature.py:set_temperature()] - {'bed': 0.0, 'extruder': 210.0}
2024-04-22 13:53:37,481 [temperature.py:set_temperature()] - {'bed': 0.0, 'extruder': 210.0}
2024-04-22 13:53:37,482 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S0.0
2024-04-22 13:53:38,237 [temperature.py:set_temperature()] - {'bed': 90.0, 'extruder': 220.0}
2024-04-22 13:53:38,238 [temperature.py:set_temperature()] - {'bed': 90.0, 'extruder': 220.0}
2024-04-22 13:53:38,238 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S90.0
2024-04-22 13:53:54,357 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:53:54,475 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 13:53:56,116 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-04-22 13:53:57,501 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S0
2024-04-22 13:54:08,224 [temperature.py:verify_max_temp()] - 100/120
2024-04-22 13:54:08,229 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffff6bfe4d00 (GtkDialog at 0x22cf5f30)>
2024-04-22 13:54:08,262 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-04-22 13:54:10,744 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-22 13:54:13,519 [temperature.py:verify_max_temp()] - 100/120
2024-04-22 13:54:13,519 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S100
2024-04-22 13:58:34,444 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 13:58:34,567 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 14:12:30,885 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-22 14:12:32,714 [move.py:change_distance()] - ### Distance .1
2024-04-22 14:12:33,834 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+.1 F600'}
2024-04-22 14:12:33,841 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-22 14:12:35,114 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.1 F600'}
2024-04-22 14:12:35,122 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-22 14:12:35,994 [move.py:change_distance()] - ### Distance 1
2024-04-22 14:13:44,754 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 14:13:44,846 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 14:13:51,338 [main_menu.py:toggle_visibility()] - Graph show True: heater_bed
